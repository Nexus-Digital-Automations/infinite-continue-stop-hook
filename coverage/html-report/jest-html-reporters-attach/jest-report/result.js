window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":14,"numPassedTestSuites":0,"numPassedTests":22,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":36,"startTime":1758922099540,"success":false,"testResults":[{"numFailingTests":14,"numPassingTests":22,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1758922099930,"loadTestEnvironmentEnd":1758922099666,"loadTestEnvironmentStart":1758922099627,"runtime":263,"setupAfterEnvEnd":1758922099734,"setupAfterEnvStart":1758922099714,"setupFilesEnd":1758922099667,"setupFilesStart":1758922099667,"slow":false,"start":1758922099667},"testFilePath":"/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js","failureMessage":"  ● Agent Management › Agent Initialization › Initialization Error Handling › should handle file write errors during initialization\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      222 |         const result = await api.initializeAgent('error-test-agent');\n      223 |\n    > 224 |         expect(result.success).toBe(false);\n          |                                ^\n      225 |         expect(result.error).toContain('Failed to initialize agent');\n      226 |         expect(result.timestamp).toBeDefined();\n      227 |       });\n\n      at Object.toBe (test/unit/agent-management.test.js:224:32)\n\n  ● Agent Management › Agent Initialization › Initialization Error Handling › should handle corrupted features file during initialization\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      232 |         const result = await api.initializeAgent('corrupt-file-agent');\n      233 |\n    > 234 |         expect(result.success).toBe(false);\n          |                                ^\n      235 |         expect(result.error).toContain('Failed to initialize agent');\n      236 |       });\n      237 |\n\n      at Object.toBe (test/unit/agent-management.test.js:234:32)\n\n  ● Agent Management › Agent Reinitialization › Reinitialization Error Handling › should handle file write errors during reinitialization\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      377 |         const result = await api.reinitializeAgent(existingAgentId);\n      378 |\n    > 379 |         expect(result.success).toBe(false);\n          |                                ^\n      380 |         expect(result.error).toContain('Failed to reinitialize agent');\n      381 |         expect(result.timestamp).toBeDefined();\n      382 |       });\n\n      at Object.toBe (test/unit/agent-management.test.js:379:32)\n\n  ● Agent Management › Agent Reinitialization › Reinitialization Error Handling › should handle corrupted features file during reinitialization\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      387 |         const result = await api.reinitializeAgent(existingAgentId);\n      388 |\n    > 389 |         expect(result.success).toBe(false);\n          |                                ^\n      390 |         expect(result.error).toContain('Failed to reinitialize agent');\n      391 |       });\n      392 |     });\n\n      at Object.toBe (test/unit/agent-management.test.js:389:32)\n\n  ● Agent Management › Stop Authorization › Basic Stop Authorization › should create .stop-allowed flag file\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      429 |\n      430 |         // Verify flag file was created\n    > 431 |         expect(mockFs.hasFile(TEST_STOP_FLAG_PATH)).toBe(true);\n          |                                                     ^\n      432 |\n      433 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n      434 |         expect(flagContent.stop_allowed).toBe(true);\n\n      at Object.toBe (test/unit/agent-management.test.js:431:53)\n\n  ● Agent Management › Stop Authorization › Basic Stop Authorization › should include comprehensive stop data in flag file\n\n    SyntaxError: \"undefined\" is not valid JSON\n        at JSON.parse (<anonymous>)\n\n      445 |         expect(result.success).toBe(true);\n      446 |\n    > 447 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n          |                                  ^\n      448 |\n      449 |         expect(flagContent).toEqual({\n      450 |           stop_allowed: true,\n\n      at Object.parse (test/unit/agent-management.test.js:447:34)\n\n  ● Agent Management › Stop Authorization › Stop Authorization Edge Cases › should handle empty agent ID\n\n    SyntaxError: \"undefined\" is not valid JSON\n        at JSON.parse (<anonymous>)\n\n      464 |         expect(result.authorization.authorized_by).toBe('');\n      465 |\n    > 466 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n          |                                  ^\n      467 |         expect(flagContent.authorized_by).toBe('');\n      468 |       });\n      469 |\n\n      at Object.parse (test/unit/agent-management.test.js:466:34)\n\n  ● Agent Management › Stop Authorization › Stop Authorization Edge Cases › should handle very long reasons\n\n    SyntaxError: \"undefined\" is not valid JSON\n        at JSON.parse (<anonymous>)\n\n      477 |         expect(result.authorization.reason).toBe(longReason);\n      478 |\n    > 479 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n          |                                  ^\n      480 |         expect(flagContent.reason).toBe(longReason);\n      481 |       });\n      482 |\n\n      at Object.parse (test/unit/agent-management.test.js:479:34)\n\n  ● Agent Management › Stop Authorization › Stop Authorization Edge Cases › should overwrite existing stop flag\n\n    SyntaxError: \"undefined\" is not valid JSON\n        at JSON.parse (<anonymous>)\n\n      507 |         expect(result2.success).toBe(true);\n      508 |\n    > 509 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n          |                                  ^\n      510 |         expect(flagContent.authorized_by).toBe(secondAgent);\n      511 |         expect(flagContent.reason).toBe('Second stop reason');\n      512 |         expect(flagContent.timestamp).toBe('2025-09-23T13:00:00.000Z');\n\n      at Object.parse (test/unit/agent-management.test.js:509:34)\n\n  ● Agent Management › Stop Authorization › Stop Authorization Error Handling › should handle file write errors during stop authorization\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      520 |         const result = await api.authorizeStop('error-agent');\n      521 |\n    > 522 |         expect(result.success).toBe(false);\n          |                                ^\n      523 |         expect(result.error).toContain('Failed to authorize stop');\n      524 |         expect(result.timestamp).toBeDefined();\n      525 |       });\n\n      at Object.toBe (test/unit/agent-management.test.js:522:32)\n\n  ● Agent Management › Stop Authorization › Stop Authorization Error Handling › should handle file system errors gracefully\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"File system unavailable\"\n    Received string:    \"expect(received).toBe(expected) // Object.is equality·\n    Expected: false\n    Received: true\"\n\n      539 |         } catch (error) {\n      540 |           // Expected in this test scenario\n    > 541 |           expect(error.message).toContain('File system unavailable');\n          |                                 ^\n      542 |         }\n      543 |       });\n      544 |     });\n\n      at Object.toContain (test/unit/agent-management.test.js:541:33)\n\n  ● Agent Management › Agent Management Integration › Agent Lifecycle Integration › should handle complete agent lifecycle\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      573 |         expect(agent.previousSessions).toHaveLength(1);\n      574 |\n    > 575 |         expect(mockFs.hasFile(TEST_STOP_FLAG_PATH)).toBe(true);\n          |                                                     ^\n      576 |       });\n      577 |\n      578 |       test('should handle multiple agents with different lifecycles', async () => {\n\n      at Object.toBe (test/unit/agent-management.test.js:575:53)\n\n  ● Agent Management › Agent Management Integration › Agent Lifecycle Integration › should handle multiple agents with different lifecycles\n\n    SyntaxError: \"undefined\" is not valid JSON\n        at JSON.parse (<anonymous>)\n\n      602 |\n      603 |         // Verify stop flag is from the correct agent\n    > 604 |         const flagContent = JSON.parse(mockFs.getFile(TEST_STOP_FLAG_PATH));\n          |                                  ^\n      605 |         expect(flagContent.authorized_by).toBe(agents[2]);\n      606 |       });\n      607 |     });\n\n      at Object.parse (test/unit/agent-management.test.js:604:34)\n\n  ● Agent Management › Edge Cases and Error Recovery › Concurrent Operations › should handle multiple agent operations on same file\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      696 |         const features = await api._loadFeatures();\n      697 |         agents.forEach(agentId => {\n    > 698 |           expect(features.agents[agentId]).toBeDefined();\n          |                                            ^\n      699 |         });\n      700 |       });\n      701 |     });\n\n      at toBeDefined (test/unit/agent-management.test.js:698:44)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (test/unit/agent-management.test.js:697:16)\n","testResults":[{"ancestorTitles":["Agent Management","Agent Initialization","Basic Agent Initialization"],"duration":2,"failureMessages":[],"fullName":"Agent Management Agent Initialization Basic Agent Initialization should initialize new agent successfully","status":"passed","title":"should initialize new agent successfully"},{"ancestorTitles":["Agent Management","Agent Initialization","Basic Agent Initialization"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Initialization Basic Agent Initialization should generate unique session IDs for different agents","status":"passed","title":"should generate unique session IDs for different agents"},{"ancestorTitles":["Agent Management","Agent Initialization","Basic Agent Initialization"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Initialization Basic Agent Initialization should update features file with agent data","status":"passed","title":"should update features file with agent data"},{"ancestorTitles":["Agent Management","Agent Initialization","Basic Agent Initialization"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Initialization Basic Agent Initialization should track initialization in time bucket stats","status":"passed","title":"should track initialization in time bucket stats"},{"ancestorTitles":["Agent Management","Agent Initialization","Basic Agent Initialization"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Initialization Basic Agent Initialization should handle agent initialization with special characters in ID","status":"passed","title":"should handle agent initialization with special characters in ID"},{"ancestorTitles":["Agent Management","Agent Initialization","Agent Session Management"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Initialization Agent Session Management should create agent entry in features file","status":"passed","title":"should create agent entry in features file"},{"ancestorTitles":["Agent Management","Agent Initialization","Agent Session Management"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Initialization Agent Session Management should overwrite existing agent data on new initialization","status":"passed","title":"should overwrite existing agent data on new initialization"},{"ancestorTitles":["Agent Management","Agent Initialization","Agent Session Management"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Initialization Agent Session Management should initialize agents section if it does not exist","status":"passed","title":"should initialize agents section if it does not exist"},{"ancestorTitles":["Agent Management","Agent Initialization","Initialization Error Handling"],"duration":3,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:224:32)"],"fullName":"Agent Management Agent Initialization Initialization Error Handling should handle file write errors during initialization","status":"failed","title":"should handle file write errors during initialization"},{"ancestorTitles":["Agent Management","Agent Initialization","Initialization Error Handling"],"duration":1,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:234:32)"],"fullName":"Agent Management Agent Initialization Initialization Error Handling should handle corrupted features file during initialization","status":"failed","title":"should handle corrupted features file during initialization"},{"ancestorTitles":["Agent Management","Agent Initialization","Initialization Error Handling"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Initialization Initialization Error Handling should handle empty agent ID gracefully","status":"passed","title":"should handle empty agent ID gracefully"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Basic Agent Reinitialization"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Basic Agent Reinitialization should reinitialize existing agent successfully","status":"passed","title":"should reinitialize existing agent successfully"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Basic Agent Reinitialization"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Basic Agent Reinitialization should preserve agent history during reinitialization","status":"passed","title":"should preserve agent history during reinitialization"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Basic Agent Reinitialization"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Basic Agent Reinitialization should update timestamps on reinitialization","status":"passed","title":"should update timestamps on reinitialization"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Basic Agent Reinitialization"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Basic Agent Reinitialization should track reinitialization in time bucket stats","status":"passed","title":"should track reinitialization in time bucket stats"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Reinitialization Session Management"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Reinitialization Session Management should accumulate previous sessions across multiple reinitializations","status":"passed","title":"should accumulate previous sessions across multiple reinitializations"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Reinitialization Session Management"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Reinitialization Session Management should reinitialize non-existent agent as new agent","status":"passed","title":"should reinitialize non-existent agent as new agent"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Reinitialization Session Management"],"duration":1,"failureMessages":[],"fullName":"Agent Management Agent Reinitialization Reinitialization Session Management should handle agent without previous session data","status":"passed","title":"should handle agent without previous session data"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Reinitialization Error Handling"],"duration":0,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:379:32)"],"fullName":"Agent Management Agent Reinitialization Reinitialization Error Handling should handle file write errors during reinitialization","status":"failed","title":"should handle file write errors during reinitialization"},{"ancestorTitles":["Agent Management","Agent Reinitialization","Reinitialization Error Handling"],"duration":0,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:389:32)"],"fullName":"Agent Management Agent Reinitialization Reinitialization Error Handling should handle corrupted features file during reinitialization","status":"failed","title":"should handle corrupted features file during reinitialization"},{"ancestorTitles":["Agent Management","Stop Authorization","Basic Stop Authorization"],"duration":1,"failureMessages":[],"fullName":"Agent Management Stop Authorization Basic Stop Authorization should authorize stop successfully with reason","status":"passed","title":"should authorize stop successfully with reason"},{"ancestorTitles":["Agent Management","Stop Authorization","Basic Stop Authorization"],"duration":0,"failureMessages":[],"fullName":"Agent Management Stop Authorization Basic Stop Authorization should authorize stop with default reason when none provided","status":"passed","title":"should authorize stop with default reason when none provided"},{"ancestorTitles":["Agent Management","Stop Authorization","Basic Stop Authorization"],"duration":0,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:431:53)"],"fullName":"Agent Management Stop Authorization Basic Stop Authorization should create .stop-allowed flag file","status":"failed","title":"should create .stop-allowed flag file"},{"ancestorTitles":["Agent Management","Stop Authorization","Basic Stop Authorization"],"duration":0,"failureMessages":["SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at Object.parse (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:447:34)"],"fullName":"Agent Management Stop Authorization Basic Stop Authorization should include comprehensive stop data in flag file","status":"failed","title":"should include comprehensive stop data in flag file"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Edge Cases"],"duration":0,"failureMessages":["SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at Object.parse (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:466:34)"],"fullName":"Agent Management Stop Authorization Stop Authorization Edge Cases should handle empty agent ID","status":"failed","title":"should handle empty agent ID"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Edge Cases"],"duration":1,"failureMessages":["SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at Object.parse (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:479:34)"],"fullName":"Agent Management Stop Authorization Stop Authorization Edge Cases should handle very long reasons","status":"failed","title":"should handle very long reasons"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Edge Cases"],"duration":0,"failureMessages":[],"fullName":"Agent Management Stop Authorization Stop Authorization Edge Cases should handle special characters in agent ID and reason","status":"passed","title":"should handle special characters in agent ID and reason"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Edge Cases"],"duration":0,"failureMessages":["SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at Object.parse (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:509:34)"],"fullName":"Agent Management Stop Authorization Stop Authorization Edge Cases should overwrite existing stop flag","status":"failed","title":"should overwrite existing stop flag"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Error Handling"],"duration":0,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:522:32)"],"fullName":"Agent Management Stop Authorization Stop Authorization Error Handling should handle file write errors during stop authorization","status":"failed","title":"should handle file write errors during stop authorization"},{"ancestorTitles":["Agent Management","Stop Authorization","Stop Authorization Error Handling"],"duration":1,"failureMessages":["Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"File system unavailable\"\nReceived string:    \"expect(received).toBe(expected) // Object.is equality·\nExpected: false\nReceived: true\"\n    at Object.toContain (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:541:33)"],"fullName":"Agent Management Stop Authorization Stop Authorization Error Handling should handle file system errors gracefully","status":"failed","title":"should handle file system errors gracefully"},{"ancestorTitles":["Agent Management","Agent Management Integration","Agent Lifecycle Integration"],"duration":0,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.toBe (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:575:53)"],"fullName":"Agent Management Agent Management Integration Agent Lifecycle Integration should handle complete agent lifecycle","status":"failed","title":"should handle complete agent lifecycle"},{"ancestorTitles":["Agent Management","Agent Management Integration","Agent Lifecycle Integration"],"duration":1,"failureMessages":["SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at Object.parse (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:604:34)"],"fullName":"Agent Management Agent Management Integration Agent Lifecycle Integration should handle multiple agents with different lifecycles","status":"failed","title":"should handle multiple agents with different lifecycles"},{"ancestorTitles":["Agent Management","Agent Management Integration","Agent Management with Feature Operations"],"duration":0,"failureMessages":[],"fullName":"Agent Management Agent Management Integration Agent Management with Feature Operations should maintain agent state during feature operations","status":"passed","title":"should maintain agent state during feature operations"},{"ancestorTitles":["Agent Management","Edge Cases and Error Recovery","Data Consistency"],"duration":0,"failureMessages":[],"fullName":"Agent Management Edge Cases and Error Recovery Data Consistency should handle partial agent data gracefully","status":"passed","title":"should handle partial agent data gracefully"},{"ancestorTitles":["Agent Management","Edge Cases and Error Recovery","Data Consistency"],"duration":1,"failureMessages":[],"fullName":"Agent Management Edge Cases and Error Recovery Data Consistency should handle malformed agent data","status":"passed","title":"should handle malformed agent data"},{"ancestorTitles":["Agent Management","Edge Cases and Error Recovery","Concurrent Operations"],"duration":0,"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at toBeDefined (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:698:44)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/Users/jeremyparker/infinite-continue-stop-hook/test/unit/agent-management.test.js:697:16)"],"fullName":"Agent Management Edge Cases and Error Recovery Concurrent Operations should handle multiple agent operations on same file","status":"failed","title":"should handle multiple agent operations on same file"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["*.js","lib/**/*.js","development/essentials/*.js","scripts/**/*.js","!test/**","!coverage/**","!node_modules/**","!.node-modules-backup/**","!jest.config.js","!eslint.config.js","!babel.config.js","!development/performance-analysis/**","!development/reports/**","!development/docs/**","!development/temp-scripts/**","!development/backups/**","!**/node_modules/**","!**/dist/**","!**/build/**","!**/*.config.js","!**/*.min.js"],"coverageDirectory":"/Users/jeremyparker/infinite-continue-stop-hook/coverage","coverageProvider":"v8","coverageReporters":["text","text-summary","html","json","json-summary","lcov","clover"],"coverageThreshold":{"global":{"branches":75,"functions":80,"lines":80,"statements":80},"./taskmanager-api.js":{"branches":70,"functions":75,"lines":75,"statements":75},"./lib/":{"branches":80,"functions":85,"lines":85,"statements":85}},"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":true,"expand":false,"findRelatedTests":false,"forceExit":true,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":4,"noStackTrace":false,"nonFlagArgs":["test/unit/agent-management.test.js"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":true,"projects":[{"displayName":"unit","testEnvironment":"node","testMatch":["<rootDir>/test/unit/**/*.test.js"],"setupFilesAfterEnv":["<rootDir>/test/setup.js"],"rootDir":"/Users/jeremyparker/infinite-continue-stop-hook"},{"displayName":"integration","testEnvironment":"node","testMatch":["<rootDir>/test/integration/**/*.test.js"],"setupFilesAfterEnv":["<rootDir>/test/setup.js"],"testTimeout":45000,"rootDir":"/Users/jeremyparker/infinite-continue-stop-hook"},{"displayName":"e2e","testEnvironment":"node","testMatch":["<rootDir>/test/e2e/**/*.test.js"],"setupFilesAfterEnv":["<rootDir>/test/setup.js"],"testTimeout":60000,"rootDir":"/Users/jeremyparker/infinite-continue-stop-hook"}],"reporters":[["default",{}],["/Users/jeremyparker/infinite-continue-stop-hook/node_modules/jest-html-reporters/index.js",{"publicPath":"./coverage/html-report","filename":"jest-report.html","expand":true,"hideIcon":false,"pageTitle":"TaskManager Test Coverage Report","includeFailureMsg":true,"includeSuiteFailure":true,"customInfos":[{"title":"CI/CD Pipeline","value":"🏠 Local Development"},{"title":"Build Number","value":"N/A"},{"title":"Git Branch","value":"unknown"}]}],["/Users/jeremyparker/infinite-continue-stop-hook/node_modules/jest-junit/index.js",{"outputDirectory":"./coverage/reports","outputName":"junit.xml","classNameTemplate":"{classname}","titleTemplate":"{title}","ancestorSeparator":" › ","usePathForSuiteName":true,"addFileAttribute":true,"includeConsoleOutput":true,"includeShortConsoleOutput":false,"suiteNameTemplate":"{filepath}","testCasePropertiesDirectory":"./coverage/reports/test-case-properties"}],["/Users/jeremyparker/infinite-continue-stop-hook/scripts/jest-json-reporter.js",{"outputPath":"./coverage/reports/test-results.json","includeTestCases":true,"includeAssertionResults":true,"includeConsoleOutput":true}],["/Users/jeremyparker/infinite-continue-stop-hook/scripts/jest-cicd-reporter.js",{"outputPath":"./coverage/reports/ci-cd-results.json","includeGitInfo":true,"includeEnvironmentInfo":true,"includeTimingData":true}]],"rootDir":"/Users/jeremyparker/infinite-continue-stop-hook","runInBand":false,"runTestsByPath":false,"seed":1393078730,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":["test/unit/agent-management.test.js"],"type":"TestPathPatterns"},"testSequencer":"/Users/jeremyparker/infinite-continue-stop-hook/node_modules/@jest/test-sequencer/build/index.js","testTimeout":30000,"updateSnapshot":"new","useStderr":false,"verbose":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1758922099935,"_reporterOptions":{"publicPath":"./coverage/html-report","filename":"jest-report.html","expand":true,"pageTitle":"TaskManager Test Coverage Report","hideIcon":false,"customInfos":[{"title":"CI/CD Pipeline","value":"🏠 Local Development"},{"title":"Build Number","value":"N/A"},{"title":"Git Branch","value":"unknown"}],"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false,"includeFailureMsg":true,"includeSuiteFailure":true},"logInfoMapping":{},"attachInfos":{}})