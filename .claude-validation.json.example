{
  "customValidationRules": [
    {
      "id": "custom-api-tests",
      "name": "API Integration Tests",
      "description": "Run custom API integration tests to verify endpoints",
      "command": "npm run test:api",
      "timeout": 120000,
      "enabled": true,
      "successCriteria": {
        "exitCode": 0,
        "outputContains": "All tests passed",
        "outputNotContains": "FAILED"
      },
      "environment": {
        "NODE_ENV": "test",
        "API_TIMEOUT": "30000"
      }
    },
    {
      "id": "custom-db-migration",
      "name": "Database Migration Check",
      "description": "Verify all database migrations are applied successfully",
      "command": "npm run db:migrate:status",
      "timeout": 60000,
      "enabled": true,
      "successCriteria": {
        "exitCode": 0,
        "outputContains": "up-to-date"
      }
    },
    {
      "id": "custom-performance-check",
      "name": "Performance Benchmarks",
      "description": "Run performance tests to ensure no regressions",
      "command": "npm run test:performance",
      "timeout": 180000,
      "enabled": false,
      "successCriteria": {
        "exitCode": 0,
        "outputNotContains": "REGRESSION"
      }
    },
    {
      "id": "custom-accessibility-audit",
      "name": "Accessibility Audit",
      "description": "Run accessibility tests using axe-core",
      "command": "npm run test:a11y",
      "timeout": 90000,
      "enabled": true,
      "successCriteria": {
        "exitCode": 0,
        "outputContains": "0 violations"
      }
    },
    {
      "id": "custom-docker-health",
      "name": "Docker Container Health",
      "description": "Verify Docker containers start and are healthy",
      "command": "docker-compose up -d && docker-compose ps | grep -q 'healthy'",
      "timeout": 120000,
      "enabled": true,
      "successCriteria": {
        "exitCode": 0
      }
    }
  ],
  "configuration": {
    "description": "Custom validation rules for project-specific quality gates",
    "schema": {
      "customValidationRules": {
        "type": "array",
        "description": "Array of custom validation rule objects",
        "items": {
          "id": {
            "type": "string",
            "required": true,
            "description": "Unique identifier for the validation rule"
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "Human-readable name for the validation rule"
          },
          "description": {
            "type": "string",
            "description": "Description of what this validation rule checks"
          },
          "command": {
            "type": "string",
            "required": true,
            "description": "Shell command to execute for validation"
          },
          "timeout": {
            "type": "number",
            "default": 60000,
            "description": "Timeout in milliseconds for command execution"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether this rule is enabled for validation"
          },
          "successCriteria": {
            "type": "object",
            "description": "Criteria for determining validation success",
            "properties": {
              "exitCode": {
                "type": "number",
                "description": "Expected exit code (usually 0 for success)"
              },
              "outputContains": {
                "type": "string",
                "description": "String that must be present in command output"
              },
              "outputNotContains": {
                "type": "string",
                "description": "String that must NOT be present in command output"
              }
            }
          },
          "environment": {
            "type": "object",
            "description": "Environment variables to set during command execution"
          }
        }
      }
    }
  }
}