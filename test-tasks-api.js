/**
 * Test script for new TASKS.json API system
 * Validates migration, adapter functionality, and auto-generation
 */

const fs = require('fs').promises;
const path = require('path');
const TasksApiAdapter = require('./tasks-api-adapter');

async function testTasksApi() {
  console.log('üß™ Testing TASKS.json API system...\n');

  try {
    // Test 1: Verify TASKS.json exists and has correct structure
    console.log('Test 1: Verifying TASKS.json structure...');
    const tasksPath = path.join(__dirname, 'TASKS.json');
    const tasksData = JSON.parse(await fs.readFile(tasksPath, 'utf8'));

    console.log(`‚úÖ Schema version: ${tasksData.schema_version}`);
    console.log(`‚úÖ Total tasks: ${tasksData.metadata.total_tasks}`);
    console.log(`‚úÖ Tasks by type:`, tasksData.metadata.tasks_by_type);
    console.log(`‚úÖ Migration stats:`, tasksData.metadata.migration_stats);

    // Test 2: Verify task types are present
    console.log('\nTest 2: Verifying task types...');
    const taskTypes = [...new Set(tasksData.tasks.map((t) => t.type))];
    console.log(`‚úÖ Available task types: ${taskTypes.join(', ')}`);

    // Test 3: Test adapter functionality
    console.log('\nTest 3: Testing adapter functionality...');
    const adapter = new TasksApiAdapter();
    const adaptedData = adapter.adaptTasksToFeaturesFormat(tasksData);
    console.log(`‚úÖ Adapted ${adaptedData.features.length} feature tasks`);
    console.log(`‚úÖ Adapted ${adaptedData.tasks.length} other tasks`);

    // Test 4: Verify auto-generated tasks exist
    console.log('\nTest 4: Verifying auto-generated tasks...');
    const autoGeneratedTasks = tasksData.tasks.filter((t) => t.auto_generated);
    console.log(`‚úÖ Found ${autoGeneratedTasks.length} auto-generated tasks`);

    const testTasks = autoGeneratedTasks.filter((t) => t.type === 'test');
    const auditTasks = autoGeneratedTasks.filter((t) => t.type === 'audit');
    console.log(`‚úÖ Test tasks: ${testTasks.length}`);
    console.log(`‚úÖ Audit tasks: ${auditTasks.length}`);

    // Test 5: Verify task relationships
    console.log('\nTest 5: Verifying task relationships...');
    const relationshipCount = Object.keys(
      tasksData.task_relationships || {},
    ).length;
    console.log(`‚úÖ Task relationships defined: ${relationshipCount}`);

    // Test 6: Verify priority system configuration
    console.log('\nTest 6: Verifying priority system...');
    const priorityOrder = tasksData.priority_system?.order || [];
    console.log(`‚úÖ Priority order: ${priorityOrder.join(' ‚Üí ')}`);

    // Test 7: Test task sorting by priority
    console.log('\nTest 7: Testing task priority sorting...');
    const sortedTasks = adapter.sortTasksByPriority([...tasksData.tasks]);
    const taskTypes7 = sortedTasks
      .slice(0, 10)
      .map((t) => `${t.type}(${t.priority})`);
    console.log(`‚úÖ First 10 tasks by priority: ${taskTypes7.join(', ')}`);

    // Test 8: Verify CLAUDE.md compliance features
    console.log('\nTest 8: Verifying CLAUDE.md compliance...');
    const workflowConfig = tasksData.workflow_config;
    console.log(
      `‚úÖ Auto-generation enabled: ${workflowConfig.auto_generation_enabled}`,
    );
    console.log(
      `‚úÖ Mandatory test gate: ${workflowConfig.mandatory_test_gate}`,
    );
    console.log(
      `‚úÖ Security validation required: ${workflowConfig.security_validation_required}`,
    );

    // Test 9: Test feature task to auto-task generation
    console.log('\nTest 9: Testing auto-task generation...');
    const testFeature = adapter.adaptFeatureToTask({
      title: 'Test Feature for Auto-Generation',
      description: 'Test feature to validate auto-generation system',
      business_value: 'Validates auto-generation functionality',
      category: 'enhancement',
    });

    const autoTasks = adapter.generateAutoTasksForFeature(testFeature, {
      task_relationships: {},
      metadata: { tasks_by_type: {}, total_tasks: 0 },
    });
    console.log(`‚úÖ Generated ${autoTasks.length} auto-tasks for test feature`);
    console.log(
      `‚úÖ Auto-task types: ${autoTasks.map((t) => t.type).join(', ')}`,
    );

    // Summary
    console.log(
      '\nüéâ All tests passed! TASKS.json system is working correctly.',
    );
    console.log('\nüìä Migration Summary:');
    console.log(`   ‚Ä¢ Schema version: ${tasksData.schema_version}`);
    console.log(`   ‚Ä¢ Total tasks: ${tasksData.metadata.total_tasks}`);
    console.log(
      `   ‚Ä¢ Features migrated: ${tasksData.metadata.migration_stats.features_migrated}`,
    );
    console.log(
      `   ‚Ä¢ Auto-generated tasks: ${tasksData.metadata.migration_stats.auto_generated_tasks}`,
    );
    console.log(`   ‚Ä¢ Task types supported: ${taskTypes.length}`);
    console.log(
      `   ‚Ä¢ Auto-generation enabled: ${workflowConfig.auto_generation_enabled}`,
    );
    console.log(`   ‚Ä¢ CLAUDE.md compliance: ‚úÖ`);

    return {
      success: true,
      totalTasks: tasksData.metadata.total_tasks,
      taskTypes: taskTypes,
      autoGeneratedTasks: autoGeneratedTasks.length,
      relationshipCount: relationshipCount,
    };
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    throw error;
  }
}

// Run tests if called directly
if (require.main === module) {
  testTasksApi()
    .then((result) => {
      console.log('\n‚úÖ Test results:', JSON.stringify(result, null, 2));
      return result;
    })
    .catch((error) => {
      console.error('\n‚ùå Test failed:', error.message);
      throw error;
    });
}

module.exports = { testTasksApi };
