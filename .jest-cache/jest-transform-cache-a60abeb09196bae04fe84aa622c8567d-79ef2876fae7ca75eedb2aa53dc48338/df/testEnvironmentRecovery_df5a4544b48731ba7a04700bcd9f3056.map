{"version":3,"names":["cov_ve6xjpezz","actualCoverage","fs","s","require","path","_crypto","NodeModulesMonitor","ErrorRecovery","TestEnvironmentRecovery","constructor","options","b","f","projectRoot","resolve","process","cwd","config","maxRetries","retryDelay","enableRealTimeRecovery","enablePreemptiveBackup","enableHealthMonitoring","maxBackups","backupCompression","backupVerification","contaminationThreshold","emergencyThreshold","monitorIntegration","errorRecoveryIntegration","nodeModulesMonitor","enableBackup","enableRestore","enableDetailed","realTimeWatch","autoRestore","threatEscalation","emergencyLockdown","deepContentAnalysis","proactiveScanning","errorRecovery","backupDir","isRecoveryActive","recoverySession","contaminationHistory","backupRegistry","Map","healthMetrics","lastHealthCheck","contaminationEvents","recoveryEvents","failedRecoveries","systemHealth","criticalPaths","recoveryStrategies","log","length","initialize","id","Date","now","startTime","toISOString","phase","startMonitoring","healthResult","performHealthCheck","status","createPreemptiveBackups","startRealTimeRecovery","sessionId","realTimeRecovery","success","monitoring","error","message","Error","detectAndRecover","contaminationEvent","event","eventRecord","timestamp","type","severity","details","recoveryAttempts","push","severityAssessment","assessContaminationSeverity","riskLevel","recoveryResult","executeRecoveryStrategy","eventId","strategy","duration","updateSystemHealth","activateEmergencyRecovery","healthReport","issues","warnings","checks","fileIntegrity","nodeModulesIntegrity","configurationValidity","backupAvailability","systemResources","checkFileIntegrity","passed","integrityResult","checkIntegrity","violations","filesChecked","checkConfigurationValidity","checkBackupAvailability","checkSystemResources","backupResults","successful","failed","totalSize","criticalPath","fullPath","existsSync","backupResult","createPathBackup","backupPath","size","checksum","set","strategyResult","tryRecoveryStrategy","totalDuration","attempts","Promise","setTimeout","strategies","result","immediateRestoration","selectiveBackupRestore","comprehensiveSystemRestore","emergencyReconstruction","minimalSystemRebuild","results","restoredFiles","affectedFiles","identifyAffectedFiles","filePath","restoreCorruptedFiles","backupInfo","get","restoreFromBackupRegistry","file","reason","verificationResult","verifyRestoration","failedFiles","verificationPassed","restoredPaths","pathsToRestore","determineCriticalPathsForRestore","includes","restoreResult","restoreFromBackup","failedPaths","_contaminationEvent","cleanedDirectories","recreatedStructures","contaminatedDirs","dir","cleanDirectory","essentialDirs","mkdirSync","recursive","reconstructedFiles","criticalConfigs","reconstructed","reconstructFile","createdFiles","createdDirectories","todoPath","isFileCorrupted","minimalTodo","project","basename","tasks","review_strikes","strikes_completed_last_run","current_task_index","last_mode","recovery_info","recovered","writeResult","atomicWrite","JSON","stringify","dirPath","realTimeWatchers","watcher","watch","eventType","filename","handleRealTimeEvent","watchedPaths","isPathContaminated","source","shutdown","close","clear","stopMonitoring","finalReport","generateRecoveryReport","endTime","totalContaminationEvents","totalRecoveryEvents","sessionInfo","Object","fromEntries","statistics","averageRecoveryTime","calculateAverageRecoveryTime","successRate","calculateSuccessRate","mostCommonContamination","getMostCommonContaminationType","criticalPathsCovered","backupsCreated","requiredBackups","filter","availableBackups","Array","from","keys","coverage","resources","recoveryTimes","flatMap","attempt","map","reduce","sum","time","totalAttempts","successfulRecoveries","typeCounts","forEach","max","affectedPaths","copyFileSync","verified","rmSync","force","content","readFileSync","endsWith","parse","stat","statSync","isFile","test","data","level","_logEntry","toUpperCase","component","levelEmoji","info","warn","env","NODE_ENV","console","module","exports"],"sources":["testEnvironmentRecovery.js"],"sourcesContent":["/**\n * Test Environment Recovery System\n * \n * Provides automated recovery and restoration capabilities for test environment contamination\n * with comprehensive backup, validation, and emergency response mechanisms.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst _crypto = require('crypto');\nconst NodeModulesMonitor = require('./nodeModulesMonitor');\nconst ErrorRecovery = require('./errorRecovery');\n\nclass TestEnvironmentRecovery {\n    constructor(options = {}) {\n        this.projectRoot = path.resolve(options.projectRoot || process.cwd());\n        this.config = {\n            // Recovery settings\n            maxRetries: options.maxRetries || 3,\n            retryDelay: options.retryDelay || 1000,\n            enableRealTimeRecovery: options.enableRealTimeRecovery !== false,\n            enablePreemptiveBackup: options.enablePreemptiveBackup !== false,\n            enableHealthMonitoring: options.enableHealthMonitoring !== false,\n            \n            // Backup settings\n            maxBackups: options.maxBackups || 5,\n            backupCompression: options.backupCompression || false,\n            backupVerification: options.backupVerification !== false,\n            \n            // Recovery thresholds\n            contaminationThreshold: options.contaminationThreshold || 3,\n            emergencyThreshold: options.emergencyThreshold || 5,\n            \n            // Integration settings\n            monitorIntegration: options.monitorIntegration !== false,\n            errorRecoveryIntegration: options.errorRecoveryIntegration !== false,\n            \n            ...options.config\n        };\n        \n        // Initialize integrated components\n        this.nodeModulesMonitor = new NodeModulesMonitor({\n            enableBackup: true,\n            enableRestore: true,\n            enableDetailed: true,\n            realTimeWatch: this.config.enableRealTimeRecovery,\n            autoRestore: true,\n            threatEscalation: true,\n            emergencyLockdown: true,\n            deepContentAnalysis: true,\n            proactiveScanning: true\n        });\n        \n        this.errorRecovery = new ErrorRecovery({\n            maxBackups: this.config.maxBackups,\n            backupDir: '.test-environment-backups'\n        });\n        \n        // Recovery state\n        this.isRecoveryActive = false;\n        this.recoverySession = null;\n        this.contaminationHistory = [];\n        this.backupRegistry = new Map();\n        this.healthMetrics = {\n            lastHealthCheck: null,\n            contaminationEvents: 0,\n            recoveryEvents: 0,\n            failedRecoveries: 0,\n            systemHealth: 'UNKNOWN'\n        };\n        \n        // Critical paths to monitor and protect\n        this.criticalPaths = [\n            'node_modules/exit/lib/exit.js',\n            'package.json',\n            'package-lock.json',\n            'TODO.json',\n            'jest.config.js',\n            'jest.coverage.config.js',\n            '.jest-cache',\n            'coverage',\n            'lib',\n            'test'\n        ];\n        \n        // Recovery strategies in order of preference\n        this.recoveryStrategies = [\n            'immediate_restoration',\n            'selective_backup_restore',\n            'comprehensive_system_restore',\n            'emergency_reconstruction',\n            'minimal_system_rebuild'\n        ];\n        \n        this.log('TestEnvironmentRecovery initialized', {\n            projectRoot: this.projectRoot,\n            config: this.config,\n            criticalPaths: this.criticalPaths.length\n        });\n    }\n    \n    /**\n     * Initialize the recovery system and start monitoring\n     */\n    async initialize() {\n        this.log('Initializing test environment recovery system');\n        \n        try {\n            // Create recovery session\n            this.recoverySession = {\n                id: `recovery_${Date.now()}`,\n                startTime: new Date().toISOString(),\n                phase: 'initialization'\n            };\n            \n            // Initialize monitoring systems\n            if (this.config.monitorIntegration) {\n                await this.nodeModulesMonitor.startMonitoring();\n            }\n            \n            // Perform initial health check\n            const healthResult = await this.performHealthCheck();\n            this.healthMetrics.systemHealth = healthResult.status;\n            this.healthMetrics.lastHealthCheck = new Date().toISOString();\n            \n            // Create preemptive backups\n            if (this.config.enablePreemptiveBackup) {\n                await this.createPreemptiveBackups();\n            }\n            \n            // Start real-time monitoring if enabled\n            if (this.config.enableRealTimeRecovery) {\n                await this.startRealTimeRecovery();\n            }\n            \n            this.isRecoveryActive = true;\n            this.recoverySession.phase = 'active_monitoring';\n            \n            this.log('Recovery system initialization completed', {\n                sessionId: this.recoverySession.id,\n                systemHealth: this.healthMetrics.systemHealth,\n                realTimeRecovery: this.config.enableRealTimeRecovery\n            });\n            \n            return {\n                success: true,\n                sessionId: this.recoverySession.id,\n                systemHealth: this.healthMetrics.systemHealth,\n                monitoring: this.config.monitorIntegration,\n                realTimeRecovery: this.config.enableRealTimeRecovery\n            };\n            \n        } catch (error) {\n            this.log('Recovery system initialization failed', { error: error.message }, 'error');\n            throw new Error(`Recovery system initialization failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Detect and respond to contamination events\n     */\n    async detectAndRecover(contaminationEvent) {\n        if (!this.isRecoveryActive) {\n            throw new Error('Recovery system not initialized');\n        }\n        \n        this.log('Contamination event detected', {\n            event: contaminationEvent,\n            sessionId: this.recoverySession.id\n        }, 'warn');\n        \n        // Record contamination event\n        const eventRecord = {\n            id: `contamination_${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            type: contaminationEvent.type || 'UNKNOWN',\n            severity: contaminationEvent.severity || 'MEDIUM',\n            details: contaminationEvent,\n            recoveryAttempts: []\n        };\n        \n        this.contaminationHistory.push(eventRecord);\n        this.healthMetrics.contaminationEvents++;\n        \n        try {\n            // Assess contamination severity\n            const severityAssessment = await this.assessContaminationSeverity(eventRecord);\n            eventRecord.severity = severityAssessment.severity;\n            eventRecord.riskLevel = severityAssessment.riskLevel;\n            \n            // Execute recovery strategy based on severity\n            const recoveryResult = await this.executeRecoveryStrategy(eventRecord);\n            \n            if (recoveryResult.success) {\n                this.healthMetrics.recoveryEvents++;\n                this.log('Contamination recovery successful', {\n                    eventId: eventRecord.id,\n                    strategy: recoveryResult.strategy,\n                    duration: recoveryResult.duration\n                });\n            } else {\n                this.healthMetrics.failedRecoveries++;\n                this.log('Contamination recovery failed', {\n                    eventId: eventRecord.id,\n                    error: recoveryResult.error\n                }, 'error');\n            }\n            \n            // Update system health\n            await this.updateSystemHealth();\n            \n            return {\n                success: recoveryResult.success,\n                eventId: eventRecord.id,\n                strategy: recoveryResult.strategy,\n                systemHealth: this.healthMetrics.systemHealth,\n                details: recoveryResult\n            };\n            \n        } catch (error) {\n            this.healthMetrics.failedRecoveries++;\n            this.log('Recovery process failed', {\n                eventId: eventRecord.id,\n                error: error.message\n            }, 'error');\n            \n            // Emergency fallback\n            if (eventRecord.severity === 'CRITICAL') {\n                await this.activateEmergencyRecovery(eventRecord);\n            }\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Perform comprehensive health check of test environment\n     */\n    async performHealthCheck() {\n        this.log('Performing comprehensive health check');\n        \n        const healthReport = {\n            timestamp: new Date().toISOString(),\n            status: 'HEALTHY',\n            issues: [],\n            warnings: [],\n            checks: {\n                fileIntegrity: null,\n                nodeModulesIntegrity: null,\n                configurationValidity: null,\n                backupAvailability: null,\n                systemResources: null\n            }\n        };\n        \n        try {\n            // Check file integrity\n            healthReport.checks.fileIntegrity = await this.checkFileIntegrity();\n            if (!healthReport.checks.fileIntegrity.passed) {\n                healthReport.issues.push('File integrity violations detected');\n                healthReport.status = 'DEGRADED';\n            }\n            \n            // Check node_modules integrity\n            if (this.config.monitorIntegration) {\n                const integrityResult = await this.nodeModulesMonitor.checkIntegrity();\n                healthReport.checks.nodeModulesIntegrity = {\n                    passed: integrityResult.success,\n                    violations: integrityResult.violations || [],\n                    filesChecked: integrityResult.filesChecked || 0\n                };\n                \n                if (!integrityResult.success) {\n                    healthReport.issues.push(`Node modules integrity failed: ${integrityResult.violations.length} violations`);\n                    healthReport.status = 'COMPROMISED';\n                }\n            }\n            \n            // Check configuration validity\n            healthReport.checks.configurationValidity = await this.checkConfigurationValidity();\n            if (!healthReport.checks.configurationValidity.passed) {\n                healthReport.warnings.push('Configuration issues detected');\n                if (healthReport.status === 'HEALTHY') {\n                    healthReport.status = 'DEGRADED';\n                }\n            }\n            \n            // Check backup availability\n            healthReport.checks.backupAvailability = await this.checkBackupAvailability();\n            if (!healthReport.checks.backupAvailability.passed) {\n                healthReport.warnings.push('Insufficient backup coverage');\n            }\n            \n            // Check system resources\n            healthReport.checks.systemResources = await this.checkSystemResources();\n            if (!healthReport.checks.systemResources.passed) {\n                healthReport.warnings.push('System resource constraints detected');\n            }\n            \n            this.log('Health check completed', {\n                status: healthReport.status,\n                issues: healthReport.issues.length,\n                warnings: healthReport.warnings.length\n            });\n            \n            return healthReport;\n            \n        } catch (error) {\n            healthReport.status = 'ERROR';\n            healthReport.issues.push(`Health check failed: ${error.message}`);\n            \n            this.log('Health check failed', { error: error.message }, 'error');\n            return healthReport;\n        }\n    }\n    \n    /**\n     * Create comprehensive preemptive backups\n     */\n    async createPreemptiveBackups() {\n        this.log('Creating preemptive backups');\n        \n        const backupResults = {\n            timestamp: new Date().toISOString(),\n            successful: [],\n            failed: [],\n            totalSize: 0\n        };\n        \n        for (const criticalPath of this.criticalPaths) {\n            const fullPath = path.resolve(this.projectRoot, criticalPath);\n            \n            try {\n                if (fs.existsSync(fullPath)) {\n                    const backupResult = await this.createPathBackup(fullPath);\n                    \n                    if (backupResult.success) {\n                        backupResults.successful.push({\n                            path: criticalPath,\n                            backupPath: backupResult.backupPath,\n                            size: backupResult.size || 0,\n                            checksum: backupResult.checksum\n                        });\n                        backupResults.totalSize += backupResult.size || 0;\n                        \n                        // Register backup in registry\n                        this.backupRegistry.set(criticalPath, {\n                            backupPath: backupResult.backupPath,\n                            timestamp: backupResult.timestamp,\n                            checksum: backupResult.checksum,\n                            size: backupResult.size\n                        });\n                    } else {\n                        backupResults.failed.push({\n                            path: criticalPath,\n                            error: backupResult.error\n                        });\n                    }\n                }\n            } catch (error) {\n                backupResults.failed.push({\n                    path: criticalPath,\n                    error: error.message\n                });\n            }\n        }\n        \n        this.log('Preemptive backups completed', {\n            successful: backupResults.successful.length,\n            failed: backupResults.failed.length,\n            totalSize: backupResults.totalSize\n        });\n        \n        return backupResults;\n    }\n    \n    /**\n     * Execute recovery strategy based on contamination severity\n     */\n    async executeRecoveryStrategy(contaminationEvent) {\n        const startTime = Date.now();\n        \n        this.log('Executing recovery strategy', {\n            eventId: contaminationEvent.id,\n            severity: contaminationEvent.severity,\n            riskLevel: contaminationEvent.riskLevel\n        });\n        \n        for (const strategy of this.recoveryStrategies) {\n            const strategyResult = await this.tryRecoveryStrategy(strategy, contaminationEvent);\n            \n            contaminationEvent.recoveryAttempts.push({\n                strategy,\n                timestamp: new Date().toISOString(),\n                success: strategyResult.success,\n                error: strategyResult.error,\n                duration: strategyResult.duration\n            });\n            \n            if (strategyResult.success) {\n                const totalDuration = Date.now() - startTime;\n                \n                return {\n                    success: true,\n                    strategy,\n                    duration: totalDuration,\n                    details: strategyResult,\n                    attempts: contaminationEvent.recoveryAttempts.length\n                };\n            }\n            \n            // Wait before trying next strategy\n            if (this.config.retryDelay > 0) {\n                await new Promise(resolve => setTimeout(resolve, this.config.retryDelay));\n            }\n        }\n        \n        // All strategies failed\n        const totalDuration = Date.now() - startTime;\n        return {\n            success: false,\n            error: 'All recovery strategies failed',\n            duration: totalDuration,\n            attempts: contaminationEvent.recoveryAttempts.length,\n            strategies: this.recoveryStrategies\n        };\n    }\n    \n    /**\n     * Try a specific recovery strategy\n     */\n    async tryRecoveryStrategy(strategy, contaminationEvent) {\n        const startTime = Date.now();\n        \n        try {\n            let result;\n            \n            switch (strategy) {\n                case 'immediate_restoration':\n                    result = await this.immediateRestoration(contaminationEvent);\n                    break;\n                case 'selective_backup_restore':\n                    result = await this.selectiveBackupRestore(contaminationEvent);\n                    break;\n                case 'comprehensive_system_restore':\n                    result = await this.comprehensiveSystemRestore(contaminationEvent);\n                    break;\n                case 'emergency_reconstruction':\n                    result = await this.emergencyReconstruction(contaminationEvent);\n                    break;\n                case 'minimal_system_rebuild':\n                    result = await this.minimalSystemRebuild(contaminationEvent);\n                    break;\n                default:\n                    throw new Error(`Unknown recovery strategy: ${strategy}`);\n            }\n            \n            const duration = Date.now() - startTime;\n            return {\n                success: true,\n                strategy,\n                duration,\n                details: result\n            };\n            \n        } catch (error) {\n            const duration = Date.now() - startTime;\n            this.log(`Recovery strategy ${strategy} failed`, {\n                error: error.message,\n                duration,\n                eventId: contaminationEvent.id\n            }, 'error');\n            \n            return {\n                success: false,\n                strategy,\n                duration,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Immediate restoration strategy - fastest response\n     */\n    async immediateRestoration(contaminationEvent) {\n        this.log('Executing immediate restoration', { eventId: contaminationEvent.id });\n        \n        const results = {\n            restoredFiles: [],\n            failed: []\n        };\n        \n        // Identify affected files from contamination event\n        const affectedFiles = this.identifyAffectedFiles(contaminationEvent);\n        \n        for (const filePath of affectedFiles) {\n            try {\n                // Try to restore from node modules monitor if available\n                if (this.config.monitorIntegration && contaminationEvent.type === 'NODE_MODULES_CONTAMINATION') {\n                    await this.nodeModulesMonitor.restoreCorruptedFiles();\n                    results.restoredFiles.push(filePath);\n                } else {\n                    // Use backup registry for direct restoration\n                    const backupInfo = this.backupRegistry.get(filePath);\n                    if (backupInfo) {\n                        await this.restoreFromBackupRegistry(filePath, backupInfo);\n                        results.restoredFiles.push(filePath);\n                    } else {\n                        results.failed.push({ file: filePath, reason: 'No backup available' });\n                    }\n                }\n            } catch (error) {\n                results.failed.push({ file: filePath, reason: error.message });\n            }\n        }\n        \n        // Verify restoration\n        const verificationResult = await this.verifyRestoration(results.restoredFiles);\n        \n        return {\n            strategy: 'immediate_restoration',\n            restoredFiles: results.restoredFiles.length,\n            failedFiles: results.failed.length,\n            verificationPassed: verificationResult.passed,\n            details: results\n        };\n    }\n    \n    /**\n     * Selective backup restore strategy\n     */\n    async selectiveBackupRestore(contaminationEvent) {\n        this.log('Executing selective backup restore', { eventId: contaminationEvent.id });\n        \n        const results = {\n            restoredPaths: [],\n            failed: []\n        };\n        \n        // Determine which paths need restoration based on contamination type\n        const pathsToRestore = this.determineCriticalPathsForRestore(contaminationEvent);\n        \n        for (const criticalPath of pathsToRestore) {\n            try {\n                const fullPath = path.resolve(this.projectRoot, criticalPath);\n                \n                if (criticalPath.includes('TODO.json')) {\n                    // Use ErrorRecovery for TODO.json files\n                    const restoreResult = await this.errorRecovery.restoreFromBackup(fullPath);\n                    if (restoreResult.success) {\n                        results.restoredPaths.push(criticalPath);\n                    } else {\n                        results.failed.push({ path: criticalPath, reason: restoreResult.error });\n                    }\n                } else {\n                    // Use backup registry for other files\n                    const backupInfo = this.backupRegistry.get(criticalPath);\n                    if (backupInfo) {\n                        await this.restoreFromBackupRegistry(criticalPath, backupInfo);\n                        results.restoredPaths.push(criticalPath);\n                    } else {\n                        results.failed.push({ path: criticalPath, reason: 'No backup in registry' });\n                    }\n                }\n            } catch (error) {\n                results.failed.push({ path: criticalPath, reason: error.message });\n            }\n        }\n        \n        return {\n            strategy: 'selective_backup_restore',\n            restoredPaths: results.restoredPaths.length,\n            failedPaths: results.failed.length,\n            details: results\n        };\n    }\n    \n    /**\n     * Comprehensive system restore strategy\n     */\n    async comprehensiveSystemRestore(_contaminationEvent) {\n        this.log('Executing comprehensive system restore');\n        \n        const results = {\n            cleanedDirectories: [],\n            restoredPaths: [],\n            recreatedStructures: []\n        };\n        \n        // Clean contaminated directories\n        const contaminatedDirs = ['.jest-cache', 'coverage', 'node_modules/.cache'];\n        for (const dir of contaminatedDirs) {\n            const fullPath = path.resolve(this.projectRoot, dir);\n            if (fs.existsSync(fullPath)) {\n                try {\n                    await this.cleanDirectory(fullPath);\n                    results.cleanedDirectories.push(dir);\n                } catch (error) {\n                    this.log(`Failed to clean directory ${dir}`, { error: error.message }, 'warn');\n                }\n            }\n        }\n        \n        // Restore all critical paths\n        for (const criticalPath of this.criticalPaths) {\n            const backupInfo = this.backupRegistry.get(criticalPath);\n            if (backupInfo) {\n                try {\n                    await this.restoreFromBackupRegistry(criticalPath, backupInfo);\n                    results.restoredPaths.push(criticalPath);\n                } catch (error) {\n                    this.log(`Failed to restore ${criticalPath}`, { error: error.message }, 'warn');\n                }\n            }\n        }\n        \n        // Recreate essential directory structures\n        const essentialDirs = ['coverage', 'test', 'lib'];\n        for (const dir of essentialDirs) {\n            const fullPath = path.resolve(this.projectRoot, dir);\n            if (!fs.existsSync(fullPath)) {\n                try {\n                    fs.mkdirSync(fullPath, { recursive: true });\n                    results.recreatedStructures.push(dir);\n                } catch (error) {\n                    this.log(`Failed to recreate directory ${dir}`, { error: error.message }, 'warn');\n                }\n            }\n        }\n        \n        return {\n            strategy: 'comprehensive_system_restore',\n            cleanedDirectories: results.cleanedDirectories.length,\n            restoredPaths: results.restoredPaths.length,\n            recreatedStructures: results.recreatedStructures.length,\n            details: results\n        };\n    }\n    \n    /**\n     * Emergency reconstruction strategy\n     */\n    async emergencyReconstruction(_contaminationEvent) {\n        this.log('Executing emergency reconstruction');\n        \n        const results = {\n            reconstructedFiles: [],\n            failed: []\n        };\n        \n        // Reconstruct critical configuration files\n        const criticalConfigs = [\n            { file: 'package.json', type: 'package_config' },\n            { file: 'TODO.json', type: 'todo_structure' },\n            { file: 'jest.config.js', type: 'jest_config' }\n        ];\n        \n        for (const config of criticalConfigs) {\n            try {\n                const filePath = path.resolve(this.projectRoot, config.file);\n                const reconstructed = await this.reconstructFile(filePath, config.type);\n                \n                if (reconstructed.success) {\n                    results.reconstructedFiles.push(config.file);\n                } else {\n                    results.failed.push({ file: config.file, reason: reconstructed.error });\n                }\n            } catch (error) {\n                results.failed.push({ file: config.file, reason: error.message });\n            }\n        }\n        \n        return {\n            strategy: 'emergency_reconstruction',\n            reconstructedFiles: results.reconstructedFiles.length,\n            failedFiles: results.failed.length,\n            details: results\n        };\n    }\n    \n    /**\n     * Minimal system rebuild strategy - last resort\n     */\n    async minimalSystemRebuild(_contaminationEvent) {\n        this.log('Executing minimal system rebuild - last resort');\n        \n        const results = {\n            createdFiles: [],\n            createdDirectories: []\n        };\n        \n        // Create minimal TODO.json structure\n        const todoPath = path.resolve(this.projectRoot, 'TODO.json');\n        if (!fs.existsSync(todoPath) || await this.isFileCorrupted(todoPath)) {\n            const minimalTodo = {\n                project: path.basename(this.projectRoot),\n                tasks: [],\n                review_strikes: 0,\n                strikes_completed_last_run: false,\n                current_task_index: 0,\n                last_mode: null,\n                recovery_info: {\n                    recovered: true,\n                    timestamp: new Date().toISOString(),\n                    strategy: 'minimal_system_rebuild'\n                }\n            };\n            \n            const writeResult = await this.errorRecovery.atomicWrite(\n                todoPath, \n                JSON.stringify(minimalTodo, null, 2), \n                false\n            );\n            \n            if (writeResult.success) {\n                results.createdFiles.push('TODO.json');\n            }\n        }\n        \n        // Ensure essential directories exist\n        const essentialDirs = ['lib', 'test', 'scripts', 'development'];\n        for (const dir of essentialDirs) {\n            const dirPath = path.resolve(this.projectRoot, dir);\n            if (!fs.existsSync(dirPath)) {\n                try {\n                    fs.mkdirSync(dirPath, { recursive: true });\n                    results.createdDirectories.push(dir);\n                } catch (error) {\n                    this.log(`Failed to create directory ${dir}`, { error: error.message }, 'warn');\n                }\n            }\n        }\n        \n        return {\n            strategy: 'minimal_system_rebuild',\n            createdFiles: results.createdFiles.length,\n            createdDirectories: results.createdDirectories.length,\n            details: results\n        };\n    }\n    \n    /**\n     * Start real-time recovery monitoring\n     */\n    async startRealTimeRecovery() {\n        this.log('Starting real-time recovery monitoring');\n        \n        // Set up file system watchers for critical paths\n        this.realTimeWatchers = new Map();\n        \n        for (const criticalPath of this.criticalPaths) {\n            const fullPath = path.resolve(this.projectRoot, criticalPath);\n            \n            if (fs.existsSync(fullPath)) {\n                try {\n                    const watcher = fs.watch(fullPath, { recursive: true }, async (eventType, filename) => {\n                        await this.handleRealTimeEvent(criticalPath, eventType, filename);\n                    });\n                    \n                    this.realTimeWatchers.set(criticalPath, watcher);\n                } catch (error) {\n                    this.log(`Failed to watch ${criticalPath}`, { error: error.message }, 'warn');\n                }\n            }\n        }\n        \n        this.log('Real-time recovery monitoring started', {\n            watchedPaths: this.realTimeWatchers.size\n        });\n    }\n    \n    /**\n     * Handle real-time file system events\n     */\n    async handleRealTimeEvent(criticalPath, eventType, filename) {\n        try {\n            if (eventType === 'change' || eventType === 'rename') {\n                const fullPath = path.resolve(this.projectRoot, criticalPath, filename || '');\n                \n                // Quick contamination check\n                if (await this.isPathContaminated(fullPath)) {\n                    const contaminationEvent = {\n                        type: 'REALTIME_CONTAMINATION',\n                        severity: 'HIGH',\n                        source: 'realtime_monitor',\n                        path: criticalPath,\n                        filename,\n                        eventType,\n                        timestamp: new Date().toISOString()\n                    };\n                    \n                    // Trigger immediate recovery\n                    await this.detectAndRecover(contaminationEvent);\n                }\n            }\n        } catch (error) {\n            this.log('Real-time event handling failed', {\n                path: criticalPath,\n                filename,\n                error: error.message\n            }, 'error');\n        }\n    }\n    \n    /**\n     * Stop recovery system and cleanup\n     */\n    async shutdown() {\n        this.log('Shutting down recovery system');\n        \n        try {\n            // Stop real-time watchers\n            if (this.realTimeWatchers) {\n                for (const [path, watcher] of this.realTimeWatchers) {\n                    try {\n                        watcher.close();\n                    } catch (error) {\n                        this.log(`Failed to close watcher for ${path}`, { error: error.message }, 'warn');\n                    }\n                }\n                this.realTimeWatchers.clear();\n            }\n            \n            // Stop node modules monitoring\n            if (this.config.monitorIntegration) {\n                await this.nodeModulesMonitor.stopMonitoring();\n            }\n            \n            // Generate final report\n            const finalReport = this.generateRecoveryReport();\n            \n            this.isRecoveryActive = false;\n            this.recoverySession.phase = 'shutdown';\n            this.recoverySession.endTime = new Date().toISOString();\n            \n            this.log('Recovery system shutdown completed', {\n                sessionId: this.recoverySession.id,\n                totalContaminationEvents: this.healthMetrics.contaminationEvents,\n                totalRecoveryEvents: this.healthMetrics.recoveryEvents,\n                failedRecoveries: this.healthMetrics.failedRecoveries\n            });\n            \n            return finalReport;\n            \n        } catch (error) {\n            this.log('Recovery system shutdown failed', { error: error.message }, 'error');\n            throw error;\n        }\n    }\n    \n    /**\n     * Generate comprehensive recovery report\n     */\n    generateRecoveryReport() {\n        return {\n            sessionInfo: this.recoverySession,\n            healthMetrics: this.healthMetrics,\n            contaminationHistory: this.contaminationHistory,\n            backupRegistry: Object.fromEntries(this.backupRegistry),\n            config: this.config,\n            statistics: {\n                averageRecoveryTime: this.calculateAverageRecoveryTime(),\n                successRate: this.calculateSuccessRate(),\n                mostCommonContamination: this.getMostCommonContaminationType(),\n                criticalPathsCovered: this.criticalPaths.length,\n                backupsCreated: this.backupRegistry.size\n            }\n        };\n    }\n    \n    // ========================================================================\n    // UTILITY METHODS\n    // ========================================================================\n    \n    async assessContaminationSeverity(contaminationEvent) {\n        // Implement severity assessment logic\n        let severity = contaminationEvent.severity || 'MEDIUM';\n        let riskLevel = 'MODERATE';\n        \n        // Escalate based on contamination type\n        if (contaminationEvent.type === 'NODE_MODULES_CONTAMINATION') {\n            severity = 'HIGH';\n            riskLevel = 'HIGH';\n        } else if (contaminationEvent.type === 'REALTIME_CONTAMINATION') {\n            severity = 'CRITICAL';\n            riskLevel = 'CRITICAL';\n        }\n        \n        return { severity, riskLevel };\n    }\n    \n    async checkFileIntegrity() {\n        const result = { passed: true, violations: [] };\n        \n        for (const criticalPath of this.criticalPaths) {\n            const fullPath = path.resolve(this.projectRoot, criticalPath);\n            if (fs.existsSync(fullPath) && await this.isPathContaminated(fullPath)) {\n                result.passed = false;\n                result.violations.push(criticalPath);\n            }\n        }\n        \n        return result;\n    }\n    \n    async checkConfigurationValidity() {\n        // Implement configuration validation\n        return { passed: true, issues: [] };\n    }\n    \n    async checkBackupAvailability() {\n        const requiredBackups = this.criticalPaths.filter(path => \n            fs.existsSync(path.resolve(this.projectRoot, path))\n        );\n        \n        const availableBackups = Array.from(this.backupRegistry.keys());\n        const coverage = (availableBackups.length / requiredBackups.length) * 100;\n        \n        return {\n            passed: coverage >= 80, // 80% coverage required\n            coverage,\n            availableBackups: availableBackups.length,\n            requiredBackups: requiredBackups.length\n        };\n    }\n    \n    async checkSystemResources() {\n        // Basic system resource check\n        return { passed: true, resources: 'adequate' };\n    }\n    \n    async updateSystemHealth() {\n        const healthResult = await this.performHealthCheck();\n        this.healthMetrics.systemHealth = healthResult.status;\n        this.healthMetrics.lastHealthCheck = new Date().toISOString();\n    }\n    \n    calculateAverageRecoveryTime() {\n        const recoveryTimes = this.contaminationHistory\n            .flatMap(event => event.recoveryAttempts)\n            .filter(attempt => attempt.success)\n            .map(attempt => attempt.duration);\n        \n        return recoveryTimes.length > 0 \n            ? recoveryTimes.reduce((sum, time) => sum + time, 0) / recoveryTimes.length \n            : 0;\n    }\n    \n    calculateSuccessRate() {\n        const totalAttempts = this.contaminationHistory.length;\n        const successfulRecoveries = this.healthMetrics.recoveryEvents;\n        \n        return totalAttempts > 0 ? (successfulRecoveries / totalAttempts) * 100 : 0;\n    }\n    \n    getMostCommonContaminationType() {\n        const typeCounts = {};\n        this.contaminationHistory.forEach(event => {\n            typeCounts[event.type] = (typeCounts[event.type] || 0) + 1;\n        });\n        \n        return Object.keys(typeCounts).reduce((max, type) => \n            typeCounts[type] > (typeCounts[max] || 0) ? type : max, 'UNKNOWN'\n        );\n    }\n    \n    // Additional utility methods would be implemented here...\n    identifyAffectedFiles(contaminationEvent) {\n        // Implementation for identifying affected files\n        return contaminationEvent.details?.affectedFiles || [];\n    }\n    \n    determineCriticalPathsForRestore(contaminationEvent) {\n        // Implementation for determining which paths to restore\n        return this.criticalPaths.filter(path => \n            contaminationEvent.type === 'COMPREHENSIVE' || \n            contaminationEvent.details?.affectedPaths?.includes(path)\n        );\n    }\n    \n    async createPathBackup(fullPath) {\n        // Implementation for creating path backups\n        return { success: true, backupPath: `${fullPath}.backup`, size: 0, checksum: '', timestamp: new Date().toISOString() };\n    }\n    \n    async restoreFromBackupRegistry(criticalPath, backupInfo) {\n        // Implementation for restoring from backup registry\n        const fullPath = path.resolve(this.projectRoot, criticalPath);\n        if (fs.existsSync(backupInfo.backupPath)) {\n            fs.copyFileSync(backupInfo.backupPath, fullPath);\n        }\n    }\n    \n    async verifyRestoration(restoredFiles) {\n        // Implementation for verifying restoration\n        return { passed: true, verified: restoredFiles.length };\n    }\n    \n    async cleanDirectory(fullPath) {\n        // Implementation for cleaning directories\n        if (fs.existsSync(fullPath)) {\n            fs.rmSync(fullPath, { recursive: true, force: true });\n        }\n    }\n    \n    async reconstructFile(filePath, type) {\n        // Implementation for reconstructing files\n        return { success: true, type, reconstructed: true };\n    }\n    \n    async isFileCorrupted(filePath) {\n        // Implementation for checking file corruption\n        try {\n            const content = fs.readFileSync(filePath, 'utf8');\n            if (filePath.endsWith('.json')) {\n                JSON.parse(content);\n            }\n            return false;\n        } catch {\n            return true;\n        }\n    }\n    \n    async isPathContaminated(fullPath) {\n        // Implementation for checking path contamination\n        try {\n            if (!fs.existsSync(fullPath)) return false;\n            \n            const stat = fs.statSync(fullPath);\n            if (stat.isFile()) {\n                const content = fs.readFileSync(fullPath, 'utf8');\n                return /infinite-continue-stop-hook|TODO\\.json|\"tasks\"\\s*:/.test(content);\n            }\n            return false;\n        } catch {\n            return false;\n        }\n    }\n    \n    async activateEmergencyRecovery(contaminationEvent) {\n        // Implementation for emergency recovery activation\n        this.log('EMERGENCY RECOVERY ACTIVATED', {\n            eventId: contaminationEvent.id,\n            severity: contaminationEvent.severity\n        }, 'error');\n        \n        await this.minimalSystemRebuild(contaminationEvent);\n    }\n    \n    /**\n     * Log messages with timestamp and level\n     */\n    log(message, data = {}, level = 'info') {\n        const _logEntry = {\n            timestamp: new Date().toISOString(),\n            level: level.toUpperCase(),\n            component: 'TestEnvironmentRecovery',\n            message,\n            sessionId: this.recoverySession?.id,\n            ...data\n        };\n        \n        // Console output\n        const levelEmoji = {\n            info: 'ℹ️',\n            warn: '⚠️',\n            error: '❌'\n        };\n        \n        if (process.env.NODE_ENV !== 'test') {\n            console.log(`${levelEmoji[level] || 'ℹ️'} [Recovery] ${message}`, \n                       Object.keys(data).length > 0 ? data : '');\n        }\n    }\n}\n\nmodule.exports = TestEnvironmentRecovery;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}