{"version":3,"names":["cov_21xyfeqr7p","actualCoverage","ContaminationResolver","s","require","getGlobalMonitor","ErrorRecovery","fs","path","BuildRecoveryManager","constructor","options","b","f","projectRoot","process","cwd","maxRetries","retryDelay","contaminationResolver","nodeModulesMonitor","enableBackup","enableRestore","enableDetailed","errorRecovery","recoveryAttempts","lastRecoveryTime","recoveryHistory","executeBuildWithRecovery","buildCommand","startTime","Date","now","log","setupResult","setupBuildEnvironment","success","Error","error","lastError","attempt","buildResult","executeBuildCommand","validationResult","validateBuildOutput","executionTime","message","recoveryResult","performBuildRecovery","delay","attempts","storeOriginalContents","createBackups","startMonitoring","contamination","detectContamination","length","cleanupResult","restoreContaminatedFiles","restored","spawn","Promise","resolve","command","args","split","buildProcess","stdio","env","NODE_ENV","stdout","stderr","on","data","toString","code","exitCode","recoveryStart","timestamp","toISOString","steps","issues","contaminationStep","recoverFromContamination","push","filesStep","recoverCriticalFiles","nodeModulesStep","recoverNodeModulesState","cleanupStep","performCleanup","allStepsSuccessful","every","step","name","details","contaminationFound","recovery","filesRestored","restoredFiles","files","remainingContamination","criticalFiles","fileStatus","file","fullPath","join","exists","existsSync","nodeModulesPath","nodeModulesExists","criticalPackages","packageStatus","pkg","pkgPath","pkgExists","package","p","cleanupTargets","cleanedItems","target","targetPath","rmSync","recursive","force","cleanupErrors","ms","setTimeout","console","module","exports"],"sources":["buildRecoveryManager.js"],"sourcesContent":["/**\n * Build Recovery Manager\n * \n * Provides advanced recovery capabilities for build failures,\n * integrating with the existing error recovery and contamination\n * resolution systems to ensure robust build processes.\n */\n\nconst ContaminationResolver = require('./contaminationResolver');\nconst { getGlobalMonitor } = require('./nodeModulesMonitor');\nconst ErrorRecovery = require('./errorRecovery');\nconst fs = require('fs');\nconst path = require('path');\n\nclass BuildRecoveryManager {\n    constructor(options = {}) {\n        this.projectRoot = options.projectRoot || process.cwd();\n        this.maxRetries = options.maxRetries || 3;\n        this.retryDelay = options.retryDelay || 2000;\n        \n        // Initialize recovery components\n        this.contaminationResolver = new ContaminationResolver(this.projectRoot);\n        this.nodeModulesMonitor = getGlobalMonitor({\n            enableBackup: true,\n            enableRestore: true,\n            enableDetailed: true\n        });\n        this.errorRecovery = new ErrorRecovery();\n        \n        // Recovery state\n        this.recoveryAttempts = 0;\n        this.lastRecoveryTime = null;\n        this.recoveryHistory = [];\n    }\n    \n    /**\n     * Execute build with automatic recovery on failure\n     */\n    async executeBuildWithRecovery(buildCommand) {\n        const startTime = Date.now();\n        this.log('Starting build with recovery protection...');\n        \n        try {\n            // Pre-build validation and setup\n            const setupResult = await this.setupBuildEnvironment();\n            if (!setupResult.success) {\n                throw new Error(`Build setup failed: ${setupResult.error}`);\n            }\n            \n            // Execute build with retry logic\n            let lastError = null;\n            \n            for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n                this.recoveryAttempts = attempt;\n                this.log(`Build attempt ${attempt}/${this.maxRetries}`);\n                \n                try {\n                    // Run the actual build command\n                    const buildResult = await this.executeBuildCommand(buildCommand);\n                    \n                    if (buildResult.success) {\n                        this.log(`Build succeeded on attempt ${attempt}`);\n                        \n                        // Post-build validation\n                        const validationResult = await this.validateBuildOutput();\n                        \n                        if (validationResult.success) {\n                            const executionTime = Date.now() - startTime;\n                            return {\n                                success: true,\n                                attempt,\n                                executionTime,\n                                validationResult,\n                                message: `Build completed successfully after ${attempt} attempt(s)`\n                            };\n                        } else {\n                            this.log('Build output validation failed');\n                            lastError = new Error('Build output validation failed');\n                        }\n                    } else {\n                        lastError = new Error(buildResult.error || 'Build command failed');\n                    }\n                    \n                } catch (error) {\n                    lastError = error;\n                    this.log(`Build attempt ${attempt} failed: ${error.message}`);\n                }\n                \n                // If this isn't the last attempt, try recovery\n                if (attempt < this.maxRetries) {\n                    this.log(`Attempting recovery before retry ${attempt + 1}...`);\n                    \n                    const recoveryResult = await this.performBuildRecovery();\n                    \n                    if (recoveryResult.success) {\n                        this.log('Recovery successful, retrying build...');\n                        await this.delay(this.retryDelay);\n                    } else {\n                        this.log('Recovery failed, will still retry...');\n                        await this.delay(this.retryDelay * 2);\n                    }\n                }\n            }\n            \n            // All attempts failed\n            const executionTime = Date.now() - startTime;\n            return {\n                success: false,\n                attempts: this.maxRetries,\n                executionTime,\n                lastError: lastError.message,\n                recoveryHistory: this.recoveryHistory,\n                message: `Build failed after ${this.maxRetries} attempts with recovery`\n            };\n            \n        } catch (error) {\n            this.log(`Build execution failed: ${error.message}`);\n            return {\n                success: false,\n                error: error.message,\n                executionTime: Date.now() - startTime\n            };\n        }\n    }\n    \n    /**\n     * Setup build environment with validation and backup\n     */\n    async setupBuildEnvironment() {\n        try {\n            this.log('Setting up build environment...');\n            \n            // Create backup of critical files\n            await this.contaminationResolver.storeOriginalContents();\n            await this.contaminationResolver.createBackups();\n            \n            // Initialize monitoring\n            if (this.nodeModulesMonitor && typeof this.nodeModulesMonitor.startMonitoring === 'function') {\n                await this.nodeModulesMonitor.startMonitoring();\n            }\n            \n            // Pre-build contamination check\n            const contamination = await this.contaminationResolver.detectContamination();\n            if (contamination.length > 0) {\n                this.log('Pre-build contamination detected, cleaning up...');\n                const cleanupResult = await this.contaminationResolver.restoreContaminatedFiles();\n                \n                if (cleanupResult.restored > 0) {\n                    this.log(`Cleaned up ${cleanupResult.restored} contaminated files`);\n                } else {\n                    throw new Error('Unable to clean up contamination before build');\n                }\n            }\n            \n            this.log('Build environment setup complete');\n            return { success: true };\n            \n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    }\n    \n    /**\n     * Execute the actual build command\n     */\n    async executeBuildCommand(buildCommand) {\n        const { spawn } = require('child_process');\n        \n        return new Promise((resolve) => {\n            try {\n                // Parse the build command\n                const [command, ...args] = buildCommand.split(' ');\n                \n                const buildProcess = spawn(command, args, {\n                    cwd: this.projectRoot,\n                    stdio: 'pipe',\n                    env: { ...process.env, NODE_ENV: 'production' }\n                });\n                \n                let stdout = '';\n                let stderr = '';\n                \n                buildProcess.stdout.on('data', (data) => {\n                    stdout += data.toString();\n                });\n                \n                buildProcess.stderr.on('data', (data) => {\n                    stderr += data.toString();\n                });\n                \n                buildProcess.on('close', (code) => {\n                    if (code === 0) {\n                        resolve({\n                            success: true,\n                            stdout,\n                            stderr,\n                            exitCode: code\n                        });\n                    } else {\n                        resolve({\n                            success: false,\n                            stdout,\n                            stderr,\n                            exitCode: code,\n                            error: `Build process exited with code ${code}`\n                        });\n                    }\n                });\n                \n                buildProcess.on('error', (error) => {\n                    resolve({\n                        success: false,\n                        error: error.message\n                    });\n                });\n                \n            } catch (error) {\n                resolve({\n                    success: false,\n                    error: error.message\n                });\n            }\n        });\n    }\n    \n    /**\n     * Perform comprehensive build recovery\n     */\n    async performBuildRecovery() {\n        const recoveryStart = Date.now();\n        this.lastRecoveryTime = recoveryStart;\n        \n        const recoveryResult = {\n            timestamp: new Date().toISOString(),\n            attempt: this.recoveryAttempts,\n            success: false,\n            steps: [],\n            issues: []\n        };\n        \n        try {\n            this.log('Performing build recovery...');\n            \n            // Step 1: Check and fix contamination\n            const contaminationStep = await this.recoverFromContamination();\n            recoveryResult.steps.push(contaminationStep);\n            \n            // Step 2: Validate critical files\n            const filesStep = await this.recoverCriticalFiles();\n            recoveryResult.steps.push(filesStep);\n            \n            // Step 3: Reset node_modules state if needed\n            const nodeModulesStep = await this.recoverNodeModulesState();\n            recoveryResult.steps.push(nodeModulesStep);\n            \n            // Step 4: Clear temporary files and caches\n            const cleanupStep = await this.performCleanup();\n            recoveryResult.steps.push(cleanupStep);\n            \n            // Determine overall success\n            const allStepsSuccessful = recoveryResult.steps.every(step => step.success);\n            recoveryResult.success = allStepsSuccessful;\n            \n            if (allStepsSuccessful) {\n                this.log('Build recovery completed successfully');\n            } else {\n                this.log('Build recovery completed with some failures');\n            }\n            \n        } catch (error) {\n            recoveryResult.success = false;\n            recoveryResult.error = error.message;\n            this.log(`Recovery failed: ${error.message}`);\n        }\n        \n        recoveryResult.executionTime = Date.now() - recoveryStart;\n        this.recoveryHistory.push(recoveryResult);\n        \n        return recoveryResult;\n    }\n    \n    /**\n     * Recover from contamination issues\n     */\n    async recoverFromContamination() {\n        const step = {\n            name: 'Contamination Recovery',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            const contamination = await this.contaminationResolver.detectContamination();\n            step.details.contaminationFound = contamination.length;\n            \n            if (contamination.length > 0) {\n                const recovery = await this.contaminationResolver.restoreContaminatedFiles();\n                step.details.filesRestored = recovery.restored;\n                step.details.restoredFiles = recovery.files;\n                \n                // Verify recovery\n                const remainingContamination = await this.contaminationResolver.detectContamination();\n                step.success = remainingContamination.length === 0;\n                step.details.remainingContamination = remainingContamination.length;\n            } else {\n                step.success = true;\n                step.details.message = 'No contamination found';\n            }\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Recover critical files\n     */\n    async recoverCriticalFiles() {\n        const step = {\n            name: 'Critical Files Recovery',\n            success: true,\n            details: {}\n        };\n        \n        try {\n            const criticalFiles = [\n                'package.json',\n                'stop-hook.js',\n                'lib/taskManager.js'\n            ];\n            \n            const fileStatus = [];\n            \n            for (const file of criticalFiles) {\n                const fullPath = path.join(this.projectRoot, file);\n                const exists = fs.existsSync(fullPath);\n                fileStatus.push({ file, exists });\n                \n                if (!exists) {\n                    step.success = false;\n                }\n            }\n            \n            step.details.fileStatus = fileStatus;\n            \n        } catch (error) {\n            step.success = false;\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Recover node_modules state\n     */\n    async recoverNodeModulesState() {\n        const step = {\n            name: 'Node Modules State Recovery',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            // Check if node_modules exists\n            const nodeModulesPath = path.join(this.projectRoot, 'node_modules');\n            const exists = fs.existsSync(nodeModulesPath);\n            \n            step.details.nodeModulesExists = exists;\n            \n            if (exists) {\n                // Validate critical packages\n                const criticalPackages = ['jest', 'eslint', 'exit'];\n                const packageStatus = [];\n                \n                for (const pkg of criticalPackages) {\n                    const pkgPath = path.join(nodeModulesPath, pkg);\n                    const pkgExists = fs.existsSync(pkgPath);\n                    packageStatus.push({ package: pkg, exists: pkgExists });\n                }\n                \n                step.details.packageStatus = packageStatus;\n                step.success = packageStatus.every(p => p.exists);\n            } else {\n                step.details.message = 'node_modules missing - requires npm install';\n                step.success = false;\n            }\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Perform cleanup of temporary files and caches\n     */\n    async performCleanup() {\n        const step = {\n            name: 'Cleanup',\n            success: true,\n            details: {}\n        };\n        \n        try {\n            const cleanupTargets = [\n                '.jest-cache',\n                'coverage',\n                '.nyc_output'\n            ];\n            \n            const cleanedItems = [];\n            \n            for (const target of cleanupTargets) {\n                const targetPath = path.join(this.projectRoot, target);\n                if (fs.existsSync(targetPath)) {\n                    try {\n                        fs.rmSync(targetPath, { recursive: true, force: true });\n                        cleanedItems.push(target);\n                    } catch (error) {\n                        // Non-critical - continue with other cleanup\n                        step.details.cleanupErrors = step.details.cleanupErrors || [];\n                        step.details.cleanupErrors.push({ target, error: error.message });\n                    }\n                }\n            }\n            \n            step.details.cleanedItems = cleanedItems;\n            \n        } catch (error) {\n            step.error = error.message;\n            step.success = false;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Validate build output\n     */\n    async validateBuildOutput() {\n        try {\n            // Final contamination check\n            const contamination = await this.contaminationResolver.detectContamination();\n            \n            return {\n                success: contamination.length === 0,\n                contamination: contamination.length,\n                message: contamination.length === 0 ? 'Build output is clean' : `${contamination.length} contaminated files found`\n            };\n            \n        } catch (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Delay helper for retry logic\n     */\n    async delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    \n    /**\n     * Logging helper\n     */\n    log(message) {\n        console.log(`🔧 [BuildRecovery] ${message}`);\n    }\n}\n\nmodule.exports = BuildRecoveryManager;"],"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","ignoreList":[]}