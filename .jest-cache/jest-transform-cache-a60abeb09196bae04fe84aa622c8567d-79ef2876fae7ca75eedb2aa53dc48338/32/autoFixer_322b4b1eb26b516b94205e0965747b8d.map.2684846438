{"version":3,"names":["cov_ovjrxkkf9","actualCoverage","fs","s","require","path","TodoValidator","ErrorRecovery","Logger","AutoFixer","constructor","options","b","f","validator","recovery","logger","process","cwd","autoFixLevel","createBackups","validateAfterFix","maxFixAttempts","logLevel","fixSession","sessionId","startTime","totalErrors","fixedErrors","failedFixes","operations","autoFix","filePath","_fixOptions","_initializeFixSession","addFlow","preCheck","_performPreFixChecks","canProceed","_generateFailureResult","reason","details","backupResult","createBackup","_logOperation","lockResult","acquireLock","success","fileContent","_safeReadFile","_handleCorruptedFile","error","fixResult","_performFixCycle","data","hasChanges","writeResult","atomicWrite","JSON","stringify","Error","postValidation","_performPostFixValidation","_generateSuccessResult","releaseLock","lockId","logError","message","_finalizeFixSession","dryRun","fixes","validationResult","validateAndSanitize","wouldFix","length","proposedFixes","errors","summary","originalValid","isValid","fixSpecificErrors","errorTypes","originalAutoFixLevel","selectiveErrorTypes","recoverCorruptedFile","recoveryResult","recoveredData","strategy","additionalFixes","finalData","strategies","getFileStatus","existsSync","exists","canAutoFix","suggestedAction","readable","backups","listAvailableBackups","valid","autoFixableErrors","filter","e","autoFixable","manualFixRequired","mostRecentBackup","_getSuggestedAction","Date","now","Math","random","toString","substr","duration","checks","fileExists","directoryWritable","_checkDirectoryWritable","dirname","fileWritable","_checkFileWritable","sufficientSpace","_checkDiskSpace","failed","Object","entries","find","_check","passed","content","readFileSync","parseResult","validateJsonSyntax","repaired","code","currentData","totalFixes","attempts","applicableFixes","_filterFixesByLevel","push","attempt","errorsFound","fixesApplied","finalValidation","parse","remainingErrors","fix","includes","type","automated","result","timestamp","errorsFixed","backupCreated","backupPath","criticalErrors","severity","dirPath","testFile","join","writeFileSync","unlinkSync","accessSync","constants","W_OK","stats","statSync","size","module","exports"],"sources":["autoFixer.js"],"sourcesContent":["/**\n * Auto-Fix Engine\n * \n * Orchestrates comprehensive TODO.json error detection and automatic repair\n * using the TodoValidator and ErrorRecovery components.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst TodoValidator = require('./todoValidator');\nconst ErrorRecovery = require('./errorRecovery');\nconst Logger = require('./logger');\n\nclass AutoFixer {\n    constructor(options = {}) {\n        this.validator = new TodoValidator();\n        this.recovery = new ErrorRecovery(options.recovery || {});\n        this.logger = options.logger || new Logger(process.cwd());\n        \n        this.options = {\n            autoFixLevel: options.autoFixLevel || 'moderate', // 'conservative', 'moderate', 'aggressive'\n            createBackups: options.createBackups !== false,\n            validateAfterFix: options.validateAfterFix !== false,\n            maxFixAttempts: options.maxFixAttempts || 3,\n            logLevel: options.logLevel || 'info'\n        };\n        \n        this.fixSession = {\n            sessionId: null,\n            startTime: null,\n            totalErrors: 0,\n            fixedErrors: 0,\n            failedFixes: 0,\n            operations: []\n        };\n    }\n\n    /**\n     * Performs comprehensive auto-fix on a TODO.json file\n     * @param {string} filePath - Path to the TODO.json file\n     * @param {Object} fixOptions - Options for this specific fix operation\n     * @returns {Object} Comprehensive fix result\n     */\n    async autoFix(filePath, _fixOptions = {}) {\n        this._initializeFixSession();\n        \n        try {\n            this.logger.addFlow(`Starting auto-fix for ${filePath}`);\n            \n            // Step 1: Pre-fix validation and safety checks\n            const preCheck = await this._performPreFixChecks(filePath);\n            if (!preCheck.canProceed) {\n                return this._generateFailureResult(preCheck.reason, preCheck.details);\n            }\n\n            // Step 2: Create backup if enabled\n            let backupResult = null;\n            if (this.options.createBackups) {\n                backupResult = await this.recovery.createBackup(filePath);\n                this._logOperation('backup_creation', backupResult);\n            }\n\n            // Step 3: Acquire file lock\n            const lockResult = await this.recovery.acquireLock(filePath);\n            if (!lockResult.success) {\n                return this._generateFailureResult('file_lock_failed', lockResult);\n            }\n\n            try {\n                // Step 4: Read and parse file with error handling\n                const fileContent = await this._safeReadFile(filePath);\n                if (!fileContent.success) {\n                    return await this._handleCorruptedFile(filePath, fileContent.error);\n                }\n\n                // Step 5: Validate and fix content\n                const fixResult = await this._performFixCycle(fileContent.data, filePath);\n                \n                // Step 6: Write fixed content back to file\n                if (fixResult.hasChanges) {\n                    const writeResult = await this.recovery.atomicWrite(\n                        filePath,\n                        JSON.stringify(fixResult.data, null, 2),\n                        false // Don't create backup again\n                    );\n                    \n                    if (!writeResult.success) {\n                        throw new Error(`Failed to write fixed file: ${writeResult.error}`);\n                    }\n                    \n                    this._logOperation('file_write', writeResult);\n                }\n\n                // Step 7: Post-fix validation\n                if (this.options.validateAfterFix) {\n                    const postValidation = await this._performPostFixValidation(filePath);\n                    this._logOperation('post_validation', postValidation);\n                }\n\n                return this._generateSuccessResult(fixResult, backupResult);\n\n            } finally {\n                // Always release the lock\n                await this.recovery.releaseLock(filePath, lockResult.lockId);\n            }\n\n        } catch (error) {\n            this.logger.logError(error, 'auto-fixer');\n            return this._generateFailureResult('unexpected_error', { error: error.message });\n        } finally {\n            this._finalizeFixSession();\n        }\n    }\n\n    /**\n     * Performs a dry run to show what would be fixed without making changes\n     * @param {string} filePath - Path to the TODO.json file\n     * @returns {Object} Dry run result showing proposed fixes\n     */\n    async dryRun(filePath) {\n        try {\n            const fileContent = await this._safeReadFile(filePath);\n            if (!fileContent.success) {\n                return {\n                    success: false,\n                    error: fileContent.error,\n                    fixes: []\n                };\n            }\n\n            const validationResult = this.validator.validateAndSanitize(fileContent.data, filePath);\n            \n            return {\n                success: true,\n                wouldFix: validationResult.fixes.length > 0,\n                proposedFixes: validationResult.fixes,\n                errors: validationResult.errors,\n                summary: validationResult.summary,\n                originalValid: validationResult.isValid\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                fixes: []\n            };\n        }\n    }\n\n    /**\n     * Fixes specific types of errors only\n     * @param {string} filePath - Path to the TODO.json file\n     * @param {Array} errorTypes - Array of error types to fix\n     * @returns {Object} Selective fix result\n     */\n    async fixSpecificErrors(filePath, errorTypes) {\n        const originalAutoFixLevel = this.options.autoFixLevel;\n        this.options.autoFixLevel = 'selective';\n        this.selectiveErrorTypes = errorTypes;\n\n        try {\n            return await this.autoFix(filePath);\n        } finally {\n            this.options.autoFixLevel = originalAutoFixLevel;\n            delete this.selectiveErrorTypes;\n        }\n    }\n\n    /**\n     * Recovers a completely corrupted TODO.json file\n     * @param {string} filePath - Path to the corrupted file\n     * @returns {Object} Recovery result\n     */\n    async recoverCorruptedFile(filePath) {\n        this._initializeFixSession();\n        \n        try {\n            this.logger.addFlow(`Attempting recovery of corrupted file: ${filePath}`);\n            \n            const recoveryResult = await this.recovery.recoverCorruptedFile(filePath);\n            this._logOperation('corruption_recovery', recoveryResult);\n            \n            if (recoveryResult.success) {\n                // Validate the recovered file\n                const validationResult = this.validator.validateAndSanitize(recoveryResult.recoveredData, filePath);\n                \n                if (!validationResult.isValid) {\n                    // Apply fixes to the recovered data\n                    await this.recovery.atomicWrite(\n                        filePath,\n                        JSON.stringify(validationResult.data, null, 2)\n                    );\n                }\n                \n                return {\n                    success: true,\n                    strategy: recoveryResult.strategy,\n                    message: recoveryResult.message,\n                    additionalFixes: validationResult.fixes.length,\n                    finalData: validationResult.data\n                };\n            }\n\n            return {\n                success: false,\n                error: recoveryResult.error,\n                strategies: recoveryResult.strategies\n            };\n\n        } catch (error) {\n            this.logger.logError(error, 'corruption-recovery');\n            return {\n                success: false,\n                error: error.message\n            };\n        } finally {\n            this._finalizeFixSession();\n        }\n    }\n\n    /**\n     * Gets detailed status of a TODO.json file\n     * @param {string} filePath - Path to the TODO.json file\n     * @returns {Object} Detailed file status\n     */\n    async getFileStatus(filePath) {\n        try {\n            if (!fs.existsSync(filePath)) {\n                return {\n                    exists: false,\n                    error: 'File does not exist',\n                    canAutoFix: false,\n                    suggestedAction: 'Create new TODO.json file'\n                };\n            }\n\n            const fileContent = await this._safeReadFile(filePath);\n            if (!fileContent.success) {\n                return {\n                    exists: true,\n                    readable: false,\n                    error: fileContent.error,\n                    canAutoFix: true,\n                    suggestedAction: 'Attempt file recovery'\n                };\n            }\n\n            const validationResult = this.validator.validateAndSanitize(fileContent.data, filePath);\n            const backups = this.recovery.listAvailableBackups(filePath);\n            \n            return {\n                exists: true,\n                readable: true,\n                valid: validationResult.isValid,\n                errors: validationResult.errors,\n                autoFixableErrors: validationResult.errors.filter(e => e.autoFixable),\n                manualFixRequired: validationResult.errors.filter(e => !e.autoFixable),\n                summary: validationResult.summary,\n                backups: backups.length,\n                mostRecentBackup: backups[0] || null,\n                canAutoFix: validationResult.fixes.length > 0,\n                suggestedAction: this._getSuggestedAction(validationResult)\n            };\n\n        } catch (error) {\n            return {\n                exists: fs.existsSync(filePath),\n                error: error.message,\n                canAutoFix: false,\n                suggestedAction: 'Manual intervention required'\n            };\n        }\n    }\n\n    /**\n     * Initializes a new fix session\n     */\n    _initializeFixSession() {\n        this.fixSession = {\n            sessionId: `fix-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            startTime: Date.now(),\n            totalErrors: 0,\n            fixedErrors: 0,\n            failedFixes: 0,\n            operations: []\n        };\n        \n        this.logger.addFlow(`Starting fix session: ${this.fixSession.sessionId}`);\n    }\n\n    /**\n     * Finalizes the current fix session\n     */\n    _finalizeFixSession() {\n        const duration = Date.now() - this.fixSession.startTime;\n        this.logger.addFlow(`Fix session completed in ${duration}ms`);\n        this.logger.addFlow(`Session stats: ${this.fixSession.fixedErrors}/${this.fixSession.totalErrors} errors fixed`);\n    }\n\n    /**\n     * Performs pre-fix safety checks\n     */\n    async _performPreFixChecks(filePath) {\n        const checks = {\n            fileExists: fs.existsSync(filePath),\n            directoryWritable: await this._checkDirectoryWritable(path.dirname(filePath)),\n            fileWritable: fs.existsSync(filePath) ? await this._checkFileWritable(filePath) : true,\n            sufficientSpace: await this._checkDiskSpace(filePath)\n        };\n\n        const failed = Object.entries(checks).find(([_check, passed]) => !passed);\n        \n        if (failed) {\n            return {\n                canProceed: false,\n                reason: `Pre-fix check failed: ${failed[0]}`,\n                details: checks\n            };\n        }\n\n        return { canProceed: true, checks };\n    }\n\n    /**\n     * Safely reads and parses a TODO.json file\n     */\n    async _safeReadFile(filePath) {\n        try {\n            const content = fs.readFileSync(filePath, 'utf8');\n            const parseResult = this.validator.validateJsonSyntax(content);\n            \n            if (!parseResult.isValid) {\n                return {\n                    success: false,\n                    error: 'JSON syntax error',\n                    details: parseResult\n                };\n            }\n\n            return {\n                success: true,\n                data: parseResult.data,\n                repaired: parseResult.repaired\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                code: error.code\n            };\n        }\n    }\n\n    /**\n     * Performs the main fix cycle with multiple attempts\n     */\n    async _performFixCycle(data, filePath) {\n        let currentData = data;\n        let totalFixes = [];\n        let attempts = 0;\n        \n        while (attempts < this.options.maxFixAttempts) {\n            attempts++;\n            \n            const validationResult = this.validator.validateAndSanitize(currentData, filePath);\n            this.fixSession.totalErrors += validationResult.errors.length;\n            \n            if (validationResult.isValid || validationResult.fixes.length === 0) {\n                break;\n            }\n\n            // Apply fixes based on auto-fix level\n            const applicableFixes = this._filterFixesByLevel(validationResult.fixes);\n            totalFixes.push(...applicableFixes);\n            this.fixSession.fixedErrors += applicableFixes.length;\n            \n            currentData = validationResult.data;\n            \n            this._logOperation('validation_cycle', {\n                attempt: attempts,\n                errorsFound: validationResult.errors.length,\n                fixesApplied: applicableFixes.length\n            });\n        }\n\n        return {\n            data: currentData,\n            hasChanges: totalFixes.length > 0,\n            fixes: totalFixes,\n            attempts,\n            finalValidation: this.validator.validateAndSanitize(currentData, filePath)\n        };\n    }\n\n    /**\n     * Handles corrupted file recovery\n     */\n    async _handleCorruptedFile(filePath, error) {\n        this._logOperation('corruption_detected', { error });\n        \n        const recoveryResult = await this.recoverCorruptedFile(filePath);\n        \n        if (recoveryResult.success) {\n            return this._generateSuccessResult({\n                data: recoveryResult.finalData,\n                hasChanges: true,\n                fixes: [`File recovered using strategy: ${recoveryResult.strategy}`],\n                recovery: true\n            });\n        }\n\n        return this._generateFailureResult('recovery_failed', recoveryResult);\n    }\n\n    /**\n     * Performs post-fix validation\n     */\n    async _performPostFixValidation(filePath) {\n        try {\n            const content = fs.readFileSync(filePath, 'utf8');\n            const data = JSON.parse(content);\n            const validationResult = this.validator.validateAndSanitize(data, filePath);\n            \n            return {\n                success: true,\n                valid: validationResult.isValid,\n                remainingErrors: validationResult.errors.length\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Filters fixes based on auto-fix level\n     */\n    _filterFixesByLevel(fixes) {\n        if (this.options.autoFixLevel === 'selective' && this.selectiveErrorTypes) {\n            return fixes.filter(fix => this.selectiveErrorTypes.includes(fix.type));\n        }\n\n        switch (this.options.autoFixLevel) {\n            case 'conservative':\n                return fixes.filter(fix => fix.automated && fix.type.includes('MISSING_FIELD'));\n                \n            case 'moderate':\n                return fixes.filter(fix => fix.automated);\n                \n            case 'aggressive':\n                return fixes; // Apply all fixes\n                \n            default:\n                return fixes.filter(fix => fix.automated);\n        }\n    }\n\n    /**\n     * Logs an operation in the fix session\n     */\n    _logOperation(type, result) {\n        this.fixSession.operations.push({\n            type,\n            timestamp: Date.now(),\n            result,\n            success: result.success !== false\n        });\n        \n        this.logger.addFlow(`Operation ${type}: ${result.success !== false ? 'SUCCESS' : 'FAILED'}`);\n    }\n\n    /**\n     * Generates a success result object\n     */\n    _generateSuccessResult(fixResult, backupResult = null) {\n        return {\n            success: true,\n            sessionId: this.fixSession.sessionId,\n            hasChanges: fixResult.hasChanges,\n            fixesApplied: fixResult.fixes || [],\n            errorsFixed: this.fixSession.fixedErrors,\n            totalErrors: this.fixSession.totalErrors,\n            backupCreated: backupResult ? backupResult.success : false,\n            backupPath: backupResult ? backupResult.backupPath : null,\n            operations: this.fixSession.operations,\n            duration: Date.now() - this.fixSession.startTime\n        };\n    }\n\n    /**\n     * Generates a failure result object\n     */\n    _generateFailureResult(reason, details) {\n        return {\n            success: false,\n            sessionId: this.fixSession.sessionId,\n            reason,\n            details,\n            operations: this.fixSession.operations,\n            duration: Date.now() - this.fixSession.startTime\n        };\n    }\n\n    /**\n     * Gets suggested action based on validation result\n     */\n    _getSuggestedAction(validationResult) {\n        if (validationResult.isValid) {\n            return 'File is valid, no action needed';\n        }\n\n        const criticalErrors = validationResult.errors.filter(e => e.severity === 'critical').length;\n        const autoFixableErrors = validationResult.errors.filter(e => e.autoFixable).length;\n\n        if (criticalErrors > 0) {\n            return 'Critical errors detected, consider file recovery';\n        }\n\n        if (autoFixableErrors > 0) {\n            return 'Run auto-fix to resolve issues automatically';\n        }\n\n        return 'Manual intervention required for remaining errors';\n    }\n\n    /**\n     * Utility methods for pre-fix checks\n     */\n    async _checkDirectoryWritable(dirPath) {\n        try {\n            const testFile = path.join(dirPath, '.write-test');\n            fs.writeFileSync(testFile, 'test');\n            fs.unlinkSync(testFile);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    async _checkFileWritable(filePath) {\n        try {\n            fs.accessSync(filePath, fs.constants.W_OK);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    async _checkDiskSpace(filePath) {\n        // Basic implementation - in production, you might want to check actual disk space\n        try {\n            const stats = fs.statSync(filePath);\n            return stats.size < 100 * 1024 * 1024; // Assume we need 100MB for operations\n        } catch {\n            return true; // If we can't check, assume it's fine\n        }\n    }\n}\n\nmodule.exports = AutoFixer;"],"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","ignoreList":[]}