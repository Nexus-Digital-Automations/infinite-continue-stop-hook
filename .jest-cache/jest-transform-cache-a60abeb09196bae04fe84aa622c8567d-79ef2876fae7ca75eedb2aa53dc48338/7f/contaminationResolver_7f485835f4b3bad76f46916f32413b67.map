{"version":3,"names":["cov_1kgkf05xw3","actualCoverage","fs","s","require","path","ContaminationResolver","constructor","projectRoot","b","process","cwd","f","criticalFiles","originalContents","Map","storeOriginalContents","file","fullPath","join","existsSync","content","readFileSync","isValidJavaScript","set","console","log","error","warn","message","jsonPatterns","pattern","test","includes","detectContamination","contaminated","push","substring","restoreContaminatedFiles","length","restored","files","item","originalContent","get","writeFileSync","restoreFromKnownGood","knownGoodContent","backupPath","startContinuousCleanup","intervalMs","cleanupInterval","setInterval","result","on","clearInterval","catch","then","exit","createBackups","module","exports"],"sources":["contaminationResolver.js"],"sourcesContent":["/**\n * Contamination Resolver\n * \n * This module provides immediate cleanup and restoration for JSON contamination\n * in critical node_modules files that occurs during test execution.\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass ContaminationResolver {\n    constructor(projectRoot = process.cwd()) {\n        this.projectRoot = projectRoot;\n        this.criticalFiles = [\n            'node_modules/exit/lib/exit.js',\n            'node_modules/jest-worker/build/index.js',\n            'node_modules/istanbul-lib-report/index.js',\n            'node_modules/@jest/reporters/build/CoverageReporter.js',\n            'node_modules/jest-cli/build/run.js'\n        ];\n        \n        // Store original file contents\n        this.originalContents = new Map();\n    }\n    \n    /**\n     * Store original contents of critical files\n     */\n    async storeOriginalContents() {\n        for (const file of this.criticalFiles) {\n            const fullPath = path.join(this.projectRoot, file);\n            if (fs.existsSync(fullPath)) {\n                try {\n                    const content = fs.readFileSync(fullPath, 'utf8');\n                    // Only store if it's valid JavaScript (not contaminated)\n                    if (this.isValidJavaScript(content)) {\n                        this.originalContents.set(fullPath, content);\n                        console.log(`✅ Stored original content for ${file}`);\n                    }\n                } catch (error) {\n                    console.warn(`⚠️ Could not store original content for ${file}: ${error.message}`);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Check if content is valid JavaScript (not JSON contaminated)\n     */\n    isValidJavaScript(content) {\n        // Check for JSON contamination patterns\n        const jsonPatterns = [\n            /^\\s*\\{.*\"project\".*\\}/s,\n            /^\\s*\\{.*\"tasks\".*\\}/s,\n            /^\\s*\\{.*\"execution_count\".*\\}/s\n        ];\n        \n        // If any JSON pattern matches at the start, it's contaminated\n        for (const pattern of jsonPatterns) {\n            if (pattern.test(content)) {\n                return false;\n            }\n        }\n        \n        // Check for proper JavaScript structure\n        return content.includes('module.exports') || \n               content.includes('exports.') || \n               content.includes('function') ||\n               content.includes('class ');\n    }\n    \n    /**\n     * Detect contamination in critical files\n     */\n    async detectContamination() {\n        const contaminated = [];\n        \n        for (const file of this.criticalFiles) {\n            const fullPath = path.join(this.projectRoot, file);\n            if (fs.existsSync(fullPath)) {\n                try {\n                    const content = fs.readFileSync(fullPath, 'utf8');\n                    if (!this.isValidJavaScript(content)) {\n                        contaminated.push({\n                            file,\n                            fullPath,\n                            content: content.substring(0, 200) // First 200 chars for logging\n                        });\n                    }\n                } catch (error) {\n                    console.warn(`⚠️ Could not read ${file}: ${error.message}`);\n                }\n            }\n        }\n        \n        return contaminated;\n    }\n    \n    /**\n     * Restore contaminated files immediately\n     */\n    async restoreContaminatedFiles() {\n        const contaminated = await this.detectContamination();\n        \n        if (contaminated.length === 0) {\n            console.log('✅ No contamination detected');\n            return { restored: 0, files: [] };\n        }\n        \n        const restored = [];\n        \n        for (const item of contaminated) {\n            const originalContent = this.originalContents.get(item.fullPath);\n            if (originalContent) {\n                try {\n                    fs.writeFileSync(item.fullPath, originalContent, 'utf8');\n                    console.log(`✅ Restored ${item.file}`);\n                    restored.push(item.file);\n                } catch (error) {\n                    console.error(`❌ Failed to restore ${item.file}: ${error.message}`);\n                }\n            } else {\n                // Try to restore from backup or known good content\n                await this.restoreFromKnownGood(item.fullPath, item.file);\n                restored.push(item.file);\n            }\n        }\n        \n        return { restored: restored.length, files: restored };\n    }\n    \n    /**\n     * Restore from known good content for specific files\n     */\n    async restoreFromKnownGood(fullPath, file) {\n        let knownGoodContent = null;\n        \n        if (file.includes('exit.js')) {\n            // Known good exit.js content\n            knownGoodContent = `/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function exit(exitCode, streams) {\n  if (!streams) { streams = [process.stdout, process.stderr]; }\n  var drainCount = 0;\n  // Actually exit if all streams are drained.\n  function tryToExit() {\n    if (drainCount === streams.length) {\n      process.exit(exitCode);\n    }\n  }\n  streams.forEach(function(stream) {\n    // Count drained streams now, but monitor non-drained streams.\n    if (stream.bufferSize === 0) {\n      drainCount++;\n    } else {\n      stream.write('', 'utf-8', function() {\n        drainCount++;\n        tryToExit();\n      });\n    }\n    // Prevent further writing.\n    stream.write = function() {};\n  });\n  // If all streams were already drained, exit now.\n  tryToExit();\n  // In Windows, when run as a Node.js child process, a script utilizing\n  // this library might just exit with a 0 exit code, regardless. This code,\n  // despite the fact that it looks a bit crazy, appears to fix that.\n  process.on('exit', function() {\n    process.exit(exitCode);\n  });\n};\n`;\n        } else if (file.includes('jest-worker')) {\n            // Check if backup exists\n            const backupPath = fullPath + '.backup.original';\n            if (fs.existsSync(backupPath)) {\n                knownGoodContent = fs.readFileSync(backupPath, 'utf8');\n            }\n        }\n        \n        if (knownGoodContent) {\n            try {\n                fs.writeFileSync(fullPath, knownGoodContent, 'utf8');\n                console.log(`✅ Restored ${file} from known good content`);\n            } catch (error) {\n                console.error(`❌ Failed to restore ${file} from known good: ${error.message}`);\n            }\n        }\n    }\n    \n    /**\n     * Continuous monitoring and cleanup (for use during test runs)\n     */\n    async startContinuousCleanup(intervalMs = 1000) {\n        console.log('🔄 Starting continuous contamination cleanup...');\n        \n        const cleanupInterval = setInterval(async () => {\n            const result = await this.restoreContaminatedFiles();\n            if (result.restored > 0) {\n                console.log(`🧹 Cleaned up contamination in ${result.files.join(', ')}`);\n            }\n        }, intervalMs);\n        \n        // Clean up on process exit\n        process.on('exit', () => {\n            clearInterval(cleanupInterval);\n            // Final cleanup before exit\n            this.restoreContaminatedFiles().catch(() => {});\n        });\n        \n        process.on('SIGINT', () => {\n            clearInterval(cleanupInterval);\n            this.restoreContaminatedFiles().then(() => process.exit()).catch(() => process.exit());\n        });\n        \n        return cleanupInterval;\n    }\n    \n    /**\n     * Create backups of clean files\n     */\n    async createBackups() {\n        for (const file of this.criticalFiles) {\n            const fullPath = path.join(this.projectRoot, file);\n            if (fs.existsSync(fullPath)) {\n                const content = fs.readFileSync(fullPath, 'utf8');\n                if (this.isValidJavaScript(content)) {\n                    const backupPath = fullPath + '.backup.original';\n                    fs.writeFileSync(backupPath, content, 'utf8');\n                    console.log(`📦 Created backup for ${file}`);\n                }\n            }\n        }\n    }\n}\n\nmodule.exports = ContaminationResolver;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,EAAE;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,qBAAqB,CAAC;EACxBC,WAAWA,CAACC,WAAW;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAGC,OAAO,CAACC,GAAG,CAAC,CAAC,GAAE;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACrC,IAAI,CAACK,WAAW,GAAGA,WAAW;IAAC;IAAAR,cAAA,GAAAG,CAAA;IAC/B,IAAI,CAACU,aAAa,GAAG,CACjB,+BAA+B,EAC/B,yCAAyC,EACzC,2CAA2C,EAC3C,wDAAwD,EACxD,oCAAoC,CACvC;;IAED;IAAA;IAAAb,cAAA,GAAAG,CAAA;IACA,IAAI,CAACW,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrC;;EAEA;AACJ;AACA;EACI,MAAMC,qBAAqBA,CAAA,EAAG;IAAA;IAAAhB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC1B,KAAK,MAAMc,IAAI,IAAI,IAAI,CAACJ,aAAa,EAAE;MACnC,MAAMK,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAG,CAAA,OAAGE,IAAI,CAACc,IAAI,CAAC,IAAI,CAACX,WAAW,EAAES,IAAI,CAAC;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MACnD,IAAID,EAAE,CAACkB,UAAU,CAACF,QAAQ,CAAC,EAAE;QAAA;QAAAlB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACzB,IAAI;UACA,MAAMkB,OAAO;UAAA;UAAA,CAAArB,cAAA,GAAAG,CAAA,OAAGD,EAAE,CAACoB,YAAY,CAACJ,QAAQ,EAAE,MAAM,CAAC;UACjD;UAAA;UAAAlB,cAAA,GAAAG,CAAA;UACA,IAAI,IAAI,CAACoB,iBAAiB,CAACF,OAAO,CAAC,EAAE;YAAA;YAAArB,cAAA,GAAAS,CAAA;YAAAT,cAAA,GAAAG,CAAA;YACjC,IAAI,CAACW,gBAAgB,CAACU,GAAG,CAACN,QAAQ,EAAEG,OAAO,CAAC;YAAC;YAAArB,cAAA,GAAAG,CAAA;YAC7CsB,OAAO,CAACC,GAAG,CAAC,iCAAiCT,IAAI,EAAE,CAAC;UACxD,CAAC;UAAA;UAAA;YAAAjB,cAAA,GAAAS,CAAA;UAAA;QACL,CAAC,CAAC,OAAOkB,KAAK,EAAE;UAAA;UAAA3B,cAAA,GAAAG,CAAA;UACZsB,OAAO,CAACG,IAAI,CAAC,2CAA2CX,IAAI,KAAKU,KAAK,CAACE,OAAO,EAAE,CAAC;QACrF;MACJ,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAAS,CAAA;MAAA;IACL;EACJ;;EAEA;AACJ;AACA;EACIc,iBAAiBA,CAACF,OAAO,EAAE;IAAA;IAAArB,cAAA,GAAAY,CAAA;IACvB;IACA,MAAMkB,YAAY;IAAA;IAAA,CAAA9B,cAAA,GAAAG,CAAA,QAAG,CACjB,wBAAwB,EACxB,sBAAsB,EACtB,gCAAgC,CACnC;;IAED;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,KAAK,MAAM4B,OAAO,IAAID,YAAY,EAAE;MAAA;MAAA9B,cAAA,GAAAG,CAAA;MAChC,IAAI4B,OAAO,CAACC,IAAI,CAACX,OAAO,CAAC,EAAE;QAAA;QAAArB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACvB,OAAO,KAAK;MAChB,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAS,CAAA;MAAA;IACL;;IAEA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IACA,OAAO,2BAAAH,cAAA,GAAAS,CAAA,UAAAY,OAAO,CAACY,QAAQ,CAAC,gBAAgB,CAAC;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,UAClCY,OAAO,CAACY,QAAQ,CAAC,UAAU,CAAC;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,UAC5BY,OAAO,CAACY,QAAQ,CAAC,UAAU,CAAC;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,UAC5BY,OAAO,CAACY,QAAQ,CAAC,QAAQ,CAAC;EACrC;;EAEA;AACJ;AACA;EACI,MAAMC,mBAAmBA,CAAA,EAAG;IAAA;IAAAlC,cAAA,GAAAY,CAAA;IACxB,MAAMuB,YAAY;IAAA;IAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAExB,KAAK,MAAMc,IAAI,IAAI,IAAI,CAACJ,aAAa,EAAE;MACnC,MAAMK,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAG,CAAA,QAAGE,IAAI,CAACc,IAAI,CAAC,IAAI,CAACX,WAAW,EAAES,IAAI,CAAC;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MACnD,IAAID,EAAE,CAACkB,UAAU,CAACF,QAAQ,CAAC,EAAE;QAAA;QAAAlB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACzB,IAAI;UACA,MAAMkB,OAAO;UAAA;UAAA,CAAArB,cAAA,GAAAG,CAAA,QAAGD,EAAE,CAACoB,YAAY,CAACJ,QAAQ,EAAE,MAAM,CAAC;UAAC;UAAAlB,cAAA,GAAAG,CAAA;UAClD,IAAI,CAAC,IAAI,CAACoB,iBAAiB,CAACF,OAAO,CAAC,EAAE;YAAA;YAAArB,cAAA,GAAAS,CAAA;YAAAT,cAAA,GAAAG,CAAA;YAClCgC,YAAY,CAACC,IAAI,CAAC;cACdnB,IAAI;cACJC,QAAQ;cACRG,OAAO,EAAEA,OAAO,CAACgB,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACvC,CAAC,CAAC;UACN,CAAC;UAAA;UAAA;YAAArC,cAAA,GAAAS,CAAA;UAAA;QACL,CAAC,CAAC,OAAOkB,KAAK,EAAE;UAAA;UAAA3B,cAAA,GAAAG,CAAA;UACZsB,OAAO,CAACG,IAAI,CAAC,qBAAqBX,IAAI,KAAKU,KAAK,CAACE,OAAO,EAAE,CAAC;QAC/D;MACJ,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAAS,CAAA;MAAA;IACL;IAAC;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAOgC,YAAY;EACvB;;EAEA;AACJ;AACA;EACI,MAAMG,wBAAwBA,CAAA,EAAG;IAAA;IAAAtC,cAAA,GAAAY,CAAA;IAC7B,MAAMuB,YAAY;IAAA;IAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC+B,mBAAmB,CAAC,CAAC;IAAC;IAAAlC,cAAA,GAAAG,CAAA;IAEtD,IAAIgC,YAAY,CAACI,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAvC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC3BsB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC3C,OAAO;QAAEqC,QAAQ,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAG,CAAC;IACrC,CAAC;IAAA;IAAA;MAAAzC,cAAA,GAAAS,CAAA;IAAA;IAED,MAAM+B,QAAQ;IAAA;IAAA,CAAAxC,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEpB,KAAK,MAAMuC,IAAI,IAAIP,YAAY,EAAE;MAC7B,MAAMQ,eAAe;MAAA;MAAA,CAAA3C,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACW,gBAAgB,CAAC8B,GAAG,CAACF,IAAI,CAACxB,QAAQ,CAAC;MAAC;MAAAlB,cAAA,GAAAG,CAAA;MACjE,IAAIwC,eAAe,EAAE;QAAA;QAAA3C,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACjB,IAAI;UAAA;UAAAH,cAAA,GAAAG,CAAA;UACAD,EAAE,CAAC2C,aAAa,CAACH,IAAI,CAACxB,QAAQ,EAAEyB,eAAe,EAAE,MAAM,CAAC;UAAC;UAAA3C,cAAA,GAAAG,CAAA;UACzDsB,OAAO,CAACC,GAAG,CAAC,cAAcgB,IAAI,CAACzB,IAAI,EAAE,CAAC;UAAC;UAAAjB,cAAA,GAAAG,CAAA;UACvCqC,QAAQ,CAACJ,IAAI,CAACM,IAAI,CAACzB,IAAI,CAAC;QAC5B,CAAC,CAAC,OAAOU,KAAK,EAAE;UAAA;UAAA3B,cAAA,GAAAG,CAAA;UACZsB,OAAO,CAACE,KAAK,CAAC,uBAAuBe,IAAI,CAACzB,IAAI,KAAKU,KAAK,CAACE,OAAO,EAAE,CAAC;QACvE;MACJ,CAAC,MAAM;QAAA;QAAA7B,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACH;QACA,MAAM,IAAI,CAAC2C,oBAAoB,CAACJ,IAAI,CAACxB,QAAQ,EAAEwB,IAAI,CAACzB,IAAI,CAAC;QAAC;QAAAjB,cAAA,GAAAG,CAAA;QAC1DqC,QAAQ,CAACJ,IAAI,CAACM,IAAI,CAACzB,IAAI,CAAC;MAC5B;IACJ;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAED,OAAO;MAAEqC,QAAQ,EAAEA,QAAQ,CAACD,MAAM;MAAEE,KAAK,EAAED;IAAS,CAAC;EACzD;;EAEA;AACJ;AACA;EACI,MAAMM,oBAAoBA,CAAC5B,QAAQ,EAAED,IAAI,EAAE;IAAA;IAAAjB,cAAA,GAAAY,CAAA;IACvC,IAAImC,gBAAgB;IAAA;IAAA,CAAA/C,cAAA,GAAAG,CAAA,QAAG,IAAI;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAE5B,IAAIc,IAAI,CAACgB,QAAQ,CAAC,SAAS,CAAC,EAAE;MAAA;MAAAjC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC1B;MACA4C,gBAAgB,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACO,CAAC,MAAM;MAAA;MAAA/C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,IAAIc,IAAI,CAACgB,QAAQ,CAAC,aAAa,CAAC,EAAE;QAAA;QAAAjC,cAAA,GAAAS,CAAA;QACrC;QACA,MAAMuC,UAAU;QAAA;QAAA,CAAAhD,cAAA,GAAAG,CAAA,QAAGe,QAAQ,GAAG,kBAAkB;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QACjD,IAAID,EAAE,CAACkB,UAAU,CAAC4B,UAAU,CAAC,EAAE;UAAA;UAAAhD,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAG,CAAA;UAC3B4C,gBAAgB,GAAG7C,EAAE,CAACoB,YAAY,CAAC0B,UAAU,EAAE,MAAM,CAAC;QAC1D,CAAC;QAAA;QAAA;UAAAhD,cAAA,GAAAS,CAAA;QAAA;MACL,CAAC;MAAA;MAAA;QAAAT,cAAA,GAAAS,CAAA;MAAA;IAAD;IAAC;IAAAT,cAAA,GAAAG,CAAA;IAED,IAAI4C,gBAAgB,EAAE;MAAA;MAAA/C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAClB,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACAD,EAAE,CAAC2C,aAAa,CAAC3B,QAAQ,EAAE6B,gBAAgB,EAAE,MAAM,CAAC;QAAC;QAAA/C,cAAA,GAAAG,CAAA;QACrDsB,OAAO,CAACC,GAAG,CAAC,cAAcT,IAAI,0BAA0B,CAAC;MAC7D,CAAC,CAAC,OAAOU,KAAK,EAAE;QAAA;QAAA3B,cAAA,GAAAG,CAAA;QACZsB,OAAO,CAACE,KAAK,CAAC,uBAAuBV,IAAI,qBAAqBU,KAAK,CAACE,OAAO,EAAE,CAAC;MAClF;IACJ,CAAC;IAAA;IAAA;MAAA7B,cAAA,GAAAS,CAAA;IAAA;EACL;;EAEA;AACJ;AACA;EACI,MAAMwC,sBAAsBA,CAACC,UAAU;EAAA;EAAA,CAAAlD,cAAA,GAAAS,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAT,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC5CsB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAE9D,MAAMyB,eAAe;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,QAAGiD,WAAW,CAAC,YAAY;MAAA;MAAApD,cAAA,GAAAY,CAAA;MAC5C,MAAMyC,MAAM;MAAA;MAAA,CAAArD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACmC,wBAAwB,CAAC,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MACrD,IAAIkD,MAAM,CAACb,QAAQ,GAAG,CAAC,EAAE;QAAA;QAAAxC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACrBsB,OAAO,CAACC,GAAG,CAAC,kCAAkC2B,MAAM,CAACZ,KAAK,CAACtB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;MAC5E,CAAC;MAAA;MAAA;QAAAnB,cAAA,GAAAS,CAAA;MAAA;IACL,CAAC,EAAEyC,UAAU,CAAC;;IAEd;IAAA;IAAAlD,cAAA,GAAAG,CAAA;IACAO,OAAO,CAAC4C,EAAE,CAAC,MAAM,EAAE,MAAM;MAAA;MAAAtD,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACrBoD,aAAa,CAACJ,eAAe,CAAC;MAC9B;MAAA;MAAAnD,cAAA,GAAAG,CAAA;MACA,IAAI,CAACmC,wBAAwB,CAAC,CAAC,CAACkB,KAAK,CAAC,MAAM;QAAA;QAAAxD,cAAA,GAAAY,CAAA;MAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAAC;IAAAZ,cAAA,GAAAG,CAAA;IAEHO,OAAO,CAAC4C,EAAE,CAAC,QAAQ,EAAE,MAAM;MAAA;MAAAtD,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACvBoD,aAAa,CAACJ,eAAe,CAAC;MAAC;MAAAnD,cAAA,GAAAG,CAAA;MAC/B,IAAI,CAACmC,wBAAwB,CAAC,CAAC,CAACmB,IAAI,CAAC,MAAM;QAAA;QAAAzD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAAO,OAAO,CAACgD,IAAI,CAAC,CAAC;MAAD,CAAC,CAAC,CAACF,KAAK,CAAC,MAAM;QAAA;QAAAxD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAAO,OAAO,CAACgD,IAAI,CAAC,CAAC;MAAD,CAAC,CAAC;IAC1F,CAAC,CAAC;IAAC;IAAA1D,cAAA,GAAAG,CAAA;IAEH,OAAOgD,eAAe;EAC1B;;EAEA;AACJ;AACA;EACI,MAAMQ,aAAaA,CAAA,EAAG;IAAA;IAAA3D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAClB,KAAK,MAAMc,IAAI,IAAI,IAAI,CAACJ,aAAa,EAAE;MACnC,MAAMK,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAG,CAAA,QAAGE,IAAI,CAACc,IAAI,CAAC,IAAI,CAACX,WAAW,EAAES,IAAI,CAAC;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MACnD,IAAID,EAAE,CAACkB,UAAU,CAACF,QAAQ,CAAC,EAAE;QAAA;QAAAlB,cAAA,GAAAS,CAAA;QACzB,MAAMY,OAAO;QAAA;QAAA,CAAArB,cAAA,GAAAG,CAAA,QAAGD,EAAE,CAACoB,YAAY,CAACJ,QAAQ,EAAE,MAAM,CAAC;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QAClD,IAAI,IAAI,CAACoB,iBAAiB,CAACF,OAAO,CAAC,EAAE;UAAA;UAAArB,cAAA,GAAAS,CAAA;UACjC,MAAMuC,UAAU;UAAA;UAAA,CAAAhD,cAAA,GAAAG,CAAA,QAAGe,QAAQ,GAAG,kBAAkB;UAAC;UAAAlB,cAAA,GAAAG,CAAA;UACjDD,EAAE,CAAC2C,aAAa,CAACG,UAAU,EAAE3B,OAAO,EAAE,MAAM,CAAC;UAAC;UAAArB,cAAA,GAAAG,CAAA;UAC9CsB,OAAO,CAACC,GAAG,CAAC,yBAAyBT,IAAI,EAAE,CAAC;QAChD,CAAC;QAAA;QAAA;UAAAjB,cAAA,GAAAS,CAAA;QAAA;MACL,CAAC;MAAA;MAAA;QAAAT,cAAA,GAAAS,CAAA;MAAA;IACL;EACJ;AACJ;AAAC;AAAAT,cAAA,GAAAG,CAAA;AAEDyD,MAAM,CAACC,OAAO,GAAGvD,qBAAqB","ignoreList":[]}