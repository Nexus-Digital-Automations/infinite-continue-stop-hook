{"version":3,"names":["cov_smnf4alay","actualCoverage","fs","s","require","path","os","Logger","constructor","projectRoot","f","logPath","join","logData","execution","timestamp","Date","toISOString","hookVersion","nodeVersion","process","version","platform","arch","pid","cwd","input","projectState","decisions","flow","output","errors","logInput","hookInput","sessionId","session_id","transcriptPath","transcript_path","stopHookActive","stop_hook_active","rawInput","addFlow","logProjectState","todoData","todoPath","project","totalTasks","tasks","length","pendingTasks","filter","t","status","inProgressTasks","completedTasks","lastMode","last_mode","reviewStrikes","review_strikes","strikesCompletedLastRun","strikes_completed_last_run","availableModes","available_modes","logCurrentTask","task","b","currentTask","id","title","description","mode","priority","isReviewTask","is_review_task","strikeNumber","strike_number","logModeDecision","previousMode","selectedMode","reason","decision","type","push","logStrikeHandling","strikeResult","action","message","currentStrikes","strikesCompleted","logReviewInjection","shouldInject","logPromptGeneration","prompt","additionalInstructions","promptLength","additionalInstructionsLength","totalLength","promptPreview","substring","logExit","code","exitCode","exitReason","logError","error","context","errorEntry","stack","name","save","endTimestamp","start","end","durationMs","writeFileSync","JSON","stringify","debugPath","now","console","module","exports"],"sources":["logger.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst os = require('os');\n\nclass Logger {\n    constructor(projectRoot) {\n        this.projectRoot = projectRoot;\n        this.logPath = path.join(projectRoot, 'infinite-continue-hook.log');\n        this.logData = {\n            execution: {\n                timestamp: new Date().toISOString(),\n                projectRoot: projectRoot,\n                hookVersion: '1.0.0',\n                nodeVersion: process.version,\n                platform: os.platform(),\n                arch: os.arch(),\n                pid: process.pid,\n                cwd: process.cwd()\n            },\n            input: {},\n            projectState: {},\n            decisions: [],\n            flow: [],\n            output: {},\n            errors: []\n        };\n    }\n\n    logInput(hookInput) {\n        this.logData.input = {\n            sessionId: hookInput.session_id,\n            transcriptPath: hookInput.transcript_path,\n            stopHookActive: hookInput.stop_hook_active,\n            rawInput: hookInput\n        };\n        this.addFlow('Received input from Claude Code');\n    }\n\n    logProjectState(todoData, todoPath) {\n        this.logData.projectState = {\n            todoPath: todoPath,\n            project: todoData.project,\n            totalTasks: todoData.tasks.length,\n            pendingTasks: todoData.tasks.filter(t => t.status === 'pending').length,\n            inProgressTasks: todoData.tasks.filter(t => t.status === 'in_progress').length,\n            completedTasks: todoData.tasks.filter(t => t.status === 'completed').length,\n            lastMode: todoData.last_mode,\n            reviewStrikes: todoData.review_strikes,\n            strikesCompletedLastRun: todoData.strikes_completed_last_run,\n            availableModes: todoData.available_modes\n        };\n        this.addFlow('Loaded project state from TODO.json');\n    }\n\n    logCurrentTask(task) {\n        if (task) {\n            this.logData.projectState.currentTask = {\n                id: task.id,\n                title: task.title,\n                description: task.description,\n                mode: task.mode,\n                priority: task.priority,\n                status: task.status,\n                isReviewTask: task.is_review_task,\n                strikeNumber: task.strike_number\n            };\n            this.addFlow(`Selected task: ${task.title} (${task.id})`);\n        } else {\n            this.logData.projectState.currentTask = null;\n            this.addFlow('No tasks available');\n        }\n    }\n\n    logModeDecision(previousMode, selectedMode, reason) {\n        const decision = {\n            type: 'mode_selection',\n            timestamp: new Date().toISOString(),\n            previousMode: previousMode,\n            selectedMode: selectedMode,\n            reason: reason\n        };\n        this.logData.decisions.push(decision);\n        this.addFlow(`Mode decision: ${previousMode || 'none'} â†’ ${selectedMode} (${reason})`);\n    }\n\n    logStrikeHandling(strikeResult, todoData) {\n        const decision = {\n            type: 'strike_handling',\n            timestamp: new Date().toISOString(),\n            action: strikeResult.action,\n            message: strikeResult.message,\n            currentStrikes: todoData.review_strikes,\n            strikesCompleted: todoData.strikes_completed_last_run\n        };\n        this.logData.decisions.push(decision);\n        this.addFlow(`Strike handling: ${strikeResult.action} - ${strikeResult.message || 'continue'}`);\n    }\n\n    logReviewInjection(shouldInject, strikeNumber) {\n        const decision = {\n            type: 'review_injection',\n            timestamp: new Date().toISOString(),\n            shouldInject: shouldInject,\n            strikeNumber: strikeNumber\n        };\n        this.logData.decisions.push(decision);\n        if (shouldInject) {\n            this.addFlow(`Injecting review task for strike ${strikeNumber}`);\n        }\n    }\n\n    logPromptGeneration(prompt, additionalInstructions) {\n        this.logData.output = {\n            promptLength: prompt.length,\n            additionalInstructionsLength: additionalInstructions.length,\n            totalLength: prompt.length + additionalInstructions.length,\n            promptPreview: prompt.substring(0, 500) + '...',\n            timestamp: new Date().toISOString()\n        };\n        this.addFlow('Generated prompt for Claude');\n    }\n\n    logExit(code, reason) {\n        this.logData.output.exitCode = code;\n        this.logData.output.exitReason = reason;\n        this.addFlow(`Exiting with code ${code}: ${reason}`);\n    }\n\n    logError(error, context) {\n        const errorEntry = {\n            timestamp: new Date().toISOString(),\n            context: context,\n            message: error.message,\n            stack: error.stack,\n            name: error.name\n        };\n        this.logData.errors.push(errorEntry);\n        this.addFlow(`ERROR in ${context}: ${error.message}`);\n    }\n\n    addFlow(message) {\n        this.logData.flow.push({\n            timestamp: new Date().toISOString(),\n            message: message\n        });\n    }\n\n    save() {\n        try {\n            // Add final timestamp\n            this.logData.execution.endTimestamp = new Date().toISOString();\n            \n            // Calculate execution duration\n            const start = new Date(this.logData.execution.timestamp);\n            const end = new Date(this.logData.execution.endTimestamp);\n            this.logData.execution.durationMs = end - start;\n\n            // Write log file (overwrites existing)\n            fs.writeFileSync(\n                this.logPath, \n                JSON.stringify(this.logData, null, 2),\n                'utf8'\n            );\n            \n            // Also save a copy with timestamp for debugging if needed\n            const debugPath = path.join(\n                this.projectRoot, \n                `.hook-debug-${Date.now()}.json`\n            );\n            if (this.logData.errors.length > 0) {\n                fs.writeFileSync(debugPath, JSON.stringify(this.logData, null, 2), 'utf8');\n            }\n        } catch (error) {\n            // Don't let logging errors crash the hook\n            console.error(`Failed to save log: ${error.message}`);\n        }\n    }\n}\n\nmodule.exports = Logger;"],"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","ignoreList":[]}