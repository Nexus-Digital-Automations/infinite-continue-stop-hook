d245c5dc650991107868981bcd2abaef
/* istanbul ignore next */
function cov_smnf4alay() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/infinite-continue-stop-hook/lib/logger.js";
  var hash = "32dbce29c1f8e68f17414eac724ef63a827b1c89";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/infinite-continue-stop-hook/lib/logger.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 11
        },
        end: {
          line: 1,
          column: 24
        }
      },
      "1": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 11
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 39
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 76
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "6": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 56
        }
      },
      "8": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "9": {
        start: {
          line: 44,
          column: 53
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "10": {
        start: {
          line: 45,
          column: 56
        },
        end: {
          line: 45,
          column: 82
        }
      },
      "11": {
        start: {
          line: 46,
          column: 55
        },
        end: {
          line: 46,
          column: 79
        }
      },
      "12": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 60
        }
      },
      "13": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "14": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "15": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "16": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "17": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 47
        }
      },
      "18": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "19": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 46
        }
      },
      "20": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 95
        }
      },
      "21": {
        start: {
          line: 87,
          column: 25
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "22": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 46
        }
      },
      "23": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 104
        }
      },
      "24": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "25": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 46
        }
      },
      "26": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "27": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 77
        }
      },
      "28": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 119,
          column: 10
        }
      },
      "29": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 52
        }
      },
      "30": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 44
        }
      },
      "31": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 48
        }
      },
      "32": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 61
        }
      },
      "33": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "34": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 45
        }
      },
      "35": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 62
        }
      },
      "36": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "37": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "38": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 75
        }
      },
      "39": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 68
        }
      },
      "40": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 155,
          column: 69
        }
      },
      "41": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 60
        }
      },
      "42": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "43": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "44": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "45": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 91
        }
      },
      "46": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 66
        }
      },
      "47": {
        start: {
          line: 180,
          column: 0
        },
        end: {
          line: 180,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 29
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 40
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 44,
            column: 49
          }
        },
        loc: {
          start: {
            line: 44,
            column: 53
          },
          end: {
            line: 44,
            column: 75
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 51
          },
          end: {
            line: 45,
            column: 52
          }
        },
        loc: {
          start: {
            line: 45,
            column: 56
          },
          end: {
            line: 45,
            column: 82
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 46,
            column: 51
          }
        },
        loc: {
          start: {
            line: 46,
            column: 55
          },
          end: {
            line: 46,
            column: 79
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 55
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 56
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 46
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 86
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 51
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 56
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 112
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 26
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 123
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 29
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 129
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 141
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 11
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 148
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 71,
            column: 9
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 83,
            column: 39
          },
          end: {
            line: 83,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 39
          },
          end: {
            line: 83,
            column: 51
          }
        }, {
          start: {
            line: 83,
            column: 55
          },
          end: {
            line: 83,
            column: 61
          }
        }],
        line: 83
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 66
          },
          end: {
            line: 96,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 66
          },
          end: {
            line: 96,
            column: 86
          }
        }, {
          start: {
            line: 96,
            column: 90
          },
          end: {
            line: 96,
            column: 100
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "4": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "32dbce29c1f8e68f17414eac724ef63a827b1c89"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_smnf4alay = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_smnf4alay();
const fs =
/* istanbul ignore next */
(cov_smnf4alay().s[0]++, require('fs'));
const path =
/* istanbul ignore next */
(cov_smnf4alay().s[1]++, require('path'));
const os =
/* istanbul ignore next */
(cov_smnf4alay().s[2]++, require('os'));
class Logger {
  constructor(projectRoot) {
    /* istanbul ignore next */
    cov_smnf4alay().f[0]++;
    cov_smnf4alay().s[3]++;
    this.projectRoot = projectRoot;
    /* istanbul ignore next */
    cov_smnf4alay().s[4]++;
    this.logPath = path.join(projectRoot, 'infinite-continue-hook.log');
    /* istanbul ignore next */
    cov_smnf4alay().s[5]++;
    this.logData = {
      execution: {
        timestamp: new Date().toISOString(),
        projectRoot: projectRoot,
        hookVersion: '1.0.0',
        nodeVersion: process.version,
        platform: os.platform(),
        arch: os.arch(),
        pid: process.pid,
        cwd: process.cwd()
      },
      input: {},
      projectState: {},
      decisions: [],
      flow: [],
      output: {},
      errors: []
    };
  }
  logInput(hookInput) {
    /* istanbul ignore next */
    cov_smnf4alay().f[1]++;
    cov_smnf4alay().s[6]++;
    this.logData.input = {
      sessionId: hookInput.session_id,
      transcriptPath: hookInput.transcript_path,
      stopHookActive: hookInput.stop_hook_active,
      rawInput: hookInput
    };
    /* istanbul ignore next */
    cov_smnf4alay().s[7]++;
    this.addFlow('Received input from Claude Code');
  }
  logProjectState(todoData, todoPath) {
    /* istanbul ignore next */
    cov_smnf4alay().f[2]++;
    cov_smnf4alay().s[8]++;
    this.logData.projectState = {
      todoPath: todoPath,
      project: todoData.project,
      totalTasks: todoData.tasks.length,
      pendingTasks: todoData.tasks.filter(t => {
        /* istanbul ignore next */
        cov_smnf4alay().f[3]++;
        cov_smnf4alay().s[9]++;
        return t.status === 'pending';
      }).length,
      inProgressTasks: todoData.tasks.filter(t => {
        /* istanbul ignore next */
        cov_smnf4alay().f[4]++;
        cov_smnf4alay().s[10]++;
        return t.status === 'in_progress';
      }).length,
      completedTasks: todoData.tasks.filter(t => {
        /* istanbul ignore next */
        cov_smnf4alay().f[5]++;
        cov_smnf4alay().s[11]++;
        return t.status === 'completed';
      }).length,
      lastMode: todoData.last_mode,
      reviewStrikes: todoData.review_strikes,
      strikesCompletedLastRun: todoData.strikes_completed_last_run,
      availableModes: todoData.available_modes
    };
    /* istanbul ignore next */
    cov_smnf4alay().s[12]++;
    this.addFlow('Loaded project state from TODO.json');
  }
  logCurrentTask(task) {
    /* istanbul ignore next */
    cov_smnf4alay().f[6]++;
    cov_smnf4alay().s[13]++;
    if (task) {
      /* istanbul ignore next */
      cov_smnf4alay().b[0][0]++;
      cov_smnf4alay().s[14]++;
      this.logData.projectState.currentTask = {
        id: task.id,
        title: task.title,
        description: task.description,
        mode: task.mode,
        priority: task.priority,
        status: task.status,
        isReviewTask: task.is_review_task,
        strikeNumber: task.strike_number
      };
      /* istanbul ignore next */
      cov_smnf4alay().s[15]++;
      this.addFlow(`Selected task: ${task.title} (${task.id})`);
    } else {
      /* istanbul ignore next */
      cov_smnf4alay().b[0][1]++;
      cov_smnf4alay().s[16]++;
      this.logData.projectState.currentTask = null;
      /* istanbul ignore next */
      cov_smnf4alay().s[17]++;
      this.addFlow('No tasks available');
    }
  }
  logModeDecision(previousMode, selectedMode, reason) {
    /* istanbul ignore next */
    cov_smnf4alay().f[7]++;
    const decision =
    /* istanbul ignore next */
    (cov_smnf4alay().s[18]++, {
      type: 'mode_selection',
      timestamp: new Date().toISOString(),
      previousMode: previousMode,
      selectedMode: selectedMode,
      reason: reason
    });
    /* istanbul ignore next */
    cov_smnf4alay().s[19]++;
    this.logData.decisions.push(decision);
    /* istanbul ignore next */
    cov_smnf4alay().s[20]++;
    this.addFlow(`Mode decision: ${
    /* istanbul ignore next */
    (cov_smnf4alay().b[1][0]++, previousMode) ||
    /* istanbul ignore next */
    (cov_smnf4alay().b[1][1]++, 'none')} → ${selectedMode} (${reason})`);
  }
  logStrikeHandling(strikeResult, todoData) {
    /* istanbul ignore next */
    cov_smnf4alay().f[8]++;
    const decision =
    /* istanbul ignore next */
    (cov_smnf4alay().s[21]++, {
      type: 'strike_handling',
      timestamp: new Date().toISOString(),
      action: strikeResult.action,
      message: strikeResult.message,
      currentStrikes: todoData.review_strikes,
      strikesCompleted: todoData.strikes_completed_last_run
    });
    /* istanbul ignore next */
    cov_smnf4alay().s[22]++;
    this.logData.decisions.push(decision);
    /* istanbul ignore next */
    cov_smnf4alay().s[23]++;
    this.addFlow(`Strike handling: ${strikeResult.action} - ${
    /* istanbul ignore next */
    (cov_smnf4alay().b[2][0]++, strikeResult.message) ||
    /* istanbul ignore next */
    (cov_smnf4alay().b[2][1]++, 'continue')}`);
  }
  logReviewInjection(shouldInject, strikeNumber) {
    /* istanbul ignore next */
    cov_smnf4alay().f[9]++;
    const decision =
    /* istanbul ignore next */
    (cov_smnf4alay().s[24]++, {
      type: 'review_injection',
      timestamp: new Date().toISOString(),
      shouldInject: shouldInject,
      strikeNumber: strikeNumber
    });
    /* istanbul ignore next */
    cov_smnf4alay().s[25]++;
    this.logData.decisions.push(decision);
    /* istanbul ignore next */
    cov_smnf4alay().s[26]++;
    if (shouldInject) {
      /* istanbul ignore next */
      cov_smnf4alay().b[3][0]++;
      cov_smnf4alay().s[27]++;
      this.addFlow(`Injecting review task for strike ${strikeNumber}`);
    } else
    /* istanbul ignore next */
    {
      cov_smnf4alay().b[3][1]++;
    }
  }
  logPromptGeneration(prompt, additionalInstructions) {
    /* istanbul ignore next */
    cov_smnf4alay().f[10]++;
    cov_smnf4alay().s[28]++;
    this.logData.output = {
      promptLength: prompt.length,
      additionalInstructionsLength: additionalInstructions.length,
      totalLength: prompt.length + additionalInstructions.length,
      promptPreview: prompt.substring(0, 500) + '...',
      timestamp: new Date().toISOString()
    };
    /* istanbul ignore next */
    cov_smnf4alay().s[29]++;
    this.addFlow('Generated prompt for Claude');
  }
  logExit(code, reason) {
    /* istanbul ignore next */
    cov_smnf4alay().f[11]++;
    cov_smnf4alay().s[30]++;
    this.logData.output.exitCode = code;
    /* istanbul ignore next */
    cov_smnf4alay().s[31]++;
    this.logData.output.exitReason = reason;
    /* istanbul ignore next */
    cov_smnf4alay().s[32]++;
    this.addFlow(`Exiting with code ${code}: ${reason}`);
  }
  logError(error, context) {
    /* istanbul ignore next */
    cov_smnf4alay().f[12]++;
    const errorEntry =
    /* istanbul ignore next */
    (cov_smnf4alay().s[33]++, {
      timestamp: new Date().toISOString(),
      context: context,
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    /* istanbul ignore next */
    cov_smnf4alay().s[34]++;
    this.logData.errors.push(errorEntry);
    /* istanbul ignore next */
    cov_smnf4alay().s[35]++;
    this.addFlow(`ERROR in ${context}: ${error.message}`);
  }
  addFlow(message) {
    /* istanbul ignore next */
    cov_smnf4alay().f[13]++;
    cov_smnf4alay().s[36]++;
    this.logData.flow.push({
      timestamp: new Date().toISOString(),
      message: message
    });
  }
  save() {
    /* istanbul ignore next */
    cov_smnf4alay().f[14]++;
    cov_smnf4alay().s[37]++;
    try {
      /* istanbul ignore next */
      cov_smnf4alay().s[38]++;
      // Add final timestamp
      this.logData.execution.endTimestamp = new Date().toISOString();

      // Calculate execution duration
      const start =
      /* istanbul ignore next */
      (cov_smnf4alay().s[39]++, new Date(this.logData.execution.timestamp));
      const end =
      /* istanbul ignore next */
      (cov_smnf4alay().s[40]++, new Date(this.logData.execution.endTimestamp));
      /* istanbul ignore next */
      cov_smnf4alay().s[41]++;
      this.logData.execution.durationMs = end - start;

      // Write log file (overwrites existing)
      /* istanbul ignore next */
      cov_smnf4alay().s[42]++;
      fs.writeFileSync(this.logPath, JSON.stringify(this.logData, null, 2), 'utf8');

      // Also save a copy with timestamp for debugging if needed
      const debugPath =
      /* istanbul ignore next */
      (cov_smnf4alay().s[43]++, path.join(this.projectRoot, `.hook-debug-${Date.now()}.json`));
      /* istanbul ignore next */
      cov_smnf4alay().s[44]++;
      if (this.logData.errors.length > 0) {
        /* istanbul ignore next */
        cov_smnf4alay().b[4][0]++;
        cov_smnf4alay().s[45]++;
        fs.writeFileSync(debugPath, JSON.stringify(this.logData, null, 2), 'utf8');
      } else
      /* istanbul ignore next */
      {
        cov_smnf4alay().b[4][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_smnf4alay().s[46]++;
      // Don't let logging errors crash the hook
      console.error(`Failed to save log: ${error.message}`);
    }
  }
}
/* istanbul ignore next */
cov_smnf4alay().s[47]++;
module.exports = Logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,