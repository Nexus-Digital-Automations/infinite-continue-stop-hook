{"version":3,"names":["cov_21xyfeqr7p","actualCoverage","ContaminationResolver","s","require","getGlobalMonitor","ErrorRecovery","fs","path","BuildRecoveryManager","constructor","options","b","f","projectRoot","process","cwd","maxRetries","retryDelay","contaminationResolver","nodeModulesMonitor","enableBackup","enableRestore","enableDetailed","errorRecovery","recoveryAttempts","lastRecoveryTime","recoveryHistory","executeBuildWithRecovery","buildCommand","startTime","Date","now","log","setupResult","setupBuildEnvironment","success","Error","error","lastError","contaminationDetected","attempt","preContamination","detectContamination","length","cleanupResult","restoreContaminatedFiles","restored","buildResult","executeBuildCommand","validationResult","validateBuildOutput","postContamination","executionTime","message","includes","recoveryResult","performEnhancedBuildRecovery","delay","attempts","storeOriginalContents","createBackups","startMonitoring","contamination","spawn","Promise","resolve","buildProcess","stdio","env","NODE_ENV","stdout","stderr","on","data","toString","code","exitCode","recoveryStart","timestamp","toISOString","steps","issues","enhanced","deepContaminationStep","performDeepContaminationRecovery","push","filesStep","recoverCriticalFiles","nodeModulesStep","recoverNodeModulesState","exitHandlerStep","protectExitHandlers","cleanupStep","performEnhancedCleanup","verificationStep","verifyRecoveryCompleteness","criticalStepsSuccessful","filter","step","name","every","allStepsSuccessful","performBuildRecovery","recoverFromContamination","details","contaminationFound","recovery","filesRestored","restoredFiles","files","remainingContamination","criticalFiles","fileStatus","file","fullPath","join","exists","existsSync","nodeModulesPath","nodeModulesExists","criticalPackages","packageStatus","pkg","pkgPath","pkgExists","package","p","totalRecovered","maxPasses","pass","finalContamination","exitHandlerFiles","protectedFiles","failedFiles","content","readFileSync","trim","startsWith","cleanupTargets","cleanedItems","protectedItems","target","targetPath","isCritical","isCriticalPath","rmSync","recursive","force","cleanupErrors","postCleanupContamination","contaminationIntroduced","contaminationCount","validFiles","invalidFiles","isValid","protectionActive","BUILD_PROTECTION_ACTIVE","_targetPath","performCleanup","ms","setTimeout","console","module","exports"],"sources":["buildRecoveryManager.js"],"sourcesContent":["/**\n * Build Recovery Manager\n * \n * Provides advanced recovery capabilities for build failures,\n * integrating with the existing error recovery and contamination\n * resolution systems to ensure robust build processes.\n */\n\nconst ContaminationResolver = require('./contaminationResolver');\nconst { getGlobalMonitor } = require('./nodeModulesMonitor');\nconst ErrorRecovery = require('./errorRecovery');\nconst fs = require('fs');\nconst path = require('path');\n\nclass BuildRecoveryManager {\n    constructor(options = {}) {\n        this.projectRoot = options.projectRoot || process.cwd();\n        this.maxRetries = options.maxRetries || 3;\n        this.retryDelay = options.retryDelay || 2000;\n        \n        // Initialize recovery components\n        this.contaminationResolver = new ContaminationResolver(this.projectRoot);\n        this.nodeModulesMonitor = getGlobalMonitor({\n            enableBackup: true,\n            enableRestore: true,\n            enableDetailed: true\n        });\n        this.errorRecovery = new ErrorRecovery();\n        \n        // Recovery state\n        this.recoveryAttempts = 0;\n        this.lastRecoveryTime = null;\n        this.recoveryHistory = [];\n    }\n    \n    /**\n     * Execute build with automatic recovery on failure and enhanced contamination protection\n     */\n    async executeBuildWithRecovery(buildCommand) {\n        const startTime = Date.now();\n        this.log('Starting enhanced build with recovery protection...');\n        \n        try {\n            // Pre-build validation and setup with enhanced protection\n            const setupResult = await this.setupBuildEnvironment();\n            if (!setupResult.success) {\n                throw new Error(`Build setup failed: ${setupResult.error}`);\n            }\n            \n            // Execute build with enhanced retry logic\n            let lastError = null;\n            let contaminationDetected = false;\n            \n            for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n                this.recoveryAttempts = attempt;\n                this.log(`Enhanced build attempt ${attempt}/${this.maxRetries}`);\n                \n                try {\n                    // Pre-attempt contamination check\n                    const preContamination = await this.contaminationResolver.detectContamination();\n                    if (preContamination.length > 0) {\n                        this.log(`Pre-attempt contamination detected: ${preContamination.length} files`);\n                        contaminationDetected = true;\n                        \n                        // Attempt immediate cleanup\n                        const cleanupResult = await this.contaminationResolver.restoreContaminatedFiles();\n                        if (cleanupResult.restored > 0) {\n                            this.log(`Cleaned up ${cleanupResult.restored} contaminated files before build`);\n                        }\n                    }\n                    \n                    // Run the actual build command with protection\n                    const buildResult = await this.executeBuildCommand(buildCommand);\n                    \n                    if (buildResult.success) {\n                        this.log(`Build succeeded on attempt ${attempt}`);\n                        \n                        // Enhanced post-build validation\n                        const validationResult = await this.validateBuildOutput();\n                        \n                        if (validationResult.success) {\n                            // Final contamination sweep\n                            const postContamination = await this.contaminationResolver.detectContamination();\n                            if (postContamination.length === 0) {\n                                const executionTime = Date.now() - startTime;\n                                return {\n                                    success: true,\n                                    attempt,\n                                    executionTime,\n                                    validationResult,\n                                    contaminationDetected,\n                                    message: `Enhanced build completed successfully after ${attempt} attempt(s)`\n                                };\n                            } else {\n                                this.log(`Post-build contamination detected: ${postContamination.length} files`);\n                                lastError = new Error('Post-build contamination detected');\n                            }\n                        } else {\n                            this.log('Build output validation failed');\n                            lastError = new Error('Build output validation failed');\n                        }\n                    } else {\n                        lastError = new Error(buildResult.error || 'Build command failed');\n                    }\n                    \n                } catch (error) {\n                    lastError = error;\n                    this.log(`Build attempt ${attempt} failed: ${error.message}`);\n                    \n                    // Check if failure was due to contamination\n                    if (error.message.includes('SyntaxError') || error.message.includes('Unexpected token')) {\n                        contaminationDetected = true;\n                        this.log('Build failure appears to be contamination-related');\n                    }\n                }\n                \n                // If this isn't the last attempt, try enhanced recovery\n                if (attempt < this.maxRetries) {\n                    this.log(`Attempting enhanced recovery before retry ${attempt + 1}...`);\n                    \n                    const recoveryResult = await this.performEnhancedBuildRecovery();\n                    \n                    if (recoveryResult.success) {\n                        this.log('Enhanced recovery successful, retrying build...');\n                        await this.delay(this.retryDelay);\n                    } else {\n                        this.log('Enhanced recovery failed, will still retry with extended delay...');\n                        await this.delay(this.retryDelay * 3);\n                    }\n                }\n            }\n            \n            // All attempts failed\n            const executionTime = Date.now() - startTime;\n            return {\n                success: false,\n                attempts: this.maxRetries,\n                executionTime,\n                lastError: lastError.message,\n                recoveryHistory: this.recoveryHistory,\n                contaminationDetected,\n                message: `Enhanced build failed after ${this.maxRetries} attempts with recovery`\n            };\n            \n        } catch (error) {\n            this.log(`Enhanced build execution failed: ${error.message}`);\n            return {\n                success: false,\n                error: error.message,\n                executionTime: Date.now() - startTime\n            };\n        }\n    }\n    \n    /**\n     * Setup build environment with validation and backup\n     */\n    async setupBuildEnvironment() {\n        try {\n            this.log('Setting up build environment...');\n            \n            // Create backup of critical files\n            await this.contaminationResolver.storeOriginalContents();\n            await this.contaminationResolver.createBackups();\n            \n            // Initialize monitoring\n            if (this.nodeModulesMonitor && typeof this.nodeModulesMonitor.startMonitoring === 'function') {\n                await this.nodeModulesMonitor.startMonitoring();\n            }\n            \n            // Pre-build contamination check\n            const contamination = await this.contaminationResolver.detectContamination();\n            if (contamination.length > 0) {\n                this.log('Pre-build contamination detected, cleaning up...');\n                const cleanupResult = await this.contaminationResolver.restoreContaminatedFiles();\n                \n                if (cleanupResult.restored > 0) {\n                    this.log(`Cleaned up ${cleanupResult.restored} contaminated files`);\n                } else {\n                    throw new Error('Unable to clean up contamination before build');\n                }\n            }\n            \n            this.log('Build environment setup complete');\n            return { success: true };\n            \n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    }\n    \n    /**\n     * Execute the actual build command\n     */\n    async executeBuildCommand(buildCommand) {\n        const { spawn } = require('child_process');\n        \n        return new Promise((resolve) => {\n            try {\n                // Use shell to properly handle command chains with && operators\n                const buildProcess = spawn('sh', ['-c', buildCommand], {\n                    cwd: this.projectRoot,\n                    stdio: 'pipe',\n                    env: { ...process.env, NODE_ENV: 'production' }\n                });\n                \n                let stdout = '';\n                let stderr = '';\n                \n                buildProcess.stdout.on('data', (data) => {\n                    stdout += data.toString();\n                });\n                \n                buildProcess.stderr.on('data', (data) => {\n                    stderr += data.toString();\n                });\n                \n                buildProcess.on('close', (code) => {\n                    if (code === 0) {\n                        resolve({\n                            success: true,\n                            stdout,\n                            stderr,\n                            exitCode: code\n                        });\n                    } else {\n                        resolve({\n                            success: false,\n                            stdout,\n                            stderr,\n                            exitCode: code,\n                            error: `Build process exited with code ${code}`\n                        });\n                    }\n                });\n                \n                buildProcess.on('error', (error) => {\n                    resolve({\n                        success: false,\n                        error: error.message\n                    });\n                });\n                \n            } catch (error) {\n                resolve({\n                    success: false,\n                    error: error.message\n                });\n            }\n        });\n    }\n    \n    /**\n     * Perform enhanced build recovery with deep contamination protection\n     */\n    async performEnhancedBuildRecovery() {\n        const recoveryStart = Date.now();\n        this.lastRecoveryTime = recoveryStart;\n        \n        const recoveryResult = {\n            timestamp: new Date().toISOString(),\n            attempt: this.recoveryAttempts,\n            success: false,\n            steps: [],\n            issues: [],\n            enhanced: true\n        };\n        \n        try {\n            this.log('Performing enhanced build recovery...');\n            \n            // Step 1: Deep contamination analysis and recovery\n            const deepContaminationStep = await this.performDeepContaminationRecovery();\n            recoveryResult.steps.push(deepContaminationStep);\n            \n            // Step 2: Critical file integrity restoration\n            const filesStep = await this.recoverCriticalFiles();\n            recoveryResult.steps.push(filesStep);\n            \n            // Step 3: Node modules comprehensive reset\n            const nodeModulesStep = await this.recoverNodeModulesState();\n            recoveryResult.steps.push(nodeModulesStep);\n            \n            // Step 4: Exit handler specific protection\n            const exitHandlerStep = await this.protectExitHandlers();\n            recoveryResult.steps.push(exitHandlerStep);\n            \n            // Step 5: Enhanced cleanup with protection verification\n            const cleanupStep = await this.performEnhancedCleanup();\n            recoveryResult.steps.push(cleanupStep);\n            \n            // Step 6: Verify recovery completeness\n            const verificationStep = await this.verifyRecoveryCompleteness();\n            recoveryResult.steps.push(verificationStep);\n            \n            // Determine overall success\n            const criticalStepsSuccessful = recoveryResult.steps.filter(step => \n                ['Deep Contamination Recovery', 'Exit Handler Protection', 'Recovery Verification'].includes(step.name)\n            ).every(step => step.success);\n            \n            const allStepsSuccessful = recoveryResult.steps.every(step => step.success);\n            \n            // Success if critical steps pass, even if some non-critical steps fail\n            recoveryResult.success = criticalStepsSuccessful;\n            recoveryResult.allStepsSuccessful = allStepsSuccessful;\n            \n            if (allStepsSuccessful) {\n                this.log('Enhanced build recovery completed successfully');\n            } else if (criticalStepsSuccessful) {\n                this.log('Enhanced build recovery completed - critical steps successful');\n            } else {\n                this.log('Enhanced build recovery failed on critical steps');\n            }\n            \n        } catch (error) {\n            recoveryResult.success = false;\n            recoveryResult.error = error.message;\n            this.log(`Enhanced recovery failed: ${error.message}`);\n        }\n        \n        recoveryResult.executionTime = Date.now() - recoveryStart;\n        this.recoveryHistory.push(recoveryResult);\n        \n        return recoveryResult;\n    }\n    \n    /**\n     * Perform comprehensive build recovery (legacy method maintained for compatibility)\n     */\n    async performBuildRecovery() {\n        return await this.performEnhancedBuildRecovery();\n    }\n    \n    /**\n     * Recover from contamination issues\n     */\n    async recoverFromContamination() {\n        const step = {\n            name: 'Contamination Recovery',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            const contamination = await this.contaminationResolver.detectContamination();\n            step.details.contaminationFound = contamination.length;\n            \n            if (contamination.length > 0) {\n                const recovery = await this.contaminationResolver.restoreContaminatedFiles();\n                step.details.filesRestored = recovery.restored;\n                step.details.restoredFiles = recovery.files;\n                \n                // Verify recovery\n                const remainingContamination = await this.contaminationResolver.detectContamination();\n                step.success = remainingContamination.length === 0;\n                step.details.remainingContamination = remainingContamination.length;\n            } else {\n                step.success = true;\n                step.details.message = 'No contamination found';\n            }\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Recover critical files\n     */\n    async recoverCriticalFiles() {\n        const step = {\n            name: 'Critical Files Recovery',\n            success: true,\n            details: {}\n        };\n        \n        try {\n            const criticalFiles = [\n                'package.json',\n                'stop-hook.js',\n                'lib/taskManager.js'\n            ];\n            \n            const fileStatus = [];\n            \n            for (const file of criticalFiles) {\n                const fullPath = path.join(this.projectRoot, file);\n                const exists = fs.existsSync(fullPath);\n                fileStatus.push({ file, exists });\n                \n                if (!exists) {\n                    step.success = false;\n                }\n            }\n            \n            step.details.fileStatus = fileStatus;\n            \n        } catch (error) {\n            step.success = false;\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Recover node_modules state\n     */\n    async recoverNodeModulesState() {\n        const step = {\n            name: 'Node Modules State Recovery',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            // Check if node_modules exists\n            const nodeModulesPath = path.join(this.projectRoot, 'node_modules');\n            const exists = fs.existsSync(nodeModulesPath);\n            \n            step.details.nodeModulesExists = exists;\n            \n            if (exists) {\n                // Validate critical packages\n                const criticalPackages = ['jest', 'eslint', 'exit'];\n                const packageStatus = [];\n                \n                for (const pkg of criticalPackages) {\n                    const pkgPath = path.join(nodeModulesPath, pkg);\n                    const pkgExists = fs.existsSync(pkgPath);\n                    packageStatus.push({ package: pkg, exists: pkgExists });\n                }\n                \n                step.details.packageStatus = packageStatus;\n                step.success = packageStatus.every(p => p.exists);\n            } else {\n                step.details.message = 'node_modules missing - requires npm install';\n                step.success = false;\n            }\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Perform deep contamination recovery\n     */\n    async performDeepContaminationRecovery() {\n        const step = {\n            name: 'Deep Contamination Recovery',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            // Multi-pass contamination detection and recovery\n            let totalRecovered = 0;\n            const maxPasses = 3;\n            \n            for (let pass = 1; pass <= maxPasses; pass++) {\n                const contamination = await this.contaminationResolver.detectContamination();\n                step.details[`pass${pass}ContaminationFound`] = contamination.length;\n                \n                if (contamination.length > 0) {\n                    const recovery = await this.contaminationResolver.restoreContaminatedFiles();\n                    step.details[`pass${pass}FilesRestored`] = recovery.restored;\n                    totalRecovered += recovery.restored;\n                    \n                    // Brief delay between passes to allow filesystem to settle\n                    await this.delay(100);\n                } else {\n                    break; // No contamination found, we're done\n                }\n            }\n            \n            // Final verification\n            const finalContamination = await this.contaminationResolver.detectContamination();\n            step.success = finalContamination.length === 0;\n            step.details.totalRecovered = totalRecovered;\n            step.details.finalContamination = finalContamination.length;\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Protect exit handlers from contamination\n     */\n    async protectExitHandlers() {\n        const step = {\n            name: 'Exit Handler Protection',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            const exitHandlerFiles = [\n                'node_modules/exit/lib/exit.js',\n                'node_modules/jest-cli/build/run.js',\n                'node_modules/jest-worker/build/index.js'\n            ];\n            \n            const protectedFiles = [];\n            const failedFiles = [];\n            \n            for (const file of exitHandlerFiles) {\n                const fullPath = path.join(this.projectRoot, file);\n                if (fs.existsSync(fullPath)) {\n                    try {\n                        const content = fs.readFileSync(fullPath, 'utf8');\n                        \n                        // Check if file contains JSON contamination\n                        if (content.trim().startsWith('{') && content.includes('\"project\"')) {\n                            // File is contaminated, restore from backup\n                            const restored = await this.contaminationResolver.restoreContaminatedFiles();\n                            if (restored.files.includes(fullPath)) {\n                                protectedFiles.push(file);\n                            } else {\n                                failedFiles.push(file);\n                            }\n                        } else {\n                            // File is clean\n                            protectedFiles.push(file);\n                        }\n                    } catch (error) {\n                        failedFiles.push({ file, error: error.message });\n                    }\n                }\n            }\n            \n            step.details.protectedFiles = protectedFiles;\n            step.details.failedFiles = failedFiles;\n            step.success = failedFiles.length === 0;\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Perform enhanced cleanup with protection verification\n     */\n    async performEnhancedCleanup() {\n        const step = {\n            name: 'Enhanced Cleanup',\n            success: true,\n            details: {}\n        };\n        \n        try {\n            const cleanupTargets = [\n                '.jest-cache',\n                'coverage',\n                '.nyc_output',\n                'node_modules/.cache'\n            ];\n            \n            const cleanedItems = [];\n            const protectedItems = [];\n            \n            for (const target of cleanupTargets) {\n                const targetPath = path.join(this.projectRoot, target);\n                if (fs.existsSync(targetPath)) {\n                    try {\n                        // Check if target contains any critical files before deletion\n                        const isCritical = await this.isCriticalPath(targetPath);\n                        if (isCritical) {\n                            protectedItems.push(target);\n                        } else {\n                            fs.rmSync(targetPath, { recursive: true, force: true });\n                            cleanedItems.push(target);\n                        }\n                    } catch (error) {\n                        // Non-critical - continue with other cleanup\n                        step.details.cleanupErrors = step.details.cleanupErrors || [];\n                        step.details.cleanupErrors.push({ target, error: error.message });\n                    }\n                }\n            }\n            \n            step.details.cleanedItems = cleanedItems;\n            step.details.protectedItems = protectedItems;\n            \n            // Verify no contamination was introduced during cleanup\n            const postCleanupContamination = await this.contaminationResolver.detectContamination();\n            step.details.postCleanupContamination = postCleanupContamination.length;\n            \n            if (postCleanupContamination.length > 0) {\n                step.success = false;\n                step.details.contaminationIntroduced = true;\n            }\n            \n        } catch (error) {\n            step.error = error.message;\n            step.success = false;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Verify recovery completeness\n     */\n    async verifyRecoveryCompleteness() {\n        const step = {\n            name: 'Recovery Verification',\n            success: false,\n            details: {}\n        };\n        \n        try {\n            // Check 1: No contamination present\n            const contamination = await this.contaminationResolver.detectContamination();\n            step.details.contaminationCount = contamination.length;\n            \n            // Check 2: Critical files are intact and valid\n            const criticalFiles = [\n                'node_modules/exit/lib/exit.js',\n                'node_modules/jest-cli/build/run.js'\n            ];\n            \n            const validFiles = [];\n            const invalidFiles = [];\n            \n            for (const file of criticalFiles) {\n                const fullPath = path.join(this.projectRoot, file);\n                if (fs.existsSync(fullPath)) {\n                    try {\n                        const content = fs.readFileSync(fullPath, 'utf8');\n                        const isValid = !content.trim().startsWith('{') || !content.includes('\"project\"');\n                        \n                        if (isValid) {\n                            validFiles.push(file);\n                        } else {\n                            invalidFiles.push(file);\n                        }\n                    } catch (error) {\n                        invalidFiles.push({ file, error: error.message });\n                    }\n                }\n            }\n            \n            step.details.validFiles = validFiles;\n            step.details.invalidFiles = invalidFiles;\n            \n            // Check 3: Protection environment is set up\n            const protectionActive = process.env.BUILD_PROTECTION_ACTIVE === 'true';\n            step.details.protectionActive = protectionActive;\n            \n            // Overall success\n            step.success = contamination.length === 0 && invalidFiles.length === 0 && protectionActive;\n            \n        } catch (error) {\n            step.error = error.message;\n        }\n        \n        return step;\n    }\n    \n    /**\n     * Check if a path contains critical files that shouldn't be deleted\n     */\n    async isCriticalPath(_targetPath) {\n        // For now, consider all paths as non-critical for cleanup\n        // This can be extended to check for specific critical files within the path\n        return false;\n    }\n    \n    /**\n     * Perform cleanup of temporary files and caches (legacy method)\n     */\n    async performCleanup() {\n        return await this.performEnhancedCleanup();\n    }\n    \n    /**\n     * Validate build output\n     */\n    async validateBuildOutput() {\n        try {\n            // Final contamination check\n            const contamination = await this.contaminationResolver.detectContamination();\n            \n            return {\n                success: contamination.length === 0,\n                contamination: contamination.length,\n                message: contamination.length === 0 ? 'Build output is clean' : `${contamination.length} contaminated files found`\n            };\n            \n        } catch (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Delay helper for retry logic\n     */\n    async delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    \n    /**\n     * Logging helper\n     */\n    log(message) {\n        console.log(`🔧 [BuildRecovery] ${message}`);\n    }\n}\n\nmodule.exports = BuildRecoveryManager;"],"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","ignoreList":[]}