{"version":3,"names":["cov_2hzrr0cssi","actualCoverage","NodeModulesMonitor","s","require","fs","path","JestNodeModulesHooks","constructor","options","b","f","monitor","projectRoot","process","cwd","enableBackup","enableRestore","enableDetailed","config","reportFile","failOnViolations","verboseLogging","testRunData","startTime","endTime","violations","restored","setupComplete","globalSetup","log","Date","toISOString","result","startMonitoring","filesMonitored","timestamp","stateFile","join","promises","writeFile","JSON","stringify","monitoringActive","error","message","globalTeardown","skipped","integrityResult","checkIntegrity","length","violationCount","types","Set","map","v","type","restoreResult","restoreCorruptedFiles","files","restoredCount","generateIntegrityReport","Error","stopMonitoring","unlink","success","filesChecked","duration","calculateDuration","setupTest","testFilePath","basename","testFile","teardownTest","emergencyIntegrityCheck","generateEmergencyReport","getMonitoringStatus","report","testRun","integrity","restoration","generateReport","recommendations","generateRecommendations","reportPath","mkdir","dirname","recursive","push","priority","corruptedFiles","filter","unexpectedFiles","file","criticalViolations","criticalFiles","some","cf","includes","start","end","Math","round","data","level","levelEmoji","info","warn","prefix","Object","keys","console","createGlobalSetup","jestGlobalSetup","hooks","global","__nodeModulesHooks","createGlobalTeardown","_options","jestGlobalTeardown","reason","NodeModulesTestEnvironment","context","projectConfig","testEnvironmentOptions","setup","testPath","teardown","getVmContext","handleTestEvent","event","_state","name","module","exports"],"sources":["jestHooks.js"],"sourcesContent":["/**\n * Jest Test Hooks for Node Modules Monitoring\n * \n * This module provides Jest lifecycle hooks that automatically monitor\n * node_modules file integrity during test execution. It integrates with\n * the NodeModulesMonitor to provide seamless corruption detection.\n * \n * Features:\n * - Automatic monitoring setup before test runs\n * - Integrity checking after test completion\n * - Automatic restoration of corrupted files\n * - Detailed reporting of violations\n * - Integration with Jest's global setup/teardown\n */\n\nconst NodeModulesMonitor = require('./nodeModulesMonitor');\nconst fs = require('fs');\nconst path = require('path');\n\nclass JestNodeModulesHooks {\n    constructor(options = {}) {\n        this.monitor = new NodeModulesMonitor({\n            projectRoot: options.projectRoot || process.cwd(),\n            enableBackup: options.enableBackup !== false,\n            enableRestore: options.enableRestore !== false,\n            enableDetailed: options.enableDetailed || false,\n            ...options\n        });\n        \n        this.config = {\n            reportFile: options.reportFile || 'development/test-integrity-report.json',\n            failOnViolations: options.failOnViolations !== false,\n            verboseLogging: options.verboseLogging || false,\n            ...options.config\n        };\n        \n        this.testRunData = {\n            startTime: null,\n            endTime: null,\n            violations: [],\n            restored: []\n        };\n        \n        this.setupComplete = false;\n    }\n    \n    /**\n     * Global setup hook - called before all tests\n     * Start monitoring and create initial checksums/backups\n     */\n    async globalSetup() {\n        try {\n            this.log('Starting Jest node_modules integrity monitoring');\n            this.testRunData.startTime = new Date().toISOString();\n            \n            const result = await this.monitor.startMonitoring();\n            this.setupComplete = true;\n            \n            this.log('Node_modules monitoring setup complete', {\n                filesMonitored: result.filesMonitored,\n                timestamp: result.timestamp\n            });\n            \n            // Store monitoring state for teardown\n            const stateFile = path.join(process.cwd(), '.jest-monitor-state.json');\n            await fs.promises.writeFile(stateFile, JSON.stringify({\n                monitoringActive: true,\n                startTime: this.testRunData.startTime,\n                filesMonitored: result.filesMonitored\n            }));\n            \n            return result;\n            \n        } catch (error) {\n            this.log('Failed to setup node_modules monitoring', { error: error.message }, 'error');\n            throw error;\n        }\n    }\n    \n    /**\n     * Global teardown hook - called after all tests\n     * Check integrity and restore any corrupted files\n     */\n    async globalTeardown() {\n        try {\n            if (!this.setupComplete) {\n                this.log('Monitoring was not properly setup - skipping teardown');\n                return { skipped: true };\n            }\n            \n            this.log('Starting node_modules integrity check');\n            this.testRunData.endTime = new Date().toISOString();\n            \n            // Check integrity\n            const integrityResult = await this.monitor.checkIntegrity();\n            this.testRunData.violations = integrityResult.violations;\n            \n            if (integrityResult.violations.length > 0) {\n                this.log('Node_modules integrity violations detected', {\n                    violationCount: integrityResult.violations.length,\n                    types: [...new Set(integrityResult.violations.map(v => v.type))]\n                }, 'error');\n                \n                // Attempt to restore corrupted files\n                const restoreResult = await this.monitor.restoreCorruptedFiles();\n                this.testRunData.restored = restoreResult.files || [];\n                \n                if (restoreResult.restored > 0) {\n                    this.log('Corrupted files restored', {\n                        restoredCount: restoreResult.restored,\n                        files: restoreResult.files\n                    });\n                }\n                \n                // Generate detailed report\n                await this.generateIntegrityReport(integrityResult, restoreResult);\n                \n                // Optionally fail the test run\n                if (this.config.failOnViolations && integrityResult.violations.length > 0) {\n                    throw new Error(`Node_modules integrity violations detected: ${integrityResult.violations.length} violations found`);\n                }\n            } else {\n                this.log('Node_modules integrity check passed - no violations detected');\n            }\n            \n            // Stop monitoring\n            await this.monitor.stopMonitoring();\n            \n            // Cleanup state file\n            const stateFile = path.join(process.cwd(), '.jest-monitor-state.json');\n            try {\n                await fs.promises.unlink(stateFile);\n            } catch {\n                // Ignore cleanup errors\n            }\n            \n            const result = {\n                success: integrityResult.violations.length === 0,\n                violations: integrityResult.violations,\n                restored: this.testRunData.restored,\n                filesChecked: integrityResult.filesChecked,\n                duration: this.calculateDuration()\n            };\n            \n            this.log('Node_modules monitoring teardown complete', result);\n            \n            return result;\n            \n        } catch (error) {\n            this.log('Failed during teardown', { error: error.message }, 'error');\n            throw error;\n        }\n    }\n    \n    /**\n     * Setup hook for individual test files (optional)\n     * Can be used for fine-grained monitoring\n     */\n    async setupTest(testFilePath) {\n        if (this.config.verboseLogging) {\n            this.log(`Starting test file: ${path.basename(testFilePath)}`);\n        }\n        \n        // Could add per-test monitoring if needed\n        return { testFile: testFilePath, timestamp: new Date().toISOString() };\n    }\n    \n    /**\n     * Teardown hook for individual test files (optional)\n     * Can be used for per-test integrity checks\n     */\n    async teardownTest(testFilePath) {\n        if (this.config.verboseLogging) {\n            this.log(`Completed test file: ${path.basename(testFilePath)}`);\n        }\n        \n        // Could add per-test integrity checks if needed\n        return { testFile: testFilePath, timestamp: new Date().toISOString() };\n    }\n    \n    /**\n     * Emergency integrity check - can be called manually\n     * Useful for debugging or manual verification\n     */\n    async emergencyIntegrityCheck() {\n        this.log('Performing emergency integrity check');\n        \n        try {\n            if (!this.setupComplete) {\n                throw new Error('Monitoring not initialized - call globalSetup() first');\n            }\n            \n            const result = await this.monitor.checkIntegrity();\n            \n            if (result.violations.length > 0) {\n                this.log('Emergency check found violations', {\n                    violations: result.violations.length,\n                    types: [...new Set(result.violations.map(v => v.type))]\n                }, 'error');\n                \n                // Generate emergency report\n                await this.generateEmergencyReport(result);\n            }\n            \n            return result;\n            \n        } catch (error) {\n            this.log('Emergency integrity check failed', { error: error.message }, 'error');\n            throw error;\n        }\n    }\n    \n    /**\n     * Get monitoring status and statistics\n     */\n    getMonitoringStatus() {\n        return {\n            setupComplete: this.setupComplete,\n            monitoringActive: this.monitor.monitoringActive,\n            testRunData: this.testRunData,\n            config: this.config\n        };\n    }\n    \n    // ========================================================================\n    // PRIVATE METHODS\n    // ========================================================================\n    \n    /**\n     * Generate comprehensive integrity report\n     */\n    async generateIntegrityReport(integrityResult, restoreResult) {\n        try {\n            const report = {\n                testRun: {\n                    startTime: this.testRunData.startTime,\n                    endTime: this.testRunData.endTime,\n                    duration: this.calculateDuration()\n                },\n                integrity: integrityResult,\n                restoration: restoreResult,\n                monitor: this.monitor.generateReport(),\n                recommendations: this.generateRecommendations(integrityResult),\n                timestamp: new Date().toISOString()\n            };\n            \n            // Write report to file\n            const reportPath = path.join(process.cwd(), this.config.reportFile);\n            await fs.promises.mkdir(path.dirname(reportPath), { recursive: true });\n            await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));\n            \n            this.log('Integrity report generated', { reportPath });\n            \n            return report;\n            \n        } catch (error) {\n            this.log('Failed to generate integrity report', { error: error.message }, 'error');\n            throw error;\n        }\n    }\n    \n    /**\n     * Generate emergency report for manual checks\n     */\n    async generateEmergencyReport(integrityResult) {\n        try {\n            const report = {\n                type: 'EMERGENCY_CHECK',\n                timestamp: new Date().toISOString(),\n                integrity: integrityResult,\n                monitor: this.monitor.generateReport()\n            };\n            \n            const reportPath = path.join(process.cwd(), 'development/emergency-integrity-report.json');\n            await fs.promises.mkdir(path.dirname(reportPath), { recursive: true });\n            await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));\n            \n            this.log('Emergency report generated', { reportPath });\n            \n        } catch (error) {\n            this.log('Failed to generate emergency report', { error: error.message }, 'warn');\n        }\n    }\n    \n    /**\n     * Generate recommendations based on violations\n     */\n    generateRecommendations(integrityResult) {\n        const recommendations = [];\n        \n        if (integrityResult.violations.length === 0) {\n            recommendations.push({\n                type: 'SUCCESS',\n                message: 'No integrity violations detected. Node_modules is clean.',\n                priority: 'info'\n            });\n        } else {\n            // Analyze violation patterns\n            const corruptedFiles = integrityResult.violations.filter(v => v.type === 'CHECKSUM_MISMATCH');\n            const unexpectedFiles = integrityResult.violations.filter(v => v.type === 'UNEXPECTED_FILE');\n            \n            if (corruptedFiles.length > 0) {\n                recommendations.push({\n                    type: 'CORRUPTED_FILES',\n                    message: `${corruptedFiles.length} files were corrupted during tests. Consider investigating test isolation.`,\n                    priority: 'high',\n                    files: corruptedFiles.map(v => v.file)\n                });\n            }\n            \n            if (unexpectedFiles.length > 0) {\n                recommendations.push({\n                    type: 'UNEXPECTED_FILES',\n                    message: `${unexpectedFiles.length} unexpected files found. Check for test data leakage.`,\n                    priority: 'medium',\n                    files: unexpectedFiles.map(v => v.file)\n                });\n            }\n            \n            // Critical file specific recommendations\n            const criticalViolations = integrityResult.violations.filter(v => \n                this.monitor.criticalFiles.some(cf => v.file.includes(cf))\n            );\n            \n            if (criticalViolations.length > 0) {\n                recommendations.push({\n                    type: 'CRITICAL_FILES',\n                    message: 'Critical Node.js files were corrupted. This may cause test failures or system instability.',\n                    priority: 'critical',\n                    files: criticalViolations.map(v => v.file)\n                });\n            }\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * Calculate test run duration\n     */\n    calculateDuration() {\n        if (!this.testRunData.startTime || !this.testRunData.endTime) {\n            return null;\n        }\n        \n        const start = new Date(this.testRunData.startTime);\n        const end = new Date(this.testRunData.endTime);\n        return Math.round((end - start) / 1000); // seconds\n    }\n    \n    /**\n     * Log messages with consistent formatting\n     */\n    log(message, data = {}, level = 'info') {\n        const levelEmoji = {\n            info: 'ℹ️',\n            warn: '⚠️',\n            error: '❌'\n        };\n        \n        const prefix = `${levelEmoji[level] || 'ℹ️'} [JestNodeModulesHooks]`;\n        \n        if (Object.keys(data).length > 0) {\n            console.log(`${prefix} ${message}`, data);\n        } else {\n            console.log(`${prefix} ${message}`);\n        }\n    }\n}\n\n// ============================================================================\n// JEST INTEGRATION HELPERS\n// ============================================================================\n\n/**\n * Create Jest global setup function\n */\nfunction createGlobalSetup(options = {}) {\n    return async function jestGlobalSetup() {\n        const hooks = new JestNodeModulesHooks(options);\n        global.__nodeModulesHooks = hooks;\n        return await hooks.globalSetup();\n    };\n}\n\n/**\n * Create Jest global teardown function\n */\nfunction createGlobalTeardown(_options = {}) {\n    return async function jestGlobalTeardown() {\n        if (global.__nodeModulesHooks) {\n            return await global.__nodeModulesHooks.globalTeardown();\n        } else {\n            console.warn('⚠️ Node modules hooks not found - monitoring may not have been setup properly');\n            return { skipped: true, reason: 'hooks_not_found' };\n        }\n    };\n}\n\n/**\n * Create test environment with node modules monitoring\n */\nclass NodeModulesTestEnvironment {\n    constructor(config, context) {\n        this.config = config;\n        this.context = context;\n        this.hooks = new JestNodeModulesHooks(config.projectConfig?.testEnvironmentOptions || {});\n    }\n    \n    async setup() {\n        // Individual test setup if needed\n        if (this.context.testPath) {\n            await this.hooks.setupTest(this.context.testPath);\n        }\n    }\n    \n    async teardown() {\n        // Individual test teardown if needed\n        if (this.context.testPath) {\n            await this.hooks.teardownTest(this.context.testPath);\n        }\n    }\n    \n    getVmContext() {\n        return null; // Use default VM context\n    }\n    \n    async handleTestEvent(event, _state) {\n        // Handle Jest test events if needed\n        switch (event.name) {\n            case 'test_start':\n                // Test started\n                break;\n            case 'test_done':\n                // Test completed\n                break;\n        }\n    }\n}\n\nmodule.exports = {\n    JestNodeModulesHooks,\n    createGlobalSetup,\n    createGlobalTeardown,\n    NodeModulesTestEnvironment\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}