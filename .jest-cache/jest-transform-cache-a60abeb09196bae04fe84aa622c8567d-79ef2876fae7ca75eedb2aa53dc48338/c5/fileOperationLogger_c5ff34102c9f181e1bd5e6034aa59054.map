{"version":3,"names":["cov_2fz3eyhsfu","actualCoverage","fs","s","require","path","FileOperationLogger","constructor","options","b","f","projectRoot","process","cwd","logFile","join","alertFile","auditFile","isTestEnvironment","env","NODE_ENV","JEST_WORKER_ID","undefined","testMode","config","enableRealTimeAlerts","enableAuditTrail","enableThreatDetection","enableConsoleLogging","alertThreshold","maxLogSize","operations","alerts","suspiciousPatterns","Map","sessionId","generateSessionId","startTime","Date","now","criticalPaths","Set","initializeLogger","logDir","dirname","existsSync","mkdirSync","recursive","writeLogHeader","log","criticalPathsCount","length","error","console","message","logOperation","operation","filePath","data","additionalInfo","timestamp","toISOString","normalizedPath","resolve","operationData","id","generateOperationId","relativePath","relative","dataSize","Buffer","byteLength","dataType","detectDataType","stackTrace","captureStackTrace","threatLevel","suspicious","analyzeThreat","push","writeOperationToLog","generateAlert","slice","threats","isCriticalPath","isJsonContamination","isRapidOperationPattern","Math","max","isBinaryCorruption","isPermissionEscalation","isSteganographyAttempt","isTimeBombPattern","alert","generateAlertId","recommendation","generateRecommendation","dataPreview","substring","context","gatherSecurityContext","writeAlert","outputConsoleAlert","recentOperations","filter","op","getTime","similarOperations","sessionDuration","totalOperationsInSession","previousAlerts","recommendations","includes","saveAuditReport","auditReport","endTime","duration","summary","totalOperations","suspiciousOperations","criticalAlerts","a","highThreatAlerts","threatAnalysis","generateThreatAnalysis","generateSessionRecommendations","promises","writeFile","JSON","stringify","operationsCount","alertsCount","some","criticalPath","endsWith","trim","startsWith","contaminationPatterns","pattern","test","_operationData","oneMinuteAgo","match","protectedPaths","protectedPath","steganographyPatterns","timeBombPatterns","trimmed","stack","Error","split","map","line","random","toString","substr","header","pid","version","platform","appendFileSync","logEntry","stats","statSync","size","rotateLogFile","alertEntry","level","file","logLine","emoji","CRITICAL","HIGH","MEDIUM","LOW","forEach","rec","replace","rotatedFile","renameSync","warn","threatCounts","threatLevelCounts","threat","riskScore","calculateRiskScore","topThreats","Object","entries","sort","score","min","keys","module","exports"],"sources":["fileOperationLogger.js"],"sourcesContent":["/**\n * File Operation Logger\n * \n * Comprehensive logging system for tracking all file operations during tests\n * with alert mechanisms for suspicious activities targeting system files.\n * \n * Features:\n * - Complete filesystem operation monitoring\n * - Real-time threat detection and alerting\n * - Detailed audit trail generation\n * - Suspicious activity pattern recognition\n * - Security incident reporting\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass FileOperationLogger {\n    constructor(options = {}) {\n        this.projectRoot = options.projectRoot || process.cwd();\n        this.logFile = path.join(this.projectRoot, 'development/file-operations.log');\n        this.alertFile = path.join(this.projectRoot, 'development/security-alerts.log');\n        this.auditFile = path.join(this.projectRoot, 'development/file-audit.json');\n        \n        // Detect test environment for optimized behavior\n        this.isTestEnvironment = process.env.NODE_ENV === 'test' || \n                                 process.env.JEST_WORKER_ID !== undefined ||\n                                 options.testMode === true;\n        \n        // Configuration with test mode optimizations\n        this.config = {\n            enableRealTimeAlerts: this.isTestEnvironment ? false : (options.enableRealTimeAlerts !== false),\n            enableAuditTrail: this.isTestEnvironment ? false : (options.enableAuditTrail !== false),\n            enableThreatDetection: options.enableThreatDetection !== false,\n            enableConsoleLogging: this.isTestEnvironment ? false : (options.enableConsoleLogging !== false),\n            alertThreshold: options.alertThreshold || 5, // Suspicious operations per minute\n            maxLogSize: options.maxLogSize || 10 * 1024 * 1024, // 10MB\n            ...options.config\n        };\n        \n        // Runtime state\n        this.operations = [];\n        this.alerts = [];\n        this.suspiciousPatterns = new Map();\n        this.sessionId = this.generateSessionId();\n        this.startTime = Date.now();\n        \n        // Define critical system paths that should trigger alerts\n        this.criticalPaths = [\n            'node_modules/exit',\n            'node_modules/jest-worker',\n            'node_modules/jest',\n            '/usr/',\n            '/bin/',\n            '/lib/',\n            '/System/',\n            'package-lock.json',\n            'yarn.lock',\n            '.git/',\n            'node_modules/.bin'\n        ];\n        \n        // Define suspicious operation patterns\n        this.suspiciousPatterns = new Set([\n            'JSON_TO_JS_FILE',          // Writing JSON data to .js files\n            'SYSTEM_FILE_MODIFICATION', // Modifying system files\n            'RAPID_FILE_OPERATIONS',    // Too many operations in short time\n            'BINARY_CORRUPTION',        // Writing binary data to text files\n            'PERMISSION_ESCALATION',    // Attempting to modify protected files\n            'STEGANOGRAPHY_ATTEMPT',    // Hidden data in files\n            'TIME_BOMB_PATTERN'         // Time-based malicious operations\n        ]);\n        \n        this.initializeLogger();\n    }\n    \n    /**\n     * Initialize the logging system\n     */\n    initializeLogger() {\n        try {\n            // Ensure log directory exists\n            const logDir = path.dirname(this.logFile);\n            if (!fs.existsSync(logDir)) {\n                fs.mkdirSync(logDir, { recursive: true });\n            }\n            \n            // Write session header\n            this.writeLogHeader();\n            \n            // Only log initialization in non-test environments\n            if (!this.isTestEnvironment) {\n                this.log('FileOperationLogger initialized', {\n                    sessionId: this.sessionId,\n                    projectRoot: this.projectRoot,\n                    criticalPathsCount: this.criticalPaths.length\n                });\n            }\n            \n        } catch (error) {\n            console.error('Failed to initialize FileOperationLogger:', error.message);\n        }\n    }\n    \n    /**\n     * Log a file operation with threat analysis\n     */\n    logOperation(operation, filePath, data = null, additionalInfo = {}) {\n        const timestamp = new Date().toISOString();\n        const normalizedPath = path.resolve(filePath);\n        \n        const operationData = {\n            id: this.generateOperationId(),\n            sessionId: this.sessionId,\n            timestamp,\n            operation,\n            filePath: normalizedPath,\n            relativePath: path.relative(this.projectRoot, normalizedPath),\n            dataSize: data ? Buffer.byteLength(data, 'utf8') : 0,\n            dataType: this.detectDataType(data),\n            stackTrace: this.captureStackTrace(),\n            threatLevel: 'LOW',\n            suspicious: false,\n            ...additionalInfo\n        };\n        \n        // Perform threat analysis\n        this.analyzeThreat(operationData, data);\n        \n        // Add to operations log\n        this.operations.push(operationData);\n        \n        // Write to log file\n        this.writeOperationToLog(operationData);\n        \n        // Check for alerts\n        if (operationData.suspicious && this.config.enableRealTimeAlerts) {\n            this.generateAlert(operationData, data);\n        }\n        \n        // Cleanup old operations if memory gets too large\n        if (this.operations.length > 10000) {\n            this.operations = this.operations.slice(-5000);\n        }\n        \n        return operationData.id;\n    }\n    \n    /**\n     * Analyze operation for threats and suspicious patterns\n     */\n    analyzeThreat(operationData, data) {\n        const threats = [];\n        \n        // Check if targeting critical system paths\n        if (this.isCriticalPath(operationData.filePath)) {\n            threats.push('SYSTEM_FILE_MODIFICATION');\n            operationData.threatLevel = 'HIGH';\n        }\n        \n        // Check for JSON contamination attempts\n        if (this.isJsonContamination(operationData, data)) {\n            threats.push('JSON_TO_JS_FILE');\n            operationData.threatLevel = 'CRITICAL';\n        }\n        \n        // Check for rapid operation patterns\n        if (this.isRapidOperationPattern(operationData)) {\n            threats.push('RAPID_FILE_OPERATIONS');\n            operationData.threatLevel = Math.max(operationData.threatLevel, 'MEDIUM');\n        }\n        \n        // Check for binary corruption attempts\n        if (this.isBinaryCorruption(operationData, data)) {\n            threats.push('BINARY_CORRUPTION');\n            operationData.threatLevel = 'HIGH';\n        }\n        \n        // Check for permission escalation attempts\n        if (this.isPermissionEscalation(operationData)) {\n            threats.push('PERMISSION_ESCALATION');\n            operationData.threatLevel = 'HIGH';\n        }\n        \n        // Check for steganography attempts\n        if (this.isSteganographyAttempt(operationData, data)) {\n            threats.push('STEGANOGRAPHY_ATTEMPT');\n            operationData.threatLevel = 'MEDIUM';\n        }\n        \n        // Check for time bomb patterns\n        if (this.isTimeBombPattern(operationData, data)) {\n            threats.push('TIME_BOMB_PATTERN');\n            operationData.threatLevel = 'CRITICAL';\n        }\n        \n        operationData.threats = threats;\n        operationData.suspicious = threats.length > 0;\n        \n        // Update threat level based on number of threats\n        if (threats.length >= 3) {\n            operationData.threatLevel = 'CRITICAL';\n        } else if (threats.length >= 2) {\n            operationData.threatLevel = 'HIGH';\n        }\n    }\n    \n    /**\n     * Generate security alert for suspicious operation\n     */\n    generateAlert(operationData, data) {\n        const alert = {\n            id: this.generateAlertId(),\n            sessionId: this.sessionId,\n            timestamp: new Date().toISOString(),\n            threatLevel: operationData.threatLevel,\n            operation: operationData,\n            threats: operationData.threats,\n            recommendation: this.generateRecommendation(operationData),\n            dataPreview: data ? data.substring(0, 200) + '...' : null,\n            context: this.gatherSecurityContext(operationData)\n        };\n        \n        this.alerts.push(alert);\n        \n        // Write alert to file\n        this.writeAlert(alert);\n        \n        // Console alert for immediate attention\n        this.outputConsoleAlert(alert);\n        \n        return alert.id;\n    }\n    \n    /**\n     * Generate security context for alert\n     */\n    gatherSecurityContext(operationData) {\n        const recentOperations = this.operations\n            .filter(op => Date.now() - new Date(op.timestamp).getTime() < 60000) // Last minute\n            .length;\n            \n        const similarOperations = this.operations\n            .filter(op => \n                op.operation === operationData.operation &&\n                Date.now() - new Date(op.timestamp).getTime() < 300000 // Last 5 minutes\n            ).length;\n            \n        return {\n            recentOperations,\n            similarOperations,\n            sessionDuration: Date.now() - this.startTime,\n            totalOperationsInSession: this.operations.length,\n            previousAlerts: this.alerts.length\n        };\n    }\n    \n    /**\n     * Generate recommendation based on threat analysis\n     */\n    generateRecommendation(operationData) {\n        const recommendations = [];\n        \n        if (operationData.threats.includes('SYSTEM_FILE_MODIFICATION')) {\n            recommendations.push('Immediately verify the integrity of system files');\n            recommendations.push('Consider restoring from backup if corruption detected');\n        }\n        \n        if (operationData.threats.includes('JSON_TO_JS_FILE')) {\n            recommendations.push('Check for JSON contamination in JavaScript files');\n            recommendations.push('Restore original file contents from backup');\n        }\n        \n        if (operationData.threats.includes('RAPID_FILE_OPERATIONS')) {\n            recommendations.push('Investigate potential automated attack or malware');\n            recommendations.push('Monitor system resources for unusual activity');\n        }\n        \n        if (operationData.threats.includes('PERMISSION_ESCALATION')) {\n            recommendations.push('Verify file permissions and access controls');\n            recommendations.push('Check for unauthorized privilege elevation');\n        }\n        \n        if (operationData.threatLevel === 'CRITICAL') {\n            recommendations.push('IMMEDIATE ACTION REQUIRED: Stop all test execution');\n            recommendations.push('Perform full system integrity check');\n            recommendations.push('Consider isolating the system from network');\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * Save comprehensive audit report\n     */\n    async saveAuditReport() {\n        if (!this.config.enableAuditTrail) {\n            return;\n        }\n        \n        try {\n            const auditReport = {\n                sessionId: this.sessionId,\n                startTime: new Date(this.startTime).toISOString(),\n                endTime: new Date().toISOString(),\n                duration: Date.now() - this.startTime,\n                summary: {\n                    totalOperations: this.operations.length,\n                    suspiciousOperations: this.operations.filter(op => op.suspicious).length,\n                    alerts: this.alerts.length,\n                    criticalAlerts: this.alerts.filter(a => a.threatLevel === 'CRITICAL').length,\n                    highThreatAlerts: this.alerts.filter(a => a.threatLevel === 'HIGH').length\n                },\n                operations: this.operations,\n                alerts: this.alerts,\n                threatAnalysis: this.generateThreatAnalysis(),\n                recommendations: this.generateSessionRecommendations()\n            };\n            \n            await fs.promises.writeFile(this.auditFile, JSON.stringify(auditReport, null, 2));\n            \n            this.log('Audit report saved', {\n                auditFile: this.auditFile,\n                operationsCount: this.operations.length,\n                alertsCount: this.alerts.length\n            });\n            \n        } catch (error) {\n            this.log('Failed to save audit report', { error: error.message }, 'error');\n        }\n    }\n    \n    // ========================================================================\n    // THREAT DETECTION METHODS\n    // ========================================================================\n    \n    /**\n     * Check if path is critical system path\n     */\n    isCriticalPath(filePath) {\n        return this.criticalPaths.some(criticalPath => \n            filePath.includes(criticalPath)\n        );\n    }\n    \n    /**\n     * Detect JSON contamination attempts\n     */\n    isJsonContamination(operationData, data) {\n        if (!data || typeof data !== 'string') {\n            return false;\n        }\n        \n        // Check if writing JSON-like data to JavaScript files\n        if (operationData.filePath.endsWith('.js') && \n            (data.trim().startsWith('{') || data.trim().startsWith('['))) {\n            return true;\n        }\n        \n        // Check for specific contamination patterns\n        const contaminationPatterns = [\n            /\"tasks\":\\s*\\[/,\n            /\"project\":\\s*\"/,\n            /\"execution_count\":/,\n            /\"review_strikes\":/\n        ];\n        \n        return contaminationPatterns.some(pattern => pattern.test(data));\n    }\n    \n    /**\n     * Detect rapid operation patterns\n     */\n    isRapidOperationPattern(_operationData) {\n        const oneMinuteAgo = Date.now() - 60000;\n        const recentOperations = this.operations.filter(op => \n            new Date(op.timestamp).getTime() > oneMinuteAgo\n        );\n        \n        return recentOperations.length > this.config.alertThreshold;\n    }\n    \n    /**\n     * Detect binary corruption attempts\n     */\n    isBinaryCorruption(operationData, data) {\n        if (!data || typeof data !== 'string') {\n            return false;\n        }\n        \n        // Check for binary data in text files\n        if (operationData.filePath.match(/\\.(js|json|md|txt|log)$/)) {\n            // Look for null bytes or high-byte characters\n            if (data.includes('\\0') || /[\\x80-\\xFF]/.test(data)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Detect permission escalation attempts\n     */\n    isPermissionEscalation(operationData) {\n        // Check if attempting to write to protected directories\n        const protectedPaths = [\n            '/usr/bin',\n            '/usr/lib',\n            '/System',\n            'node_modules/.bin'\n        ];\n        \n        return protectedPaths.some(protectedPath => \n            operationData.filePath.includes(protectedPath)\n        );\n    }\n    \n    /**\n     * Detect steganography attempts\n     */\n    isSteganographyAttempt(operationData, data) {\n        if (!data || typeof data !== 'string') {\n            return false;\n        }\n        \n        // Look for hidden data patterns\n        const steganographyPatterns = [\n            /<!--.*-->/s,  // HTML comments with suspicious content\n            /\\/\\*.*\\*\\//s, // Block comments with unusual content\n            /\\u200B|\\u200C|\\u200D|\\uFEFF/,  // Zero-width characters\n            /\\x20{10,}/  // Excessive whitespace\n        ];\n        \n        return steganographyPatterns.some(pattern => pattern.test(data));\n    }\n    \n    /**\n     * Detect time bomb patterns\n     */\n    isTimeBombPattern(operationData, data) {\n        if (!data || typeof data !== 'string') {\n            return false;\n        }\n        \n        // Look for time-based trigger patterns\n        const timeBombPatterns = [\n            /setTimeout.*\\d{4,}/,  // Long timeouts\n            /setInterval.*\\d{4,}/, // Long intervals\n            /Date\\.now\\(\\).*[+\\-*/].*\\d{6,}/, // Date calculations\n            /new Date.*202[4-9]/, // Future dates\n            /process\\.nextTick.*setTimeout/ // Nested async patterns\n        ];\n        \n        return timeBombPatterns.some(pattern => pattern.test(data));\n    }\n    \n    // ========================================================================\n    // UTILITY METHODS\n    // ========================================================================\n    \n    /**\n     * Detect data type from content\n     */\n    detectDataType(data) {\n        if (!data) return 'empty';\n        if (typeof data !== 'string') return 'binary';\n        \n        const trimmed = data.trim();\n        if (trimmed.startsWith('{') && trimmed.endsWith('}')) return 'json';\n        if (trimmed.startsWith('[') && trimmed.endsWith(']')) return 'json_array';\n        if (trimmed.includes('function') || trimmed.includes('=>')) return 'javascript';\n        if (trimmed.includes('<html') || trimmed.includes('<!DOCTYPE')) return 'html';\n        if (/^[\\w-]+:/.test(trimmed)) return 'yaml';\n        \n        return 'text';\n    }\n    \n    /**\n     * Capture stack trace for operation source\n     */\n    captureStackTrace() {\n        const stack = new Error().stack;\n        return stack ? stack.split('\\n').slice(2, 6).map(line => line.trim()) : [];\n    }\n    \n    /**\n     * Generate unique session ID\n     */\n    generateSessionId() {\n        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Generate unique operation ID\n     */\n    generateOperationId() {\n        return `op_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    }\n    \n    /**\n     * Generate unique alert ID\n     */\n    generateAlertId() {\n        return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    }\n    \n    /**\n     * Write log header\n     */\n    writeLogHeader() {\n        const header = `\n=================================================================\nFILE OPERATION LOGGER SESSION\n=================================================================\nSession ID: ${this.sessionId}\nStart Time: ${new Date().toISOString()}\nProject Root: ${this.projectRoot}\nProcess ID: ${process.pid}\nNode Version: ${process.version}\nPlatform: ${process.platform}\n=================================================================\n\n`;\n        fs.appendFileSync(this.logFile, header);\n    }\n    \n    /**\n     * Write operation to log file\n     */\n    writeOperationToLog(operationData) {\n        try {\n            const logEntry = `[${operationData.timestamp}] ${operationData.operation} | ${operationData.relativePath} | ${operationData.threatLevel} | ${operationData.suspicious ? 'SUSPICIOUS' : 'CLEAN'}\\n`;\n            \n            // Check log file size and rotate if necessary\n            if (fs.existsSync(this.logFile)) {\n                const stats = fs.statSync(this.logFile);\n                if (stats.size > this.config.maxLogSize) {\n                    this.rotateLogFile();\n                }\n            }\n            \n            fs.appendFileSync(this.logFile, logEntry);\n        } catch (error) {\n            console.error('Failed to write operation to log:', error.message);\n        }\n    }\n    \n    /**\n     * Write security alert\n     */\n    writeAlert(alert) {\n        try {\n            const alertEntry = {\n                timestamp: alert.timestamp,\n                level: alert.threatLevel,\n                threats: alert.threats,\n                file: alert.operation.relativePath,\n                recommendation: alert.recommendation\n            };\n            \n            const logLine = JSON.stringify(alertEntry) + '\\n';\n            fs.appendFileSync(this.alertFile, logLine);\n        } catch (error) {\n            console.error('Failed to write alert:', error.message);\n        }\n    }\n    \n    /**\n     * Output console alert for immediate attention\n     */\n    outputConsoleAlert(alert) {\n        const emoji = {\n            CRITICAL: '🚨',\n            HIGH: '⚠️',\n            MEDIUM: '⚠️',\n            LOW: 'ℹ️'\n        };\n        \n        console.log(`\\n${emoji[alert.threatLevel]} SECURITY ALERT [${alert.threatLevel}]`);\n        console.log(`Operation: ${alert.operation.operation}`);\n        console.log(`File: ${alert.operation.relativePath}`);\n        console.log(`Threats: ${alert.threats.join(', ')}`);\n        console.log(`Recommendations:`);\n        alert.recommendation.forEach(rec => console.log(`  • ${rec}`));\n        console.log('');\n    }\n    \n    /**\n     * Rotate log file when it gets too large\n     */\n    rotateLogFile() {\n        try {\n            const timestamp = new Date().toISOString().replace(/:/g, '-');\n            const rotatedFile = this.logFile.replace('.log', `-${timestamp}.log`);\n            fs.renameSync(this.logFile, rotatedFile);\n        } catch (error) {\n            console.warn('Failed to rotate log file:', error.message);\n        }\n    }\n    \n    /**\n     * Generate threat analysis summary\n     */\n    generateThreatAnalysis() {\n        const threatCounts = {};\n        const threatLevelCounts = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0 };\n        \n        this.operations.forEach(op => {\n            threatLevelCounts[op.threatLevel]++;\n            if (op.threats) {\n                op.threats.forEach(threat => {\n                    threatCounts[threat] = (threatCounts[threat] || 0) + 1;\n                });\n            }\n        });\n        \n        return {\n            threatCounts,\n            threatLevelCounts,\n            riskScore: this.calculateRiskScore(),\n            topThreats: Object.entries(threatCounts)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 5)\n        };\n    }\n    \n    /**\n     * Calculate overall risk score for session\n     */\n    calculateRiskScore() {\n        let score = 0;\n        \n        this.operations.forEach(op => {\n            switch (op.threatLevel) {\n                case 'CRITICAL': score += 10; break;\n                case 'HIGH': score += 5; break;\n                case 'MEDIUM': score += 2; break;\n                case 'LOW': score += 1; break;\n            }\n        });\n        \n        return Math.min(100, score); // Cap at 100\n    }\n    \n    /**\n     * Generate session recommendations\n     */\n    generateSessionRecommendations() {\n        const recommendations = [];\n        const riskScore = this.calculateRiskScore();\n        \n        if (riskScore > 50) {\n            recommendations.push('HIGH RISK SESSION: Perform full security audit');\n            recommendations.push('Review all file modifications for malicious content');\n            recommendations.push('Consider reverting to known-good backup');\n        } else if (riskScore > 20) {\n            recommendations.push('Moderate risk detected: Review suspicious operations');\n            recommendations.push('Verify integrity of critical system files');\n        } else {\n            recommendations.push('Low risk session: Standard monitoring sufficient');\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * Simple logging method\n     */\n    log(message, data = {}, level = 'info') {\n        // Only log to console if console logging is enabled\n        if (this.config.enableConsoleLogging) {\n            if (level === 'error') {\n                console.error(`[FileOperationLogger] ${message}`, data);\n            } else {\n                console.log(`[FileOperationLogger] ${message}`, Object.keys(data).length > 0 ? data : '');\n            }\n        }\n    }\n}\n\nmodule.exports = FileOperationLogger;"],"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","ignoreList":[]}