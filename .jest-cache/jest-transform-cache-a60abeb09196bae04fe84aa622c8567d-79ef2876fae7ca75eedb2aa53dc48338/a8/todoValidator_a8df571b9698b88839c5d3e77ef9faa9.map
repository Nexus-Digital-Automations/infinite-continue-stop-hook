{"version":3,"names":["cov_upm2dq486","actualCoverage","fs","s","require","path","TodoValidator","constructor","f","validModes","validStatuses","validPriorities","requiredFields","root","task","subtask","errors","fixes","validateAndSanitize","data","filePath","b","sanitizedData","JSON","parse","stringify","_validateRootStructure","_validateTasks","_validateReviewStrikes","_validateFileReferences","_validateUniqueIds","_validateDependencies","isValid","length","summary","_generateSummary","error","push","type","message","severity","autoFixable","validateJsonSyntax","jsonString","parsed","repaired","_attemptJsonRepair","success","description","automated","position","_extractErrorPosition","forEach","field","defaultValue","_getDefaultValue","value","project","String","Array","isArray","tasks","review_strikes","Math","max","min","parseInt","strikes_completed_last_run","Boolean","current_task_index","index","_validateSingleTask","inProgressTasks","filter","t","status","slice","id","_allTasks","_getTaskDefaultValue","Date","now","includes","mode","oldMode","oldStatus","subtasks","_validateSubtasks","arrayField","parentTaskId","_getSubtaskDefaultValue","priority","reviewTasks","is_review_task","strike_number","indexOf","todoPath","projectDir","dirname","important_files","invalidFiles","file","fullPath","resolve","existsSync","join","files","ids","Set","duplicates","has","add","taskIds","map","dependencies","validDeps","dep","test","replace","errorMessage","match","defaults","last_mode","prompt","requires_research","title","success_criteria","estimate","totalErrors","totalFixes","criticalErrors","e","autoFixedIssues","manualFixesRequired","module","exports"],"sources":["todoValidator.js"],"sourcesContent":["/**\n * TODO.json Validator & Sanitizer\n * \n * Provides comprehensive validation and sanitization for TODO.json files\n * with automatic error detection and correction capabilities.\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass TodoValidator {\n    constructor() {\n        this.validModes = ['DEVELOPMENT', 'TESTING', 'DEBUGGING', 'REFACTORING', 'DOCUMENTATION', 'RESEARCH', 'REVIEWER', 'TASK_CREATION'];\n        this.validStatuses = ['pending', 'in_progress', 'completed'];\n        this.validPriorities = ['low', 'medium', 'high'];\n        this.requiredFields = {\n            root: ['project', 'tasks', 'review_strikes', 'strikes_completed_last_run', 'current_task_index'],\n            task: ['id', 'mode', 'description', 'status'],\n            subtask: ['id', 'title', 'description', 'mode', 'priority', 'status']\n        };\n        this.errors = [];\n        this.fixes = [];\n    }\n\n    /**\n     * Validates and sanitizes TODO.json data\n     * @param {Object} data - The TODO.json data to validate\n     * @param {string} filePath - Path to the TODO.json file for context\n     * @returns {Object} Validation result with sanitized data and error/fix reports\n     */\n    validateAndSanitize(data, filePath = '') {\n        this.errors = [];\n        this.fixes = [];\n        \n        try {\n            // Deep clone to avoid mutating original\n            const sanitizedData = JSON.parse(JSON.stringify(data));\n            \n            // Validate root structure\n            this._validateRootStructure(sanitizedData);\n            \n            // Validate and sanitize tasks\n            this._validateTasks(sanitizedData);\n            \n            // Validate review strike system\n            this._validateReviewStrikes(sanitizedData);\n            \n            // Validate file references\n            this._validateFileReferences(sanitizedData, filePath);\n            \n            // Check for duplicate IDs\n            this._validateUniqueIds(sanitizedData);\n            \n            // Validate task dependencies\n            this._validateDependencies(sanitizedData);\n            \n            return {\n                isValid: this.errors.length === 0,\n                data: sanitizedData,\n                errors: this.errors,\n                fixes: this.fixes,\n                summary: this._generateSummary()\n            };\n            \n        } catch (error) {\n            this.errors.push({\n                type: 'CRITICAL_ERROR',\n                message: `Validation failed: ${error.message}`,\n                severity: 'critical',\n                autoFixable: false\n            });\n            \n            return {\n                isValid: false,\n                data: null,\n                errors: this.errors,\n                fixes: this.fixes,\n                summary: this._generateSummary()\n            };\n        }\n    }\n\n    /**\n     * Validates JSON syntax and attempts repairs\n     * @param {string} jsonString - The JSON string to validate\n     * @returns {Object} Parse result with repaired JSON if possible\n     */\n    validateJsonSyntax(jsonString) {\n        try {\n            const parsed = JSON.parse(jsonString);\n            return { isValid: true, data: parsed, repaired: false };\n        } catch (error) {\n            // Attempt basic JSON repairs\n            const repaired = this._attemptJsonRepair(jsonString, error);\n            if (repaired.success) {\n                this.fixes.push({\n                    type: 'JSON_SYNTAX_REPAIR',\n                    message: `Repaired JSON syntax: ${repaired.description}`,\n                    automated: true\n                });\n                return { isValid: true, data: repaired.data, repaired: true };\n            }\n            \n            this.errors.push({\n                type: 'JSON_SYNTAX_ERROR',\n                message: `Invalid JSON syntax: ${error.message}`,\n                severity: 'critical',\n                autoFixable: false,\n                position: this._extractErrorPosition(error.message)\n            });\n            \n            return { isValid: false, data: null, repaired: false };\n        }\n    }\n\n    /**\n     * Validates root structure and adds missing required fields\n     */\n    _validateRootStructure(data) {\n        this.requiredFields.root.forEach(field => {\n            if (!(field in data)) {\n                const defaultValue = this._getDefaultValue(field);\n                data[field] = defaultValue;\n                this.fixes.push({\n                    type: 'MISSING_FIELD_ADDED',\n                    message: `Added missing field '${field}' with default value`,\n                    field,\n                    value: defaultValue,\n                    automated: true\n                });\n            }\n        });\n\n        // Validate data types\n        if (typeof data.project !== 'string') {\n            data.project = String(data.project || 'unnamed-project');\n            this.fixes.push({\n                type: 'TYPE_CORRECTION',\n                message: 'Corrected project field to string type',\n                automated: true\n            });\n        }\n\n        if (!Array.isArray(data.tasks)) {\n            data.tasks = [];\n            this.fixes.push({\n                type: 'TYPE_CORRECTION',\n                message: 'Corrected tasks field to array type',\n                automated: true\n            });\n        }\n\n        if (typeof data.review_strikes !== 'number' || data.review_strikes < 0 || data.review_strikes > 3) {\n            data.review_strikes = Math.max(0, Math.min(3, parseInt(data.review_strikes) || 0));\n            this.fixes.push({\n                type: 'VALUE_CORRECTION',\n                message: `Corrected review_strikes to valid range (0-3)`,\n                automated: true\n            });\n        }\n\n        if (typeof data.strikes_completed_last_run !== 'boolean') {\n            data.strikes_completed_last_run = Boolean(data.strikes_completed_last_run);\n            this.fixes.push({\n                type: 'TYPE_CORRECTION',\n                message: 'Corrected strikes_completed_last_run to boolean type',\n                automated: true\n            });\n        }\n\n        if (typeof data.current_task_index !== 'number' || data.current_task_index < 0) {\n            data.current_task_index = 0;\n            this.fixes.push({\n                type: 'VALUE_CORRECTION',\n                message: 'Corrected current_task_index to valid value',\n                automated: true\n            });\n        }\n    }\n\n    /**\n     * Validates and sanitizes all tasks\n     */\n    _validateTasks(data) {\n        if (!Array.isArray(data.tasks)) return;\n\n        // Validate each task, replacing invalid ones with a placeholder or processing valid ones\n        data.tasks.forEach((task, index) => {\n            if (typeof task !== 'object' || task === null) {\n                this.errors.push({\n                    type: 'INVALID_TASK_TYPE',\n                    message: `Task at index ${index} is not a valid object`,\n                    severity: 'high',\n                    autoFixable: false\n                });\n                // Keep the invalid task slot but don't process it further\n                return;\n            }\n            \n            this._validateSingleTask(task, index, data.tasks);\n        });\n\n        // Ensure at most one task is in_progress (only check valid task objects)\n        const inProgressTasks = data.tasks.filter(t => t && typeof t === 'object' && t.status === 'in_progress');\n        if (inProgressTasks.length > 1) {\n            inProgressTasks.slice(1).forEach(task => {\n                task.status = 'pending';\n                this.fixes.push({\n                    type: 'STATUS_CORRECTION',\n                    message: `Changed task ${task.id} from in_progress to pending (only one task can be in_progress)`,\n                    automated: true\n                });\n            });\n        }\n    }\n\n    /**\n     * Validates a single task\n     */\n    _validateSingleTask(task, index, _allTasks) {\n\n        // Validate required fields\n        this.requiredFields.task.forEach(field => {\n            if (!(field in task)) {\n                const defaultValue = this._getTaskDefaultValue(field, task);\n                task[field] = defaultValue;\n                this.fixes.push({\n                    type: field === 'id' ? 'ID_CORRECTION' : 'MISSING_TASK_FIELD',\n                    message: field === 'id' ? `Generated ID for task at index ${index}` : `Added missing field '${field}' to task ${task.id || index}`,\n                    field,\n                    value: defaultValue,\n                    automated: true\n                });\n            }\n        });\n\n        // Validate task ID\n        if (!task.id || typeof task.id !== 'string') {\n            task.id = task.id ? String(task.id) : `task-${Date.now()}`;\n            this.fixes.push({\n                type: 'ID_CORRECTION',\n                message: `Generated/corrected ID for task at index ${index}`,\n                automated: true\n            });\n        }\n\n        // Validate mode\n        if (!this.validModes.includes(task.mode)) {\n            const oldMode = task.mode;\n            task.mode = 'DEVELOPMENT';\n            this.fixes.push({\n                type: 'MODE_CORRECTION',\n                message: `Changed invalid mode '${oldMode}' to 'DEVELOPMENT' for task ${task.id}`,\n                automated: true\n            });\n        }\n\n        // Validate status\n        if (!this.validStatuses.includes(task.status)) {\n            const oldStatus = task.status;\n            task.status = 'pending';\n            this.fixes.push({\n                type: 'STATUS_CORRECTION',\n                message: `Changed invalid status '${oldStatus}' to 'pending' for task ${task.id}`,\n                automated: true\n            });\n        }\n\n        // Validate description\n        if (!task.description || typeof task.description !== 'string') {\n            task.description = task.description ? String(task.description) : 'No description provided';\n            this.fixes.push({\n                type: 'DESCRIPTION_CORRECTION',\n                message: `Added/corrected description for task ${task.id}`,\n                automated: true\n            });\n        }\n\n        // Validate subtasks\n        if (task.subtasks) {\n            this._validateSubtasks(task.subtasks, task.id);\n        }\n\n        // Validate arrays\n        ['dependencies', 'important_files'].forEach(arrayField => {\n            if (task[arrayField] && !Array.isArray(task[arrayField])) {\n                task[arrayField] = [];\n                this.fixes.push({\n                    type: 'ARRAY_CORRECTION',\n                    message: `Corrected ${arrayField} to array type for task ${task.id}`,\n                    automated: true\n                });\n            }\n        });\n    }\n\n    /**\n     * Validates subtasks array\n     */\n    _validateSubtasks(subtasks, parentTaskId) {\n        if (!Array.isArray(subtasks)) return;\n\n        subtasks.forEach((subtask, index) => {\n            if (typeof subtask !== 'object' || subtask === null) {\n                this.errors.push({\n                    type: 'INVALID_SUBTASK_TYPE',\n                    message: `Subtask at index ${index} in task ${parentTaskId} is not a valid object`,\n                    severity: 'medium',\n                    autoFixable: false\n                });\n                return;\n            }\n\n            // Validate required subtask fields\n            this.requiredFields.subtask.forEach(field => {\n                if (!(field in subtask)) {\n                    const defaultValue = this._getSubtaskDefaultValue(field, subtask);\n                    subtask[field] = defaultValue;\n                    this.fixes.push({\n                        type: 'MISSING_SUBTASK_FIELD',\n                        message: `Added missing field '${field}' to subtask in task ${parentTaskId}`,\n                        automated: true\n                    });\n                }\n            });\n\n            // Validate subtask status and priority\n            if (!this.validStatuses.includes(subtask.status)) {\n                subtask.status = 'pending';\n                this.fixes.push({\n                    type: 'SUBTASK_STATUS_CORRECTION',\n                    message: `Corrected invalid status for subtask ${subtask.id} in task ${parentTaskId}`,\n                    automated: true\n                });\n            }\n\n            if (!this.validPriorities.includes(subtask.priority)) {\n                subtask.priority = 'medium';\n                this.fixes.push({\n                    type: 'SUBTASK_PRIORITY_CORRECTION',\n                    message: `Corrected invalid priority for subtask ${subtask.id} in task ${parentTaskId}`,\n                    automated: true\n                });\n            }\n        });\n    }\n\n    /**\n     * Validates review strike system\n     */\n    _validateReviewStrikes(data) {\n        const reviewTasks = data.tasks.filter(t => t && typeof t === 'object' && (t.is_review_task || t.mode === 'REVIEWER'));\n        \n        // Ensure review tasks have proper structure\n        reviewTasks.forEach(task => {\n            if (!task.strike_number || typeof task.strike_number !== 'number') {\n                task.strike_number = reviewTasks.indexOf(task) + 1;\n                this.fixes.push({\n                    type: 'REVIEW_STRIKE_NUMBER_ADDED',\n                    message: `Added strike_number to review task ${task.id}`,\n                    automated: true\n                });\n            }\n\n            if (!task.is_review_task) {\n                task.is_review_task = true;\n                this.fixes.push({\n                    type: 'REVIEW_TASK_FLAG_ADDED',\n                    message: `Added is_review_task flag to task ${task.id}`,\n                    automated: true\n                });\n            }\n        });\n    }\n\n    /**\n     * Validates file references in tasks\n     */\n    _validateFileReferences(data, todoPath) {\n        if (!todoPath) return;\n        \n        const projectDir = path.dirname(todoPath);\n        \n        data.tasks.forEach(task => {\n            if (!task || typeof task !== 'object') return; // Skip invalid tasks\n            if (task.important_files && Array.isArray(task.important_files)) {\n                const invalidFiles = task.important_files.filter(file => {\n                    const fullPath = path.resolve(projectDir, file);\n                    return !fs.existsSync(fullPath) && !file.includes('*');\n                });\n                \n                if (invalidFiles.length > 0) {\n                    this.errors.push({\n                        type: 'MISSING_IMPORTANT_FILES',\n                        message: `Task ${task.id} references missing files: ${invalidFiles.join(', ')}`,\n                        severity: 'medium',\n                        autoFixable: false,\n                        files: invalidFiles\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * Validates unique task IDs\n     */\n    _validateUniqueIds(data) {\n        const ids = new Set();\n        const duplicates = [];\n        \n        data.tasks.forEach((task, index) => {\n            if (!task || typeof task !== 'object') return; // Skip invalid tasks\n            \n            if (ids.has(task.id)) {\n                duplicates.push({ id: task.id, index });\n                task.id = `${task.id}-dup-${index}`;\n                this.fixes.push({\n                    type: 'DUPLICATE_ID_RESOLVED',\n                    message: `Resolved duplicate ID by renaming task to ${task.id}`,\n                    automated: true\n                });\n            } else {\n                ids.add(task.id);\n            }\n        });\n    }\n\n    /**\n     * Validates task dependencies\n     */\n    _validateDependencies(data) {\n        const taskIds = new Set(data.tasks.filter(t => t && typeof t === 'object').map(t => t.id));\n        \n        data.tasks.forEach(task => {\n            if (!task || typeof task !== 'object') return; // Skip invalid tasks\n            if (task.dependencies && Array.isArray(task.dependencies)) {\n                const validDeps = task.dependencies.filter(dep => {\n                    if (taskIds.has(dep) || dep.includes('*') || dep.includes('.')) {\n                        return true;\n                    }\n                    this.errors.push({\n                        type: 'INVALID_DEPENDENCY',\n                        message: `Task ${task.id} has invalid dependency: ${dep}`,\n                        severity: 'medium',\n                        autoFixable: false\n                    });\n                    return false;\n                });\n                \n                if (validDeps.length !== task.dependencies.length) {\n                    task.dependencies = validDeps;\n                    this.fixes.push({\n                        type: 'DEPENDENCY_CLEANUP',\n                        message: `Removed invalid dependencies from task ${task.id}`,\n                        automated: true\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * Attempts to repair common JSON syntax errors\n     */\n    _attemptJsonRepair(jsonString, error) {\n        let repaired = jsonString;\n        let description = '';\n\n        // Fix trailing commas - detect by pattern in string, not just error message\n        if (error.message.includes('trailing comma') || /,(\\s*[}\\]])/.test(jsonString)) {\n            repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n            description = 'Removed trailing commas';\n        }\n\n        // Fix unescaped quotes in strings\n        if (error.message.includes('Unterminated string')) {\n            repaired = repaired.replace(/([^\\\\])\"/g, '$1\\\\\"');\n            description = 'Escaped quotes in strings';\n        }\n\n        // Try parsing the repaired JSON\n        try {\n            const parsed = JSON.parse(repaired);\n            return { success: true, data: parsed, description };\n        } catch {\n            return { success: false, description: 'Could not repair JSON' };\n        }\n    }\n\n    /**\n     * Extracts error position from JSON parser error message\n     */\n    _extractErrorPosition(errorMessage) {\n        const match = errorMessage.match(/position (\\d+)/);\n        return match ? parseInt(match[1]) : null;\n    }\n\n    /**\n     * Gets default value for root-level fields\n     */\n    _getDefaultValue(field) {\n        const defaults = {\n            project: 'unnamed-project',\n            tasks: [],\n            review_strikes: 0,\n            strikes_completed_last_run: false,\n            current_task_index: 0,\n            last_mode: null\n        };\n        return defaults[field];\n    }\n\n    /**\n     * Gets default value for task fields\n     */\n    _getTaskDefaultValue(field, task) {\n        const defaults = {\n            id: `task-${Date.now()}`,\n            mode: 'DEVELOPMENT',\n            description: 'No description provided',\n            status: 'pending',\n            prompt: task.description || 'No prompt provided',\n            dependencies: [],\n            important_files: [],\n            requires_research: false,\n            subtasks: []\n        };\n        return defaults[field];\n    }\n\n    /**\n     * Gets default value for subtask fields\n     */\n    _getSubtaskDefaultValue(field, subtask) {\n        const defaults = {\n            id: `subtask-${Date.now()}`,\n            title: subtask.description || 'Untitled subtask',\n            description: 'No description provided',\n            mode: 'DEVELOPMENT',\n            priority: 'medium',\n            status: 'pending',\n            success_criteria: [],\n            dependencies: [],\n            estimate: '2 hours'\n        };\n        return defaults[field];\n    }\n\n    /**\n     * Generates validation summary\n     */\n    _generateSummary() {\n        return {\n            totalErrors: this.errors.length,\n            totalFixes: this.fixes.length,\n            criticalErrors: this.errors.filter(e => e.severity === 'critical').length,\n            autoFixedIssues: this.fixes.filter(f => f.automated).length,\n            manualFixesRequired: this.errors.filter(e => !e.autoFixable).length\n        };\n    }\n}\n\nmodule.exports = TodoValidator;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,EAAE;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,aAAa,CAAC;EAChBC,WAAWA,CAAA,EAAG;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACV,IAAI,CAACM,UAAU,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,UAAU,EAAE,UAAU,EAAE,eAAe,CAAC;IAAC;IAAAT,aAAA,GAAAG,CAAA;IACnI,IAAI,CAACO,aAAa,GAAG,CAAC,SAAS,EAAE,aAAa,EAAE,WAAW,CAAC;IAAC;IAAAV,aAAA,GAAAG,CAAA;IAC7D,IAAI,CAACQ,eAAe,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;IAAC;IAAAX,aAAA,GAAAG,CAAA;IACjD,IAAI,CAACS,cAAc,GAAG;MAClBC,IAAI,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,gBAAgB,EAAE,4BAA4B,EAAE,oBAAoB,CAAC;MAChGC,IAAI,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,CAAC;MAC7CC,OAAO,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ;IACxE,CAAC;IAAC;IAAAf,aAAA,GAAAG,CAAA;IACF,IAAI,CAACa,MAAM,GAAG,EAAE;IAAC;IAAAhB,aAAA,GAAAG,CAAA;IACjB,IAAI,CAACc,KAAK,GAAG,EAAE;EACnB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmBA,CAACC,IAAI,EAAEC,QAAQ;EAAA;EAAA,CAAApB,aAAA,GAAAqB,CAAA,UAAG,EAAE,GAAE;IAAA;IAAArB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACrC,IAAI,CAACa,MAAM,GAAG,EAAE;IAAC;IAAAhB,aAAA,GAAAG,CAAA;IACjB,IAAI,CAACc,KAAK,GAAG,EAAE;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEhB,IAAI;MACA;MACA,MAAMmB,aAAa;MAAA;MAAA,CAAAtB,aAAA,GAAAG,CAAA,QAAGoB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACN,IAAI,CAAC,CAAC;;MAEtD;MAAA;MAAAnB,aAAA,GAAAG,CAAA;MACA,IAAI,CAACuB,sBAAsB,CAACJ,aAAa,CAAC;;MAE1C;MAAA;MAAAtB,aAAA,GAAAG,CAAA;MACA,IAAI,CAACwB,cAAc,CAACL,aAAa,CAAC;;MAElC;MAAA;MAAAtB,aAAA,GAAAG,CAAA;MACA,IAAI,CAACyB,sBAAsB,CAACN,aAAa,CAAC;;MAE1C;MAAA;MAAAtB,aAAA,GAAAG,CAAA;MACA,IAAI,CAAC0B,uBAAuB,CAACP,aAAa,EAAEF,QAAQ,CAAC;;MAErD;MAAA;MAAApB,aAAA,GAAAG,CAAA;MACA,IAAI,CAAC2B,kBAAkB,CAACR,aAAa,CAAC;;MAEtC;MAAA;MAAAtB,aAAA,GAAAG,CAAA;MACA,IAAI,CAAC4B,qBAAqB,CAACT,aAAa,CAAC;MAAC;MAAAtB,aAAA,GAAAG,CAAA;MAE1C,OAAO;QACH6B,OAAO,EAAE,IAAI,CAAChB,MAAM,CAACiB,MAAM,KAAK,CAAC;QACjCd,IAAI,EAAEG,aAAa;QACnBN,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBiB,OAAO,EAAE,IAAI,CAACC,gBAAgB,CAAC;MACnC,CAAC;IAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAApC,aAAA,GAAAG,CAAA;MACZ,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;QACbC,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE,sBAAsBH,KAAK,CAACG,OAAO,EAAE;QAC9CC,QAAQ,EAAE,UAAU;QACpBC,WAAW,EAAE;MACjB,CAAC,CAAC;MAAC;MAAAzC,aAAA,GAAAG,CAAA;MAEH,OAAO;QACH6B,OAAO,EAAE,KAAK;QACdb,IAAI,EAAE,IAAI;QACVH,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBiB,OAAO,EAAE,IAAI,CAACC,gBAAgB,CAAC;MACnC,CAAC;IACL;EACJ;;EAEA;AACJ;AACA;AACA;AACA;EACIO,kBAAkBA,CAACC,UAAU,EAAE;IAAA;IAAA3C,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC3B,IAAI;MACA,MAAMyC,MAAM;MAAA;MAAA,CAAA5C,aAAA,GAAAG,CAAA,QAAGoB,IAAI,CAACC,KAAK,CAACmB,UAAU,CAAC;MAAC;MAAA3C,aAAA,GAAAG,CAAA;MACtC,OAAO;QAAE6B,OAAO,EAAE,IAAI;QAAEb,IAAI,EAAEyB,MAAM;QAAEC,QAAQ,EAAE;MAAM,CAAC;IAC3D,CAAC,CAAC,OAAOT,KAAK,EAAE;MACZ;MACA,MAAMS,QAAQ;MAAA;MAAA,CAAA7C,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC2C,kBAAkB,CAACH,UAAU,EAAEP,KAAK,CAAC;MAAC;MAAApC,aAAA,GAAAG,CAAA;MAC5D,IAAI0C,QAAQ,CAACE,OAAO,EAAE;QAAA;QAAA/C,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAClB,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,oBAAoB;UAC1BC,OAAO,EAAE,yBAAyBM,QAAQ,CAACG,WAAW,EAAE;UACxDC,SAAS,EAAE;QACf,CAAC,CAAC;QAAC;QAAAjD,aAAA,GAAAG,CAAA;QACH,OAAO;UAAE6B,OAAO,EAAE,IAAI;UAAEb,IAAI,EAAE0B,QAAQ,CAAC1B,IAAI;UAAE0B,QAAQ,EAAE;QAAK,CAAC;MACjE,CAAC;MAAA;MAAA;QAAA7C,aAAA,GAAAqB,CAAA;MAAA;MAAArB,aAAA,GAAAG,CAAA;MAED,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;QACbC,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAE,wBAAwBH,KAAK,CAACG,OAAO,EAAE;QAChDC,QAAQ,EAAE,UAAU;QACpBC,WAAW,EAAE,KAAK;QAClBS,QAAQ,EAAE,IAAI,CAACC,qBAAqB,CAACf,KAAK,CAACG,OAAO;MACtD,CAAC,CAAC;MAAC;MAAAvC,aAAA,GAAAG,CAAA;MAEH,OAAO;QAAE6B,OAAO,EAAE,KAAK;QAAEb,IAAI,EAAE,IAAI;QAAE0B,QAAQ,EAAE;MAAM,CAAC;IAC1D;EACJ;;EAEA;AACJ;AACA;EACInB,sBAAsBA,CAACP,IAAI,EAAE;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzB,IAAI,CAACS,cAAc,CAACC,IAAI,CAACuC,OAAO,CAACC,KAAK,IAAI;MAAA;MAAArD,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACtC,IAAI,EAAEkD,KAAK,IAAIlC,IAAI,CAAC,EAAE;QAAA;QAAAnB,aAAA,GAAAqB,CAAA;QAClB,MAAMiC,YAAY;QAAA;QAAA,CAAAtD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACoD,gBAAgB,CAACF,KAAK,CAAC;QAAC;QAAArD,aAAA,GAAAG,CAAA;QAClDgB,IAAI,CAACkC,KAAK,CAAC,GAAGC,YAAY;QAAC;QAAAtD,aAAA,GAAAG,CAAA;QAC3B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,qBAAqB;UAC3BC,OAAO,EAAE,wBAAwBc,KAAK,sBAAsB;UAC5DA,KAAK;UACLG,KAAK,EAAEF,YAAY;UACnBL,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;;IAEF;IAAA;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAI,OAAOgB,IAAI,CAACsC,OAAO,KAAK,QAAQ,EAAE;MAAA;MAAAzD,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAClCgB,IAAI,CAACsC,OAAO,GAAGC,MAAM;MAAC;MAAA,CAAA1D,aAAA,GAAAqB,CAAA,UAAAF,IAAI,CAACsC,OAAO;MAAA;MAAA,CAAAzD,aAAA,GAAAqB,CAAA,UAAI,iBAAiB,EAAC;MAAC;MAAArB,aAAA,GAAAG,CAAA;MACzD,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAE,wCAAwC;QACjDU,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;IAAArB,aAAA,GAAAG,CAAA;IAED,IAAI,CAACwD,KAAK,CAACC,OAAO,CAACzC,IAAI,CAAC0C,KAAK,CAAC,EAAE;MAAA;MAAA7D,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC5BgB,IAAI,CAAC0C,KAAK,GAAG,EAAE;MAAC;MAAA7D,aAAA,GAAAG,CAAA;MAChB,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAE,qCAAqC;QAC9CU,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;IAAArB,aAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,aAAA,GAAAqB,CAAA,iBAAOF,IAAI,CAAC2C,cAAc,KAAK,QAAQ;IAAA;IAAA,CAAA9D,aAAA,GAAAqB,CAAA,UAAIF,IAAI,CAAC2C,cAAc,GAAG,CAAC;IAAA;IAAA,CAAA9D,aAAA,GAAAqB,CAAA,UAAIF,IAAI,CAAC2C,cAAc,GAAG,CAAC,GAAE;MAAA;MAAA9D,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC/FgB,IAAI,CAAC2C,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC;MAAE;MAAA,CAAAjE,aAAA,GAAAqB,CAAA,UAAA6C,QAAQ,CAAC/C,IAAI,CAAC2C,cAAc,CAAC;MAAA;MAAA,CAAA9D,aAAA,GAAAqB,CAAA,UAAI,CAAC,EAAC,CAAC;MAAC;MAAArB,aAAA,GAAAG,CAAA;MACnF,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE,+CAA+C;QACxDU,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;IAAArB,aAAA,GAAAG,CAAA;IAED,IAAI,OAAOgB,IAAI,CAACgD,0BAA0B,KAAK,SAAS,EAAE;MAAA;MAAAnE,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MACtDgB,IAAI,CAACgD,0BAA0B,GAAGC,OAAO,CAACjD,IAAI,CAACgD,0BAA0B,CAAC;MAAC;MAAAnE,aAAA,GAAAG,CAAA;MAC3E,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAE,sDAAsD;QAC/DU,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;IAAArB,aAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,aAAA,GAAAqB,CAAA,kBAAOF,IAAI,CAACkD,kBAAkB,KAAK,QAAQ;IAAA;IAAA,CAAArE,aAAA,GAAAqB,CAAA,WAAIF,IAAI,CAACkD,kBAAkB,GAAG,CAAC,GAAE;MAAA;MAAArE,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC5EgB,IAAI,CAACkD,kBAAkB,GAAG,CAAC;MAAC;MAAArE,aAAA,GAAAG,CAAA;MAC5B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE,6CAA6C;QACtDU,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;EACL;;EAEA;AACJ;AACA;EACIM,cAAcA,CAACR,IAAI,EAAE;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACjB,IAAI,CAACwD,KAAK,CAACC,OAAO,CAACzC,IAAI,CAAC0C,KAAK,CAAC,EAAE;MAAA;MAAA7D,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAAA;IAAM,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAqB,CAAA;IAAA;;IAEvC;IAAArB,aAAA,GAAAG,CAAA;IACAgB,IAAI,CAAC0C,KAAK,CAACT,OAAO,CAAC,CAACtC,IAAI,EAAEwD,KAAK,KAAK;MAAA;MAAAtE,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAChC;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,kBAAOP,IAAI,KAAK,QAAQ;MAAA;MAAA,CAAAd,aAAA,GAAAqB,CAAA,WAAIP,IAAI,KAAK,IAAI,GAAE;QAAA;QAAAd,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAC3C,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;UACbC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE,iBAAiB+B,KAAK,wBAAwB;UACvD9B,QAAQ,EAAE,MAAM;UAChBC,WAAW,EAAE;QACjB,CAAC,CAAC;QACF;QAAA;QAAAzC,aAAA,GAAAG,CAAA;QACA;MACJ,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAqB,CAAA;MAAA;MAAArB,aAAA,GAAAG,CAAA;MAED,IAAI,CAACoE,mBAAmB,CAACzD,IAAI,EAAEwD,KAAK,EAAEnD,IAAI,CAAC0C,KAAK,CAAC;IACrD,CAAC,CAAC;;IAEF;IACA,MAAMW,eAAe;IAAA;IAAA,CAAAxE,aAAA,GAAAG,CAAA,QAAGgB,IAAI,CAAC0C,KAAK,CAACY,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA1E,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,kCAAAH,aAAA,GAAAqB,CAAA,WAAAqD,CAAC;MAAA;MAAA,CAAA1E,aAAA,GAAAqB,CAAA,WAAI,OAAOqD,CAAC,KAAK,QAAQ;MAAA;MAAA,CAAA1E,aAAA,GAAAqB,CAAA,WAAIqD,CAAC,CAACC,MAAM,KAAK,aAAa;IAAD,CAAC,CAAC;IAAC;IAAA3E,aAAA,GAAAG,CAAA;IACzG,IAAIqE,eAAe,CAACvC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAjC,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC5BqE,eAAe,CAACI,KAAK,CAAC,CAAC,CAAC,CAACxB,OAAO,CAACtC,IAAI,IAAI;QAAA;QAAAd,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QACrCW,IAAI,CAAC6D,MAAM,GAAG,SAAS;QAAC;QAAA3E,aAAA,GAAAG,CAAA;QACxB,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE,gBAAgBzB,IAAI,CAAC+D,EAAE,iEAAiE;UACjG5B,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;EACL;;EAEA;AACJ;AACA;EACIkD,mBAAmBA,CAACzD,IAAI,EAAEwD,KAAK,EAAEQ,SAAS,EAAE;IAAA;IAAA9E,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAExC;IACA,IAAI,CAACS,cAAc,CAACE,IAAI,CAACsC,OAAO,CAACC,KAAK,IAAI;MAAA;MAAArD,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACtC,IAAI,EAAEkD,KAAK,IAAIvC,IAAI,CAAC,EAAE;QAAA;QAAAd,aAAA,GAAAqB,CAAA;QAClB,MAAMiC,YAAY;QAAA;QAAA,CAAAtD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC4E,oBAAoB,CAAC1B,KAAK,EAAEvC,IAAI,CAAC;QAAC;QAAAd,aAAA,GAAAG,CAAA;QAC5DW,IAAI,CAACuC,KAAK,CAAC,GAAGC,YAAY;QAAC;QAAAtD,aAAA,GAAAG,CAAA;QAC3B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAEe,KAAK,KAAK,IAAI;UAAA;UAAA,CAAArD,aAAA,GAAAqB,CAAA,WAAG,eAAe;UAAA;UAAA,CAAArB,aAAA,GAAAqB,CAAA,WAAG,oBAAoB;UAC7DkB,OAAO,EAAEc,KAAK,KAAK,IAAI;UAAA;UAAA,CAAArD,aAAA,GAAAqB,CAAA,WAAG,kCAAkCiD,KAAK,EAAE;UAAA;UAAA,CAAAtE,aAAA,GAAAqB,CAAA,WAAG,wBAAwBgC,KAAK;UAAa;UAAA,CAAArD,aAAA,GAAAqB,CAAA,WAAAP,IAAI,CAAC+D,EAAE;UAAA;UAAA,CAAA7E,aAAA,GAAAqB,CAAA,WAAIiD,KAAK,GAAE;UAClIjB,KAAK;UACLG,KAAK,EAAEF,YAAY;UACnBL,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;;IAEF;IAAA;IAAArB,aAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI,CAAC+D,EAAE;IAAA;IAAA,CAAA7E,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,CAAC+D,EAAE,KAAK,QAAQ,GAAE;MAAA;MAAA7E,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MACzCW,IAAI,CAAC+D,EAAE,GAAG/D,IAAI,CAAC+D,EAAE;MAAA;MAAA,CAAA7E,aAAA,GAAAqB,CAAA,WAAGqC,MAAM,CAAC5C,IAAI,CAAC+D,EAAE,CAAC;MAAA;MAAA,CAAA7E,aAAA,GAAAqB,CAAA,WAAG,QAAQ2D,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAAC;MAAAjF,aAAA,GAAAG,CAAA;MAC3D,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAE,4CAA4C+B,KAAK,EAAE;QAC5DrB,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAI,CAAC,IAAI,CAACM,UAAU,CAACyE,QAAQ,CAACpE,IAAI,CAACqE,IAAI,CAAC,EAAE;MAAA;MAAAnF,aAAA,GAAAqB,CAAA;MACtC,MAAM+D,OAAO;MAAA;MAAA,CAAApF,aAAA,GAAAG,CAAA,QAAGW,IAAI,CAACqE,IAAI;MAAC;MAAAnF,aAAA,GAAAG,CAAA;MAC1BW,IAAI,CAACqE,IAAI,GAAG,aAAa;MAAC;MAAAnF,aAAA,GAAAG,CAAA;MAC1B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,iBAAiB;QACvBC,OAAO,EAAE,yBAAyB6C,OAAO,+BAA+BtE,IAAI,CAAC+D,EAAE,EAAE;QACjF5B,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAI,CAAC,IAAI,CAACO,aAAa,CAACwE,QAAQ,CAACpE,IAAI,CAAC6D,MAAM,CAAC,EAAE;MAAA;MAAA3E,aAAA,GAAAqB,CAAA;MAC3C,MAAMgE,SAAS;MAAA;MAAA,CAAArF,aAAA,GAAAG,CAAA,QAAGW,IAAI,CAAC6D,MAAM;MAAC;MAAA3E,aAAA,GAAAG,CAAA;MAC9BW,IAAI,CAAC6D,MAAM,GAAG,SAAS;MAAC;MAAA3E,aAAA,GAAAG,CAAA;MACxB,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAE,2BAA2B8C,SAAS,2BAA2BvE,IAAI,CAAC+D,EAAE,EAAE;QACjF5B,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI,CAACkC,WAAW;IAAA;IAAA,CAAAhD,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,CAACkC,WAAW,KAAK,QAAQ,GAAE;MAAA;MAAAhD,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC3DW,IAAI,CAACkC,WAAW,GAAGlC,IAAI,CAACkC,WAAW;MAAA;MAAA,CAAAhD,aAAA,GAAAqB,CAAA,WAAGqC,MAAM,CAAC5C,IAAI,CAACkC,WAAW,CAAC;MAAA;MAAA,CAAAhD,aAAA,GAAAqB,CAAA,WAAG,yBAAyB;MAAC;MAAArB,aAAA,GAAAG,CAAA;MAC3F,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;QACZC,IAAI,EAAE,wBAAwB;QAC9BC,OAAO,EAAE,wCAAwCzB,IAAI,CAAC+D,EAAE,EAAE;QAC1D5B,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAjD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAIW,IAAI,CAACwE,QAAQ,EAAE;MAAA;MAAAtF,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MACf,IAAI,CAACoF,iBAAiB,CAACzE,IAAI,CAACwE,QAAQ,EAAExE,IAAI,CAAC+D,EAAE,CAAC;IAClD,CAAC;IAAA;IAAA;MAAA7E,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAACiD,OAAO,CAACoC,UAAU,IAAI;MAAA;MAAAxF,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACtD;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,WAAAP,IAAI,CAAC0E,UAAU,CAAC;MAAA;MAAA,CAAAxF,aAAA,GAAAqB,CAAA,WAAI,CAACsC,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC0E,UAAU,CAAC,CAAC,GAAE;QAAA;QAAAxF,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QACtDW,IAAI,CAAC0E,UAAU,CAAC,GAAG,EAAE;QAAC;QAAAxF,aAAA,GAAAG,CAAA;QACtB,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,aAAaiD,UAAU,2BAA2B1E,IAAI,CAAC+D,EAAE,EAAE;UACpE5B,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIkE,iBAAiBA,CAACD,QAAQ,EAAEG,YAAY,EAAE;IAAA;IAAAzF,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACtC,IAAI,CAACwD,KAAK,CAACC,OAAO,CAAC0B,QAAQ,CAAC,EAAE;MAAA;MAAAtF,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAAA;IAAM,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAqB,CAAA;IAAA;IAAArB,aAAA,GAAAG,CAAA;IAErCmF,QAAQ,CAAClC,OAAO,CAAC,CAACrC,OAAO,EAAEuD,KAAK,KAAK;MAAA;MAAAtE,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACjC;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,kBAAON,OAAO,KAAK,QAAQ;MAAA;MAAA,CAAAf,aAAA,GAAAqB,CAAA,WAAIN,OAAO,KAAK,IAAI,GAAE;QAAA;QAAAf,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QACjD,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;UACbC,IAAI,EAAE,sBAAsB;UAC5BC,OAAO,EAAE,oBAAoB+B,KAAK,YAAYmB,YAAY,wBAAwB;UAClFjD,QAAQ,EAAE,QAAQ;UAClBC,WAAW,EAAE;QACjB,CAAC,CAAC;QAAC;QAAAzC,aAAA,GAAAG,CAAA;QACH;MACJ,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAqB,CAAA;MAAA;;MAED;MAAArB,aAAA,GAAAG,CAAA;MACA,IAAI,CAACS,cAAc,CAACG,OAAO,CAACqC,OAAO,CAACC,KAAK,IAAI;QAAA;QAAArD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QACzC,IAAI,EAAEkD,KAAK,IAAItC,OAAO,CAAC,EAAE;UAAA;UAAAf,aAAA,GAAAqB,CAAA;UACrB,MAAMiC,YAAY;UAAA;UAAA,CAAAtD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACuF,uBAAuB,CAACrC,KAAK,EAAEtC,OAAO,CAAC;UAAC;UAAAf,aAAA,GAAAG,CAAA;UAClEY,OAAO,CAACsC,KAAK,CAAC,GAAGC,YAAY;UAAC;UAAAtD,aAAA,GAAAG,CAAA;UAC9B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;YACZC,IAAI,EAAE,uBAAuB;YAC7BC,OAAO,EAAE,wBAAwBc,KAAK,wBAAwBoC,YAAY,EAAE;YAC5ExC,SAAS,EAAE;UACf,CAAC,CAAC;QACN,CAAC;QAAA;QAAA;UAAAjD,aAAA,GAAAqB,CAAA;QAAA;MACL,CAAC,CAAC;;MAEF;MAAA;MAAArB,aAAA,GAAAG,CAAA;MACA,IAAI,CAAC,IAAI,CAACO,aAAa,CAACwE,QAAQ,CAACnE,OAAO,CAAC4D,MAAM,CAAC,EAAE;QAAA;QAAA3E,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAC9CY,OAAO,CAAC4D,MAAM,GAAG,SAAS;QAAC;QAAA3E,aAAA,GAAAG,CAAA;QAC3B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,2BAA2B;UACjCC,OAAO,EAAE,wCAAwCxB,OAAO,CAAC8D,EAAE,YAAYY,YAAY,EAAE;UACrFxC,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;MAAArB,aAAA,GAAAG,CAAA;MAED,IAAI,CAAC,IAAI,CAACQ,eAAe,CAACuE,QAAQ,CAACnE,OAAO,CAAC4E,QAAQ,CAAC,EAAE;QAAA;QAAA3F,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAClDY,OAAO,CAAC4E,QAAQ,GAAG,QAAQ;QAAC;QAAA3F,aAAA,GAAAG,CAAA;QAC5B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,6BAA6B;UACnCC,OAAO,EAAE,0CAA0CxB,OAAO,CAAC8D,EAAE,YAAYY,YAAY,EAAE;UACvFxC,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIO,sBAAsBA,CAACT,IAAI,EAAE;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IACzB,MAAMoF,WAAW;IAAA;IAAA,CAAA5F,aAAA,GAAAG,CAAA,SAAGgB,IAAI,CAAC0C,KAAK,CAACY,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA1E,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,kCAAAH,aAAA,GAAAqB,CAAA,WAAAqD,CAAC;MAAA;MAAA,CAAA1E,aAAA,GAAAqB,CAAA,WAAI,OAAOqD,CAAC,KAAK,QAAQ;MAAK;MAAA,CAAA1E,aAAA,GAAAqB,CAAA,WAAAqD,CAAC,CAACmB,cAAc;MAAA;MAAA,CAAA7F,aAAA,GAAAqB,CAAA,WAAIqD,CAAC,CAACS,IAAI,KAAK,UAAU,EAAC;IAAD,CAAC,CAAC;;IAErH;IAAA;IAAAnF,aAAA,GAAAG,CAAA;IACAyF,WAAW,CAACxC,OAAO,CAACtC,IAAI,IAAI;MAAA;MAAAd,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACxB;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI,CAACgF,aAAa;MAAA;MAAA,CAAA9F,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,CAACgF,aAAa,KAAK,QAAQ,GAAE;QAAA;QAAA9F,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAC/DW,IAAI,CAACgF,aAAa,GAAGF,WAAW,CAACG,OAAO,CAACjF,IAAI,CAAC,GAAG,CAAC;QAAC;QAAAd,aAAA,GAAAG,CAAA;QACnD,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,4BAA4B;UAClCC,OAAO,EAAE,sCAAsCzB,IAAI,CAAC+D,EAAE,EAAE;UACxD5B,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;MAAArB,aAAA,GAAAG,CAAA;MAED,IAAI,CAACW,IAAI,CAAC+E,cAAc,EAAE;QAAA;QAAA7F,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QACtBW,IAAI,CAAC+E,cAAc,GAAG,IAAI;QAAC;QAAA7F,aAAA,GAAAG,CAAA;QAC3B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,wBAAwB;UAC9BC,OAAO,EAAE,qCAAqCzB,IAAI,CAAC+D,EAAE,EAAE;UACvD5B,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIQ,uBAAuBA,CAACV,IAAI,EAAE6E,QAAQ,EAAE;IAAA;IAAAhG,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACpC,IAAI,CAAC6F,QAAQ,EAAE;MAAA;MAAAhG,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAAA;IAAM,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAqB,CAAA;IAAA;IAEtB,MAAM4E,UAAU;IAAA;IAAA,CAAAjG,aAAA,GAAAG,CAAA,SAAGE,IAAI,CAAC6F,OAAO,CAACF,QAAQ,CAAC;IAAC;IAAAhG,aAAA,GAAAG,CAAA;IAE1CgB,IAAI,CAAC0C,KAAK,CAACT,OAAO,CAACtC,IAAI,IAAI;MAAA;MAAAd,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACvB;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI;MAAA;MAAA,CAAAd,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,KAAK,QAAQ,GAAE;QAAA;QAAAd,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAAA;MAAM,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAqB,CAAA;MAAA,EAAC;MAAArB,aAAA,GAAAG,CAAA;MAC/C;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,WAAAP,IAAI,CAACqF,eAAe;MAAA;MAAA,CAAAnG,aAAA,GAAAqB,CAAA,WAAIsC,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAACqF,eAAe,CAAC,GAAE;QAAA;QAAAnG,aAAA,GAAAqB,CAAA;QAC7D,MAAM+E,YAAY;QAAA;QAAA,CAAApG,aAAA,GAAAG,CAAA,SAAGW,IAAI,CAACqF,eAAe,CAAC1B,MAAM,CAAC4B,IAAI,IAAI;UAAA;UAAArG,aAAA,GAAAQ,CAAA;UACrD,MAAM8F,QAAQ;UAAA;UAAA,CAAAtG,aAAA,GAAAG,CAAA,SAAGE,IAAI,CAACkG,OAAO,CAACN,UAAU,EAAEI,IAAI,CAAC;UAAC;UAAArG,aAAA,GAAAG,CAAA;UAChD,OAAO,2BAAAH,aAAA,GAAAqB,CAAA,YAACnB,EAAE,CAACsG,UAAU,CAACF,QAAQ,CAAC;UAAA;UAAA,CAAAtG,aAAA,GAAAqB,CAAA,WAAI,CAACgF,IAAI,CAACnB,QAAQ,CAAC,GAAG,CAAC;QAC1D,CAAC,CAAC;QAAC;QAAAlF,aAAA,GAAAG,CAAA;QAEH,IAAIiG,YAAY,CAACnE,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAjC,aAAA,GAAAqB,CAAA;UAAArB,aAAA,GAAAG,CAAA;UACzB,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;YACbC,IAAI,EAAE,yBAAyB;YAC/BC,OAAO,EAAE,QAAQzB,IAAI,CAAC+D,EAAE,8BAA8BuB,YAAY,CAACK,IAAI,CAAC,IAAI,CAAC,EAAE;YAC/EjE,QAAQ,EAAE,QAAQ;YAClBC,WAAW,EAAE,KAAK;YAClBiE,KAAK,EAAEN;UACX,CAAC,CAAC;QACN,CAAC;QAAA;QAAA;UAAApG,aAAA,GAAAqB,CAAA;QAAA;MACL,CAAC;MAAA;MAAA;QAAArB,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIS,kBAAkBA,CAACX,IAAI,EAAE;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IACrB,MAAMmG,GAAG;IAAA;IAAA,CAAA3G,aAAA,GAAAG,CAAA,SAAG,IAAIyG,GAAG,CAAC,CAAC;IACrB,MAAMC,UAAU;IAAA;IAAA,CAAA7G,aAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEtBgB,IAAI,CAAC0C,KAAK,CAACT,OAAO,CAAC,CAACtC,IAAI,EAAEwD,KAAK,KAAK;MAAA;MAAAtE,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAChC;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI;MAAA;MAAA,CAAAd,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,KAAK,QAAQ,GAAE;QAAA;QAAAd,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAAA;MAAM,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAqB,CAAA;MAAA,EAAC;MAAArB,aAAA,GAAAG,CAAA;MAE/C,IAAIwG,GAAG,CAACG,GAAG,CAAChG,IAAI,CAAC+D,EAAE,CAAC,EAAE;QAAA;QAAA7E,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAClB0G,UAAU,CAACxE,IAAI,CAAC;UAAEwC,EAAE,EAAE/D,IAAI,CAAC+D,EAAE;UAAEP;QAAM,CAAC,CAAC;QAAC;QAAAtE,aAAA,GAAAG,CAAA;QACxCW,IAAI,CAAC+D,EAAE,GAAG,GAAG/D,IAAI,CAAC+D,EAAE,QAAQP,KAAK,EAAE;QAAC;QAAAtE,aAAA,GAAAG,CAAA;QACpC,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;UACZC,IAAI,EAAE,uBAAuB;UAC7BC,OAAO,EAAE,6CAA6CzB,IAAI,CAAC+D,EAAE,EAAE;UAC/D5B,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC,MAAM;QAAA;QAAAjD,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QACHwG,GAAG,CAACI,GAAG,CAACjG,IAAI,CAAC+D,EAAE,CAAC;MACpB;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACI9C,qBAAqBA,CAACZ,IAAI,EAAE;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IACxB,MAAMwG,OAAO;IAAA;IAAA,CAAAhH,aAAA,GAAAG,CAAA,SAAG,IAAIyG,GAAG,CAACzF,IAAI,CAAC0C,KAAK,CAACY,MAAM,CAACC,CAAC,IAAI;MAAA;MAAA1E,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,kCAAAH,aAAA,GAAAqB,CAAA,WAAAqD,CAAC;MAAA;MAAA,CAAA1E,aAAA,GAAAqB,CAAA,WAAI,OAAOqD,CAAC,KAAK,QAAQ;IAAD,CAAC,CAAC,CAACuC,GAAG,CAACvC,CAAC,IAAI;MAAA;MAAA1E,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAuE,CAAC,CAACG,EAAE;IAAD,CAAC,CAAC,CAAC;IAAC;IAAA7E,aAAA,GAAAG,CAAA;IAE3FgB,IAAI,CAAC0C,KAAK,CAACT,OAAO,CAACtC,IAAI,IAAI;MAAA;MAAAd,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MACvB;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,YAACP,IAAI;MAAA;MAAA,CAAAd,aAAA,GAAAqB,CAAA,WAAI,OAAOP,IAAI,KAAK,QAAQ,GAAE;QAAA;QAAAd,aAAA,GAAAqB,CAAA;QAAArB,aAAA,GAAAG,CAAA;QAAA;MAAM,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAqB,CAAA;MAAA,EAAC;MAAArB,aAAA,GAAAG,CAAA;MAC/C;MAAI;MAAA,CAAAH,aAAA,GAAAqB,CAAA,WAAAP,IAAI,CAACoG,YAAY;MAAA;MAAA,CAAAlH,aAAA,GAAAqB,CAAA,WAAIsC,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAACoG,YAAY,CAAC,GAAE;QAAA;QAAAlH,aAAA,GAAAqB,CAAA;QACvD,MAAM8F,SAAS;QAAA;QAAA,CAAAnH,aAAA,GAAAG,CAAA,SAAGW,IAAI,CAACoG,YAAY,CAACzC,MAAM,CAAC2C,GAAG,IAAI;UAAA;UAAApH,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAG,CAAA;UAC9C;UAAI;UAAA,CAAAH,aAAA,GAAAqB,CAAA,WAAA2F,OAAO,CAACF,GAAG,CAACM,GAAG,CAAC;UAAA;UAAA,CAAApH,aAAA,GAAAqB,CAAA,WAAI+F,GAAG,CAAClC,QAAQ,CAAC,GAAG,CAAC;UAAA;UAAA,CAAAlF,aAAA,GAAAqB,CAAA,WAAI+F,GAAG,CAAClC,QAAQ,CAAC,GAAG,CAAC,GAAE;YAAA;YAAAlF,aAAA,GAAAqB,CAAA;YAAArB,aAAA,GAAAG,CAAA;YAC5D,OAAO,IAAI;UACf,CAAC;UAAA;UAAA;YAAAH,aAAA,GAAAqB,CAAA;UAAA;UAAArB,aAAA,GAAAG,CAAA;UACD,IAAI,CAACa,MAAM,CAACqB,IAAI,CAAC;YACbC,IAAI,EAAE,oBAAoB;YAC1BC,OAAO,EAAE,QAAQzB,IAAI,CAAC+D,EAAE,4BAA4BuC,GAAG,EAAE;YACzD5E,QAAQ,EAAE,QAAQ;YAClBC,WAAW,EAAE;UACjB,CAAC,CAAC;UAAC;UAAAzC,aAAA,GAAAG,CAAA;UACH,OAAO,KAAK;QAChB,CAAC,CAAC;QAAC;QAAAH,aAAA,GAAAG,CAAA;QAEH,IAAIgH,SAAS,CAAClF,MAAM,KAAKnB,IAAI,CAACoG,YAAY,CAACjF,MAAM,EAAE;UAAA;UAAAjC,aAAA,GAAAqB,CAAA;UAAArB,aAAA,GAAAG,CAAA;UAC/CW,IAAI,CAACoG,YAAY,GAAGC,SAAS;UAAC;UAAAnH,aAAA,GAAAG,CAAA;UAC9B,IAAI,CAACc,KAAK,CAACoB,IAAI,CAAC;YACZC,IAAI,EAAE,oBAAoB;YAC1BC,OAAO,EAAE,0CAA0CzB,IAAI,CAAC+D,EAAE,EAAE;YAC5D5B,SAAS,EAAE;UACf,CAAC,CAAC;QACN,CAAC;QAAA;QAAA;UAAAjD,aAAA,GAAAqB,CAAA;QAAA;MACL,CAAC;MAAA;MAAA;QAAArB,aAAA,GAAAqB,CAAA;MAAA;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIyB,kBAAkBA,CAACH,UAAU,EAAEP,KAAK,EAAE;IAAA;IAAApC,aAAA,GAAAQ,CAAA;IAClC,IAAIqC,QAAQ;IAAA;IAAA,CAAA7C,aAAA,GAAAG,CAAA,SAAGwC,UAAU;IACzB,IAAIK,WAAW;IAAA;IAAA,CAAAhD,aAAA,GAAAG,CAAA,SAAG,EAAE;;IAEpB;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,aAAA,GAAAqB,CAAA,WAAAe,KAAK,CAACG,OAAO,CAAC2C,QAAQ,CAAC,gBAAgB,CAAC;IAAA;IAAA,CAAAlF,aAAA,GAAAqB,CAAA,WAAI,aAAa,CAACgG,IAAI,CAAC1E,UAAU,CAAC,GAAE;MAAA;MAAA3C,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC5E0C,QAAQ,GAAGA,QAAQ,CAACyE,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;MAAC;MAAAtH,aAAA,GAAAG,CAAA;MAClD6C,WAAW,GAAG,yBAAyB;IAC3C,CAAC;IAAA;IAAA;MAAAhD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAIiC,KAAK,CAACG,OAAO,CAAC2C,QAAQ,CAAC,qBAAqB,CAAC,EAAE;MAAA;MAAAlF,aAAA,GAAAqB,CAAA;MAAArB,aAAA,GAAAG,CAAA;MAC/C0C,QAAQ,GAAGA,QAAQ,CAACyE,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC;MAAC;MAAAtH,aAAA,GAAAG,CAAA;MAClD6C,WAAW,GAAG,2BAA2B;IAC7C,CAAC;IAAA;IAAA;MAAAhD,aAAA,GAAAqB,CAAA;IAAA;;IAED;IAAArB,aAAA,GAAAG,CAAA;IACA,IAAI;MACA,MAAMyC,MAAM;MAAA;MAAA,CAAA5C,aAAA,GAAAG,CAAA,SAAGoB,IAAI,CAACC,KAAK,CAACqB,QAAQ,CAAC;MAAC;MAAA7C,aAAA,GAAAG,CAAA;MACpC,OAAO;QAAE4C,OAAO,EAAE,IAAI;QAAE5B,IAAI,EAAEyB,MAAM;QAAEI;MAAY,CAAC;IACvD,CAAC,CAAC,MAAM;MAAA;MAAAhD,aAAA,GAAAG,CAAA;MACJ,OAAO;QAAE4C,OAAO,EAAE,KAAK;QAAEC,WAAW,EAAE;MAAwB,CAAC;IACnE;EACJ;;EAEA;AACJ;AACA;EACIG,qBAAqBA,CAACoE,YAAY,EAAE;IAAA;IAAAvH,aAAA,GAAAQ,CAAA;IAChC,MAAMgH,KAAK;IAAA;IAAA,CAAAxH,aAAA,GAAAG,CAAA,SAAGoH,YAAY,CAACC,KAAK,CAAC,gBAAgB,CAAC;IAAC;IAAAxH,aAAA,GAAAG,CAAA;IACnD,OAAOqH,KAAK;IAAA;IAAA,CAAAxH,aAAA,GAAAqB,CAAA,WAAG6C,QAAQ,CAACsD,KAAK,CAAC,CAAC,CAAC,CAAC;IAAA;IAAA,CAAAxH,aAAA,GAAAqB,CAAA,WAAG,IAAI;EAC5C;;EAEA;AACJ;AACA;EACIkC,gBAAgBA,CAACF,KAAK,EAAE;IAAA;IAAArD,aAAA,GAAAQ,CAAA;IACpB,MAAMiH,QAAQ;IAAA;IAAA,CAAAzH,aAAA,GAAAG,CAAA,SAAG;MACbsD,OAAO,EAAE,iBAAiB;MAC1BI,KAAK,EAAE,EAAE;MACTC,cAAc,EAAE,CAAC;MACjBK,0BAA0B,EAAE,KAAK;MACjCE,kBAAkB,EAAE,CAAC;MACrBqD,SAAS,EAAE;IACf,CAAC;IAAC;IAAA1H,aAAA,GAAAG,CAAA;IACF,OAAOsH,QAAQ,CAACpE,KAAK,CAAC;EAC1B;;EAEA;AACJ;AACA;EACI0B,oBAAoBA,CAAC1B,KAAK,EAAEvC,IAAI,EAAE;IAAA;IAAAd,aAAA,GAAAQ,CAAA;IAC9B,MAAMiH,QAAQ;IAAA;IAAA,CAAAzH,aAAA,GAAAG,CAAA,SAAG;MACb0E,EAAE,EAAE,QAAQG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACxBE,IAAI,EAAE,aAAa;MACnBnC,WAAW,EAAE,yBAAyB;MACtC2B,MAAM,EAAE,SAAS;MACjBgD,MAAM;MAAE;MAAA,CAAA3H,aAAA,GAAAqB,CAAA,WAAAP,IAAI,CAACkC,WAAW;MAAA;MAAA,CAAAhD,aAAA,GAAAqB,CAAA,WAAI,oBAAoB;MAChD6F,YAAY,EAAE,EAAE;MAChBf,eAAe,EAAE,EAAE;MACnByB,iBAAiB,EAAE,KAAK;MACxBtC,QAAQ,EAAE;IACd,CAAC;IAAC;IAAAtF,aAAA,GAAAG,CAAA;IACF,OAAOsH,QAAQ,CAACpE,KAAK,CAAC;EAC1B;;EAEA;AACJ;AACA;EACIqC,uBAAuBA,CAACrC,KAAK,EAAEtC,OAAO,EAAE;IAAA;IAAAf,aAAA,GAAAQ,CAAA;IACpC,MAAMiH,QAAQ;IAAA;IAAA,CAAAzH,aAAA,GAAAG,CAAA,SAAG;MACb0E,EAAE,EAAE,WAAWG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC3B4C,KAAK;MAAE;MAAA,CAAA7H,aAAA,GAAAqB,CAAA,WAAAN,OAAO,CAACiC,WAAW;MAAA;MAAA,CAAAhD,aAAA,GAAAqB,CAAA,WAAI,kBAAkB;MAChD2B,WAAW,EAAE,yBAAyB;MACtCmC,IAAI,EAAE,aAAa;MACnBQ,QAAQ,EAAE,QAAQ;MAClBhB,MAAM,EAAE,SAAS;MACjBmD,gBAAgB,EAAE,EAAE;MACpBZ,YAAY,EAAE,EAAE;MAChBa,QAAQ,EAAE;IACd,CAAC;IAAC;IAAA/H,aAAA,GAAAG,CAAA;IACF,OAAOsH,QAAQ,CAACpE,KAAK,CAAC;EAC1B;;EAEA;AACJ;AACA;EACIlB,gBAAgBA,CAAA,EAAG;IAAA;IAAAnC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACf,OAAO;MACH6H,WAAW,EAAE,IAAI,CAAChH,MAAM,CAACiB,MAAM;MAC/BgG,UAAU,EAAE,IAAI,CAAChH,KAAK,CAACgB,MAAM;MAC7BiG,cAAc,EAAE,IAAI,CAAClH,MAAM,CAACyD,MAAM,CAAC0D,CAAC,IAAI;QAAA;QAAAnI,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAgI,CAAC,CAAC3F,QAAQ,KAAK,UAAU;MAAD,CAAC,CAAC,CAACP,MAAM;MACzEmG,eAAe,EAAE,IAAI,CAACnH,KAAK,CAACwD,MAAM,CAACjE,CAAC,IAAI;QAAA;QAAAR,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAK,CAAC,CAACyC,SAAS;MAAD,CAAC,CAAC,CAAChB,MAAM;MAC3DoG,mBAAmB,EAAE,IAAI,CAACrH,MAAM,CAACyD,MAAM,CAAC0D,CAAC,IAAI;QAAA;QAAAnI,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,QAACgI,CAAC,CAAC1F,WAAW;MAAD,CAAC,CAAC,CAACR;IACjE,CAAC;EACL;AACJ;AAAC;AAAAjC,aAAA,GAAAG,CAAA;AAEDmI,MAAM,CAACC,OAAO,GAAGjI,aAAa","ignoreList":[]}