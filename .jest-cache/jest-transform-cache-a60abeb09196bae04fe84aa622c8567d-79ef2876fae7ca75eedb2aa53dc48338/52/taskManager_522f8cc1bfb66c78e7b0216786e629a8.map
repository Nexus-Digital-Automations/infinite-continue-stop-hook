{"version":3,"names":["cov_142b089npg","actualCoverage","fs","s","require","AutoFixer","TaskManager","constructor","todoPath","options","b","f","autoFixer","enableAutoFix","autoFixLevel","validateOnRead","readTodo","existsSync","Error","content","readFileSync","data","JSON","parse","status","getFileStatus","valid","canAutoFix","fixResult","autoFix","success","hasChanges","error","recoveryResult","recoverCorruptedFile","finalData","message","writeTodo","validationResult","validator","validateAndSanitize","isValid","writeResult","recovery","atomicWrite","stringify","getCurrentTask","todoData","tasks","Array","isArray","undefined","find","t","updateTaskStatus","taskId","task","id","addSubtask","parentTaskId","subtask","parentTask","subtasks","push","addImportantFile","filePath","important_files","includes","removeImportantFile","index","indexOf","splice","getResearchReportPath","researchReportExists","reportPath","path","workingDir","process","cwd","absolutePath","resolve","createTask","taskData","randomSuffix","randomValue","Math","random","toString","substr","hrtime","Date","now","importantFiles","successCriteria","success_criteria","mode","researchReportPath","reportCriterion","some","criterion","newTask","title","description","priority","dependencies","estimate","requires_research","created_at","toISOString","getNextMode","last_mode","currentTask","shouldRunReviewer","completedTasks","filter","length","handleStrikeLogic","review_strikes","strikes_completed_last_run","action","performAutoFix","dryRunAutoFix","dryRun","listBackups","listAvailableBackups","restoreFromBackup","backupFile","createBackup","cleanupLegacyBackups","validateTodoFile","errors","type","severity","fixes","summary","totalErrors","totalFixes","criticalErrors","buildDependencyGraph","allTasks","dependencyMap","Map","taskMap","forEach","set","circularDeps","_detectCircularDependencies","dependencyTree","_generateDependencyTree","executionOrder","_calculateExecutionOrder","tree","circularDependencies","stats","totalTasks","tasksWithDependencies","circularIssues","getExecutableTasks","completed","map","every","depId","generateDependencyReport","graph","executable","report","cycle","join","visited","Set","visiting","cycles","visit","has","cycleStart","slice","concat","add","get","delete","from","keys","_dependencyMap","_taskMap","roots","addNode","depth","isLast","prefix","connector","dependents","dependent","isLastDependent","newPrefix","root","order","ready","deps","remaining","phases","_groupByExecutionPhases","size","phase","executeQualityGates","results","result","_executeQualityGate","passed","output","allPassed","r","total","failed","startsWith","_executeCommand","replace","trim","exists","threshold","parseFloat","_checkCoverageThreshold","command","Promise","exec","timeout","stdout","stderr","coveragePath","coverage","totalCoverage","lines","pct","addQualityGate","gateCommand","batchUpdateTasks","updates","update","field","value","queryTasks","filters","hasFile","titleContains","toLowerCase","createTaskFromTemplate","templateType","params","templates","bugDescription","stepsToReproduce","featureName","featureDescription","acceptanceCriteria","targetComponent","refactorDescription","goals","topic","researchDescription","questions","template","Object","trackTaskError","errorInfo","timestamp","context","recoverable","blocking","getErrorSummary","allErrors","taskTitle","errorsByType","_groupErrorsByType","recentErrors","e","blockingTasks","removeTask","initialCount","removeTasks","taskIds","taskExists","grouped","module","exports"],"sources":["taskManager.js"],"sourcesContent":["const fs = require('fs');\nconst AutoFixer = require('./autoFixer');\n\nclass TaskManager {\n    constructor(todoPath, options = {}) {\n        this.todoPath = todoPath;\n        this.autoFixer = new AutoFixer(options.autoFixer || {});\n        this.options = {\n            enableAutoFix: options.enableAutoFix !== false,\n            autoFixLevel: options.autoFixLevel || 'moderate',\n            validateOnRead: options.validateOnRead !== false,\n            ...options\n        };\n    }\n\n    async readTodo() {\n        if (!fs.existsSync(this.todoPath)) {\n            throw new Error(`TODO.json not found at ${this.todoPath}`);\n        }\n\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n\n            // Validate and auto-fix if enabled\n            if (this.options.validateOnRead || this.options.enableAutoFix) {\n                const status = await this.autoFixer.getFileStatus(this.todoPath);\n                \n                if (!status.valid && this.options.enableAutoFix && status.canAutoFix) {\n                    const fixResult = await this.autoFixer.autoFix(this.todoPath, {\n                        autoFixLevel: this.options.autoFixLevel\n                    });\n                    \n                    if (fixResult.success && fixResult.hasChanges) {\n                        // Re-read the fixed file\n                        return JSON.parse(fs.readFileSync(this.todoPath, 'utf8'));\n                    }\n                }\n            }\n\n            return data;\n\n        } catch (error) {\n            if (this.options.enableAutoFix) {\n                // Attempt recovery for corrupted files\n                const recoveryResult = await this.autoFixer.recoverCorruptedFile(this.todoPath);\n                \n                if (recoveryResult.success) {\n                    return recoveryResult.finalData;\n                }\n            }\n            \n            throw new Error(`Failed to read TODO.json: ${error.message}`);\n        }\n    }\n\n    async writeTodo(data) {\n        try {\n            // Validate data before writing if enabled\n            if (this.options.validateOnRead) {\n                const validationResult = this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n                \n                if (!validationResult.isValid && this.options.enableAutoFix) {\n                    data = validationResult.data; // Use the sanitized data\n                }\n            }\n\n            // Use atomic write operation from ErrorRecovery\n            const writeResult = await this.autoFixer.recovery.atomicWrite(\n                this.todoPath,\n                JSON.stringify(data, null, 2),\n                true // Create backup\n            );\n\n            if (!writeResult.success) {\n                throw new Error(`Failed to write TODO.json: ${writeResult.error}`);\n            }\n\n            return writeResult;\n\n        } catch (error) {\n            throw new Error(`Failed to write TODO.json: ${error.message}`);\n        }\n    }\n\n    async getCurrentTask() {\n        const todoData = await this.readTodo();\n        if (!todoData.tasks || !Array.isArray(todoData.tasks)) {\n            return undefined;\n        }\n        return todoData.tasks.find(t => t && (t.status === 'pending' || t.status === 'in_progress'));\n    }\n\n    async updateTaskStatus(taskId, status) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task) {\n            task.status = status;\n            await this.writeTodo(todoData);\n        }\n    }\n\n    async addSubtask(parentTaskId, subtask) {\n        const todoData = await this.readTodo();\n        const parentTask = todoData.tasks.find(t => t.id === parentTaskId);\n        if (parentTask) {\n            if (!parentTask.subtasks) {\n                parentTask.subtasks = [];\n            }\n            parentTask.subtasks.push(subtask);\n            await this.writeTodo(todoData);\n        }\n    }\n\n    async addImportantFile(taskId, filePath) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task) {\n            if (!task.important_files) {\n                task.important_files = [];\n            }\n            // Avoid duplicates\n            if (!task.important_files.includes(filePath)) {\n                task.important_files.push(filePath);\n                await this.writeTodo(todoData);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    async removeImportantFile(taskId, filePath) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task && task.important_files) {\n            const index = task.important_files.indexOf(filePath);\n            if (index !== -1) {\n                task.important_files.splice(index, 1);\n                await this.writeTodo(todoData);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Generates the standardized research report file path for a task\n     * @param {string} taskId - The task ID\n     * @returns {string} The research report file path\n     */\n    getResearchReportPath(taskId) {\n        return `./development/research-reports/research-report-${taskId}.md`;\n    }\n\n    /**\n     * Checks if a research report file exists for the given task ID\n     * @param {string} taskId - The task ID\n     * @returns {boolean} True if the research report file exists\n     */\n    researchReportExists(taskId) {\n        const reportPath = this.getResearchReportPath(taskId);\n        const path = require('path');\n        \n        // Convert relative path to absolute path\n        const workingDir = process.cwd();\n        const absolutePath = path.resolve(workingDir, reportPath);\n        \n        return fs.existsSync(absolutePath);\n    }\n\n    async createTask(taskData) {\n        const todoData = await this.readTodo();\n        \n        // Generate unique task ID with robust fallback mechanisms\n        let randomSuffix;\n        try {\n            const randomValue = Math.random();\n            if (randomValue && typeof randomValue.toString === 'function') {\n                randomSuffix = randomValue.toString(36).substr(2, 9);\n            } else {\n                throw new Error('Math.random returned invalid value');\n            }\n        } catch {\n            // Fallback to process.hrtime for high-resolution time-based uniqueness\n            const hrtime = process.hrtime();\n            randomSuffix = (hrtime[0] * 1000000 + hrtime[1]).toString(36).substr(-9);\n        }\n        const taskId = `task_${Date.now()}_${randomSuffix}`;\n        \n        // Start with provided important_files or empty array\n        let importantFiles = [...(taskData.important_files || [])];\n        let successCriteria = [...(taskData.success_criteria || [])];\n        \n        // For research tasks, automatically add research report path and success criteria\n        if (taskData.mode === 'RESEARCH' || taskData.mode === 'research') {\n            const researchReportPath = this.getResearchReportPath(taskId);\n            \n            // Add research report to important_files if not already present\n            if (!importantFiles.includes(researchReportPath)) {\n                importantFiles.push(researchReportPath);\n            }\n            \n            // Add research report creation to success criteria if not already present\n            const reportCriterion = `Research report created: ${researchReportPath}`;\n            if (!successCriteria.some(criterion => criterion === reportCriterion)) {\n                successCriteria.push(reportCriterion);\n            }\n        }\n        \n        // Create complete task object with required fields\n        const newTask = {\n            id: taskId,\n            title: taskData.title,\n            description: taskData.description,\n            mode: taskData.mode,\n            priority: taskData.priority || 'medium',\n            status: taskData.status || 'pending',\n            dependencies: taskData.dependencies || [],\n            important_files: importantFiles,\n            success_criteria: successCriteria,\n            estimate: taskData.estimate || '',\n            requires_research: taskData.requires_research || false,\n            subtasks: taskData.subtasks || [],\n            created_at: new Date().toISOString()\n        };\n        \n        // Add task to the tasks array\n        todoData.tasks.push(newTask);\n        \n        // Write updated TODO.json\n        await this.writeTodo(todoData);\n        \n        return taskId;\n    }\n\n    async getNextMode(todoData) {\n        // Alternate between TASK_CREATION and task execution\n        if (todoData.last_mode === 'TASK_CREATION' || !todoData.last_mode) {\n            const currentTask = await this.getCurrentTask();\n            return currentTask ? currentTask.mode : 'DEVELOPMENT';\n        }\n        return 'TASK_CREATION';\n    }\n\n    shouldRunReviewer(todoData) {\n        // Check if it's time for a review strike\n        const completedTasks = todoData.tasks.filter(t => \n            t.status === 'completed' && \n            t.mode !== 'REVIEWER'\n        ).length;\n        \n        // Run reviewer every 5 completed tasks\n        return completedTasks > 0 && completedTasks % 5 === 0;\n    }\n\n    handleStrikeLogic(todoData) {\n        // Reset strikes if all 3 were completed in previous run\n        if (todoData.review_strikes === 3 && todoData.strikes_completed_last_run) {\n            todoData.review_strikes = 0;\n            todoData.strikes_completed_last_run = false;\n            return { action: 'reset', message: 'Resetting review strikes to 0 for new cycle' };\n        }\n        \n        // Mark as completed if just finished third strike\n        if (todoData.review_strikes === 3 && !todoData.strikes_completed_last_run) {\n            todoData.strikes_completed_last_run = true;\n            return { action: 'complete', message: 'Third strike completed! Project approved.' };\n        }\n        \n        return { action: 'continue', message: null };\n    }\n\n    /**\n     * Gets detailed status of the TODO.json file\n     * @returns {Object} File status including validation results\n     */\n    async getFileStatus() {\n        return await this.autoFixer.getFileStatus(this.todoPath);\n    }\n\n    /**\n     * Manually triggers auto-fix on the TODO.json file\n     * @param {Object} options - Fix options\n     * @returns {Object} Fix result\n     */\n    async performAutoFix(options = {}) {\n        return await this.autoFixer.autoFix(this.todoPath, options);\n    }\n\n    /**\n     * Performs a dry run to show what would be fixed\n     * @returns {Object} Dry run result\n     */\n    async dryRunAutoFix() {\n        return await this.autoFixer.dryRun(this.todoPath);\n    }\n\n    /**\n     * Lists available backups for the TODO.json file\n     * @returns {Array} List of backup files\n     */\n    async listBackups() {\n        return await this.autoFixer.recovery.listAvailableBackups(this.todoPath);\n    }\n\n    /**\n     * Restores TODO.json from a backup\n     * @param {string} backupFile - Specific backup file to restore (optional)\n     * @returns {Object} Restoration result\n     */\n    async restoreFromBackup(backupFile = null) {\n        return await this.autoFixer.recovery.restoreFromBackup(this.todoPath, backupFile);\n    }\n\n    /**\n     * Creates a manual backup of the current TODO.json file\n     * @returns {Object} Backup creation result\n     */\n    async createBackup() {\n        return await this.autoFixer.recovery.createBackup(this.todoPath);\n    }\n\n    /**\n     * Cleans up legacy backup files in the project root directory\n     * @returns {Object} Cleanup result\n     */\n    async cleanupLegacyBackups() {\n        return await this.autoFixer.recovery.cleanupLegacyBackups(this.todoPath);\n    }\n\n    /**\n     * Validates the current TODO.json without making changes\n     * @returns {Object} Validation result\n     */\n    async validateTodoFile() {\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n            return this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n        } catch (error) {\n            return {\n                isValid: false,\n                errors: [{ \n                    type: 'FILE_READ_ERROR', \n                    message: error.message, \n                    severity: 'critical' \n                }],\n                fixes: [],\n                summary: { totalErrors: 1, totalFixes: 0, criticalErrors: 1 }\n            };\n        }\n    }\n\n    /**\n     * Build dependency graph from tasks and return text-based visualization\n     * @param {Array} tasks - Array of task objects (optional, uses current tasks if not provided)\n     * @returns {Object} Dependency analysis with text tree\n     */\n    async buildDependencyGraph(tasks = null) {\n        const todoData = await this.readTodo();\n        const allTasks = tasks || todoData.tasks || [];\n        \n        // Build dependency map\n        const dependencyMap = new Map();\n        const taskMap = new Map();\n        \n        // Index all tasks\n        allTasks.forEach(task => {\n            taskMap.set(task.id, task);\n            dependencyMap.set(task.id, task.dependencies || []);\n        });\n        \n        // Detect circular dependencies\n        const circularDeps = this._detectCircularDependencies(dependencyMap);\n        \n        // Generate text tree visualization\n        const dependencyTree = this._generateDependencyTree(allTasks, dependencyMap, taskMap);\n        \n        // Calculate execution order\n        const executionOrder = this._calculateExecutionOrder(dependencyMap, circularDeps);\n        \n        return {\n            tree: dependencyTree,\n            circularDependencies: circularDeps,\n            executionOrder: executionOrder,\n            stats: {\n                totalTasks: allTasks.length,\n                tasksWithDependencies: allTasks.filter(t => t.dependencies && t.dependencies.length > 0).length,\n                circularIssues: circularDeps.length\n            }\n        };\n    }\n\n    /**\n     * Get tasks that can be executed (no unmet dependencies)\n     * @returns {Array} Tasks ready for execution\n     */\n    async getExecutableTasks() {\n        const todoData = await this.readTodo();\n        const tasks = todoData.tasks || [];\n        const completed = tasks.filter(t => t.status === 'completed').map(t => t.id);\n        \n        return tasks.filter(task => {\n            if (task.status === 'completed') return false;\n            if (!task.dependencies || task.dependencies.length === 0) return true;\n            return task.dependencies.every(depId => completed.includes(depId));\n        });\n    }\n\n    /**\n     * Generate dependency status report in markdown format\n     * @returns {string} Markdown dependency report\n     */\n    async generateDependencyReport() {\n        const graph = await this.buildDependencyGraph();\n        const executable = await this.getExecutableTasks();\n        \n        let report = '# Task Dependency Report\\n\\n';\n        \n        report += '## Dependency Tree\\n```\\n';\n        report += graph.tree;\n        report += '\\n```\\n\\n';\n        \n        if (graph.circularDependencies.length > 0) {\n            report += '## ⚠️ Circular Dependencies\\n';\n            graph.circularDependencies.forEach(cycle => {\n                report += `- ${cycle.join(' → ')}\\n`;\n            });\n            report += '\\n';\n        }\n        \n        report += '## 🚀 Ready to Execute\\n';\n        executable.forEach(task => {\n            report += `- **${task.title}** (${task.id}) - ${task.priority} priority\\n`;\n        });\n        \n        report += '\\n## 📊 Statistics\\n';\n        report += `- Total Tasks: ${graph.stats.totalTasks}\\n`;\n        report += `- Tasks with Dependencies: ${graph.stats.tasksWithDependencies}\\n`;\n        report += `- Executable Now: ${executable.length}\\n`;\n        report += `- Circular Issues: ${graph.stats.circularIssues}\\n`;\n        \n        return report;\n    }\n\n    /**\n     * Private method to detect circular dependencies\n     */\n    _detectCircularDependencies(dependencyMap) {\n        const visited = new Set();\n        const visiting = new Set();\n        const cycles = [];\n        \n        const visit = (taskId, path = []) => {\n            if (visiting.has(taskId)) {\n                // Found a cycle\n                const cycleStart = path.indexOf(taskId);\n                cycles.push(path.slice(cycleStart).concat([taskId]));\n                return;\n            }\n            \n            if (visited.has(taskId)) return;\n            \n            visiting.add(taskId);\n            const dependencies = dependencyMap.get(taskId) || [];\n            \n            dependencies.forEach(depId => {\n                visit(depId, [...path, taskId]);\n            });\n            \n            visiting.delete(taskId);\n            visited.add(taskId);\n        };\n        \n        Array.from(dependencyMap.keys()).forEach(taskId => {\n            if (!visited.has(taskId)) {\n                visit(taskId);\n            }\n        });\n        \n        return cycles;\n    }\n\n    /**\n     * Private method to generate ASCII dependency tree\n     */\n    _generateDependencyTree(tasks, _dependencyMap, _taskMap) {\n        const roots = tasks.filter(task => \n            !task.dependencies || task.dependencies.length === 0\n        );\n        \n        let tree = '';\n        const visited = new Set();\n        \n        const addNode = (task, depth = 0, isLast = true, prefix = '') => {\n            if (visited.has(task.id)) {\n                tree += `${prefix}${isLast ? '└── ' : '├── '}${task.title} (${task.id}) [CIRCULAR]\\n`;\n                return;\n            }\n            \n            visited.add(task.id);\n            const connector = isLast ? '└── ' : '├── ';\n            const status = task.status === 'completed' ? '✅' : \n                          task.status === 'in_progress' ? '🔄' : '⏳';\n            \n            tree += `${prefix}${connector}${status} ${task.title} (${task.id})\\n`;\n            \n            // Find tasks that depend on this one\n            const dependents = tasks.filter(t => \n                t.dependencies && t.dependencies.includes(task.id)\n            );\n            \n            dependents.forEach((dependent, index) => {\n                const isLastDependent = index === dependents.length - 1;\n                const newPrefix = prefix + (isLast ? '    ' : '│   ');\n                addNode(dependent, depth + 1, isLastDependent, newPrefix);\n            });\n        };\n        \n        if (roots.length === 0) {\n            tree = 'No root tasks found (all tasks have dependencies)\\n';\n        } else {\n            roots.forEach((root, index) => {\n                addNode(root, 0, index === roots.length - 1);\n            });\n        }\n        \n        return tree;\n    }\n\n    /**\n     * Private method to calculate optimal execution order\n     */\n    _calculateExecutionOrder(dependencyMap, circularDeps) {\n        if (circularDeps.length > 0) {\n            return { error: 'Cannot calculate execution order due to circular dependencies', cycles: circularDeps };\n        }\n        \n        const order = [];\n        const completed = new Set();\n        const tasks = Array.from(dependencyMap.keys());\n        \n        while (order.length < tasks.length) {\n            const ready = tasks.filter(taskId => {\n                if (completed.has(taskId)) return false;\n                const deps = dependencyMap.get(taskId) || [];\n                return deps.every(depId => completed.has(depId));\n            });\n            \n            if (ready.length === 0) {\n                // Should not happen if no circular deps, but safety check\n                const remaining = tasks.filter(taskId => !completed.has(taskId));\n                return { error: 'Cannot resolve dependencies', remaining };\n            }\n            \n            ready.forEach(taskId => {\n                order.push(taskId);\n                completed.add(taskId);\n            });\n        }\n        \n        return { order, phases: this._groupByExecutionPhases(order, dependencyMap) };\n    }\n\n    /**\n     * Private method to group tasks by execution phases (tasks that can run in parallel)\n     */\n    _groupByExecutionPhases(order, dependencyMap) {\n        const phases = [];\n        const completed = new Set();\n        \n        while (completed.size < order.length) {\n            const phase = [];\n            \n            order.forEach(taskId => {\n                if (completed.has(taskId)) return;\n                \n                const deps = dependencyMap.get(taskId) || [];\n                if (deps.every(depId => completed.has(depId))) {\n                    phase.push(taskId);\n                }\n            });\n            \n            if (phase.length === 0) break; // Safety check\n            \n            phases.push(phase);\n            phase.forEach(taskId => completed.add(taskId));\n        }\n        \n        return phases;\n    }\n\n    /**\n     * Convert success criteria to executable quality gates\n     * @param {string} taskId - Task ID\n     * @returns {Object} Quality gate execution results\n     */\n    async executeQualityGates(taskId) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task || !task.success_criteria) {\n            return { success: false, error: 'Task not found or no success criteria' };\n        }\n        \n        const results = [];\n        \n        for (const criterion of task.success_criteria) {\n            const result = await this._executeQualityGate(criterion);\n            results.push({\n                criterion,\n                passed: result.success,\n                output: result.output,\n                error: result.error\n            });\n        }\n        \n        const allPassed = results.every(r => r.passed);\n        \n        return {\n            success: allPassed,\n            results,\n            summary: {\n                total: results.length,\n                passed: results.filter(r => r.passed).length,\n                failed: results.filter(r => !r.passed).length\n            }\n        };\n    }\n\n    /**\n     * Private method to execute a single quality gate\n     */\n    async _executeQualityGate(criterion) {\n        try {\n            // Detect different types of quality gates\n            if (criterion.startsWith('npm run ') || criterion.startsWith('node ')) {\n                // Execute npm/node commands\n                return await this._executeCommand(criterion);\n            } else if (criterion.startsWith('file exists: ')) {\n                // Check file existence\n                const filePath = criterion.replace('file exists: ', '').trim();\n                const exists = fs.existsSync(filePath);\n                return { success: exists, output: `File ${exists ? 'exists' : 'missing'}: ${filePath}` };\n            } else if (criterion.startsWith('coverage > ')) {\n                // Check coverage threshold\n                const threshold = parseFloat(criterion.replace('coverage > ', '').replace('%', ''));\n                return await this._checkCoverageThreshold(threshold);\n            } else if (criterion.startsWith('tests pass')) {\n                // Run tests\n                return await this._executeCommand('npm test');\n            } else if (criterion.startsWith('lint passes')) {\n                // Run linting\n                return await this._executeCommand('npm run lint');\n            } else {\n                // Default: treat as manual verification needed\n                return { \n                    success: false, \n                    output: 'Manual verification required',\n                    error: `Cannot auto-execute: ${criterion}` \n                };\n            }\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Execute a shell command for quality gates\n     */\n    async _executeCommand(command) {\n        return new Promise((resolve) => {\n            const { exec } = require('child_process');\n            exec(command, { timeout: 300000 }, (error, stdout, stderr) => {\n                if (error) {\n                    resolve({ \n                        success: false, \n                        output: stdout || '', \n                        error: stderr || error.message \n                    });\n                } else {\n                    resolve({ \n                        success: true, \n                        output: stdout || 'Command completed successfully' \n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Check if coverage meets threshold\n     */\n    async _checkCoverageThreshold(threshold) {\n        try {\n            // Try to read coverage summary\n            const coveragePath = './coverage/coverage-summary.json';\n            if (!fs.existsSync(coveragePath)) {\n                return { \n                    success: false, \n                    error: 'Coverage report not found. Run npm run test:coverage first.' \n                };\n            }\n            \n            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));\n            const totalCoverage = coverage.total && coverage.total.lines ? coverage.total.lines.pct : 0;\n            \n            return {\n                success: totalCoverage >= threshold,\n                output: `Coverage: ${totalCoverage}% (threshold: ${threshold}%)`,\n                actualCoverage: totalCoverage\n            };\n        } catch (error) {\n            return { success: false, error: `Coverage check failed: ${error.message}` };\n        }\n    }\n\n    /**\n     * Add executable quality gate to task\n     * @param {string} taskId - Task ID\n     * @param {string} gateCommand - Executable command or check\n     * @returns {boolean} Success status\n     */\n    async addQualityGate(taskId, gateCommand) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task) return false;\n        \n        if (!task.success_criteria) {\n            task.success_criteria = [];\n        }\n        \n        if (!task.success_criteria.includes(gateCommand)) {\n            task.success_criteria.push(gateCommand);\n            await this.writeTodo(todoData);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Batch update multiple tasks\n     * @param {Array} updates - Array of {taskId, field, value} objects\n     * @returns {Object} Batch update results\n     */\n    async batchUpdateTasks(updates) {\n        const todoData = await this.readTodo();\n        const results = { success: [], failed: [] };\n        \n        updates.forEach(update => {\n            const task = todoData.tasks.find(t => t.id === update.taskId);\n            if (task && update.field && update.value !== undefined) {\n                task[update.field] = update.value;\n                results.success.push(update.taskId);\n            } else {\n                results.failed.push({ taskId: update.taskId, error: 'Task not found or invalid update' });\n            }\n        });\n        \n        if (results.success.length > 0) {\n            await this.writeTodo(todoData);\n        }\n        \n        return results;\n    }\n\n    /**\n     * Filter and query tasks with various criteria\n     * @param {Object} filters - Filter criteria\n     * @returns {Array} Filtered tasks\n     */\n    async queryTasks(filters = {}) {\n        const todoData = await this.readTodo();\n        let tasks = todoData.tasks || [];\n        \n        // Apply filters\n        if (filters.status) {\n            tasks = tasks.filter(t => t.status === filters.status);\n        }\n        \n        if (filters.priority) {\n            tasks = tasks.filter(t => t.priority === filters.priority);\n        }\n        \n        if (filters.mode) {\n            tasks = tasks.filter(t => t.mode === filters.mode);\n        }\n        \n        if (filters.hasFile) {\n            tasks = tasks.filter(t => \n                t.important_files && t.important_files.some(f => f.includes(filters.hasFile))\n            );\n        }\n        \n        if (filters.titleContains) {\n            tasks = tasks.filter(t => \n                t.title.toLowerCase().includes(filters.titleContains.toLowerCase())\n            );\n        }\n        \n        return tasks;\n    }\n\n    /**\n     * Create task from common templates\n     * @param {string} templateType - Template type\n     * @param {Object} params - Template parameters\n     * @returns {string} Created task ID\n     */\n    async createTaskFromTemplate(templateType, params = {}) {\n        const templates = {\n            'bug-fix': {\n                title: `Fix bug: ${params.bugDescription || 'Untitled bug'}`,\n                description: `Investigate and fix the following bug:\\n\\n${params.bugDescription || 'Bug description needed'}\\n\\nSteps to reproduce:\\n${params.stepsToReproduce || '1. Steps needed'}`,\n                mode: 'DEVELOPMENT',\n                priority: params.priority || 'high',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'Bug no longer reproducible'\n                ]\n            },\n            \n            'feature': {\n                title: `Implement feature: ${params.featureName || 'Untitled feature'}`,\n                description: `Implement the following feature:\\n\\n${params.featureDescription || 'Feature description needed'}\\n\\nAcceptance criteria:\\n${params.acceptanceCriteria || '- Criteria needed'}`,\n                mode: 'DEVELOPMENT',\n                priority: params.priority || 'medium',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'coverage > 80%',\n                    'Feature meets acceptance criteria'\n                ]\n            },\n            \n            'refactor': {\n                title: `Refactor: ${params.targetComponent || 'Untitled component'}`,\n                description: `Refactor the following component:\\n\\n${params.refactorDescription || 'Refactor description needed'}\\n\\nGoals:\\n${params.goals || '- Improve maintainability'}`,\n                mode: 'REFACTORING',\n                priority: params.priority || 'medium',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'coverage maintained',\n                    'No breaking changes'\n                ]\n            },\n            \n            'research': {\n                title: `Research: ${params.topic || 'Untitled research'}`,\n                description: `Research the following topic:\\n\\n${params.researchDescription || 'Research description needed'}\\n\\nQuestions to answer:\\n${params.questions || '- Questions needed'}`,\n                mode: 'RESEARCH',\n                priority: params.priority || 'medium',\n                requires_research: true\n            }\n        };\n        \n        const template = templates[templateType];\n        if (!template) {\n            throw new Error(`Unknown template type: ${templateType}. Available: ${Object.keys(templates).join(', ')}`);\n        }\n        \n        return await this.createTask({ ...template, ...params });\n    }\n\n    /**\n     * Enhanced error tracking for task failures\n     * @param {string} taskId - Task ID\n     * @param {Object} errorInfo - Error information\n     */\n    async trackTaskError(taskId, errorInfo) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task) return false;\n        \n        if (!task.errors) {\n            task.errors = [];\n        }\n        \n        task.errors.push({\n            timestamp: new Date().toISOString(),\n            type: errorInfo.type || 'unknown',\n            message: errorInfo.message || '',\n            context: errorInfo.context || {},\n            recoverable: errorInfo.recoverable || false\n        });\n        \n        // Also update status if this is a blocking error\n        if (errorInfo.blocking) {\n            task.status = 'blocked';\n        }\n        \n        await this.writeTodo(todoData);\n        return true;\n    }\n\n    /**\n     * Get error summary for debugging\n     * @param {string} taskId - Task ID (optional, gets all errors if not provided)\n     * @returns {Object} Error summary\n     */\n    async getErrorSummary(taskId = null) {\n        const todoData = await this.readTodo();\n        \n        if (taskId) {\n            const task = todoData.tasks.find(t => t.id === taskId);\n            return task ? (task.errors || []) : [];\n        }\n        \n        // Get all errors across all tasks\n        const allErrors = [];\n        todoData.tasks.forEach(task => {\n            if (task.errors) {\n                task.errors.forEach(error => {\n                    allErrors.push({ taskId: task.id, taskTitle: task.title, ...error });\n                });\n            }\n        });\n        \n        return {\n            totalErrors: allErrors.length,\n            errorsByType: this._groupErrorsByType(allErrors),\n            recentErrors: allErrors.filter(e => \n                new Date() - new Date(e.timestamp) < 24 * 60 * 60 * 1000 // Last 24 hours\n            ),\n            blockingTasks: todoData.tasks.filter(t => t.status === 'blocked').map(t => ({ id: t.id, title: t.title }))\n        };\n    }\n\n    /**\n     * Remove a task by ID\n     * @param {string} taskId - Task ID to remove\n     * @returns {boolean} True if task was removed, false if not found\n     */\n    async removeTask(taskId) {\n        const todoData = await this.readTodo();\n        const initialCount = todoData.tasks.length;\n        \n        // Filter out the task with the specified ID\n        todoData.tasks = todoData.tasks.filter(task => task.id !== taskId);\n        \n        // Check if a task was actually removed\n        if (todoData.tasks.length < initialCount) {\n            await this.writeTodo(todoData);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Remove multiple tasks by IDs\n     * @param {Array} taskIds - Array of task IDs to remove\n     * @returns {Object} Result with success/failed arrays\n     */\n    async removeTasks(taskIds) {\n        const todoData = await this.readTodo();\n        const results = { success: [], failed: [] };\n        \n        taskIds.forEach(taskId => {\n            const taskExists = todoData.tasks.some(task => task.id === taskId);\n            if (taskExists) {\n                results.success.push(taskId);\n            } else {\n                results.failed.push(taskId);\n            }\n        });\n        \n        // Remove all successful task IDs\n        if (results.success.length > 0) {\n            todoData.tasks = todoData.tasks.filter(task => \n                !results.success.includes(task.id)\n            );\n            await this.writeTodo(todoData);\n        }\n        \n        return results;\n    }\n\n    /**\n     * Private method to group errors by type\n     */\n    _groupErrorsByType(errors) {\n        const grouped = {};\n        errors.forEach(error => {\n            const type = error.type || 'unknown';\n            if (!grouped[type]) {\n                grouped[type] = [];\n            }\n            grouped[type].push(error);\n        });\n        return grouped;\n    }\n}\n\nmodule.exports = TaskManager;"],"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","ignoreList":[]}