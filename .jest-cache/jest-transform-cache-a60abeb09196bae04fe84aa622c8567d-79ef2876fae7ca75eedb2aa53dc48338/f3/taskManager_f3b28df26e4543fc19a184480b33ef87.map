{"version":3,"names":["cov_142b089npg","actualCoverage","fs","s","require","AutoFixer","TaskManager","constructor","todoPath","options","b","f","donePath","replace","autoFixer","isTestEnvironment","process","env","NODE_ENV","JEST_WORKER_ID","undefined","global","it","enableAutoFix","autoFixLevel","validateOnRead","enableArchiving","readTodo","existsSync","Error","content","readFileSync","data","JSON","parse","status","getFileStatus","valid","canAutoFix","fixResult","autoFix","success","hasChanges","error","recoveryResult","recoverCorruptedFile","finalData","message","writeTodo","validationResult","validator","validateAndSanitize","isValid","writeResult","recovery","atomicWrite","stringify","getCurrentTask","todoData","tasks","Array","isArray","find","t","updateTaskStatus","taskId","task","id","oldStatus","archiveCompletedTask","filter","addSubtask","parentTaskId","subtask","parentTask","subtasks","push","addImportantFile","filePath","important_files","includes","removeImportantFile","index","indexOf","splice","getResearchReportPath","researchReportExists","reportPath","path","workingDir","cwd","absolutePath","resolve","createTask","taskData","randomSuffix","randomValue","Math","random","toString","substr","hrtime","Date","now","importantFiles","successCriteria","success_criteria","mode","researchReportPath","reportCriterion","some","criterion","newTask","title","description","priority","dependencies","estimate","requires_research","created_at","toISOString","getNextMode","last_mode","currentTask","shouldRunReviewer","completedTasks","length","handleStrikeLogic","review_strikes","strikes_completed_last_run","action","performAutoFix","dryRunAutoFix","dryRun","listBackups","listAvailableBackups","restoreFromBackup","backupFile","createBackup","cleanupLegacyBackups","validateTodoFile","errors","type","severity","fixes","summary","totalErrors","totalFixes","criticalErrors","buildDependencyGraph","allTasks","dependencyMap","Map","taskMap","forEach","set","circularDeps","_detectCircularDependencies","dependencyTree","_generateDependencyTree","executionOrder","_calculateExecutionOrder","tree","circularDependencies","stats","totalTasks","tasksWithDependencies","circularIssues","getExecutableTasks","completed","map","every","depId","generateDependencyReport","graph","executable","report","cycle","join","visited","Set","visiting","cycles","visit","has","cycleStart","slice","concat","add","get","delete","from","keys","_dependencyMap","_taskMap","roots","addNode","depth","isLast","prefix","connector","dependents","dependent","isLastDependent","newPrefix","root","order","ready","deps","remaining","phases","_groupByExecutionPhases","size","phase","executeQualityGates","results","result","_executeQualityGate","passed","output","allPassed","r","total","failed","startsWith","_executeCommand","trim","exists","threshold","parseFloat","_checkCoverageThreshold","command","Promise","exec","timeout","stdout","stderr","coveragePath","coverage","totalCoverage","lines","pct","addQualityGate","gateCommand","batchUpdateTasks","updates","update","field","value","queryTasks","filters","hasFile","titleContains","toLowerCase","createTaskFromTemplate","templateType","params","templates","bugDescription","stepsToReproduce","featureName","featureDescription","acceptanceCriteria","targetComponent","refactorDescription","goals","topic","researchDescription","questions","template","Object","trackTaskError","errorInfo","timestamp","context","recoverable","blocking","getErrorSummary","allErrors","taskTitle","errorsByType","_groupErrorsByType","recentErrors","e","blockingTasks","removeTask","initialCount","removeTasks","taskIds","taskExists","reorderTask","newIndex","taskIndex","findIndex","moveTaskToTop","moveTaskToBottom","lastIndex","moveTaskUp","moveTaskDown","reorderTasks","reorderSpecs","spec","sortedSpecs","currentIndex","sort","a","getTaskPosition","archivedTask","completed_at","archived_from_todo","doneData","_createDoneStructure","completed_tasks","total_completed","last_completion","writeFileSync","project","readDone","getCompletedTasks","limit","since","sinceDate","getCompletionStats","modes","priorities","recent_completions","last_24h","last_7d","last_30d","day","completedAt","daysAgo","restoreCompletedTask","_completed_at","_archived_from_todo","restoredTask","migrateCompletedTasks","migrated","skipped","console","warn","grouped","module","exports"],"sources":["taskManager.js"],"sourcesContent":["const fs = require('fs');\nconst AutoFixer = require('./autoFixer');\n\nclass TaskManager {\n    constructor(todoPath, options = {}) {\n        this.todoPath = todoPath;\n        this.donePath = options.donePath || todoPath.replace('TODO.json', 'DONE.json');\n        this.autoFixer = new AutoFixer(options.autoFixer || {});\n        \n        // Detect test environment and disable archiving by default in tests\n        const isTestEnvironment = process.env.NODE_ENV === 'test' || \n                                 process.env.JEST_WORKER_ID !== undefined ||\n                                 typeof global.it === 'function';\n        \n        this.options = {\n            enableAutoFix: options.enableAutoFix !== false,\n            autoFixLevel: options.autoFixLevel || 'moderate',\n            validateOnRead: options.validateOnRead !== false,\n            enableArchiving: isTestEnvironment ? (options.enableArchiving === true) : (options.enableArchiving !== false),\n            ...options\n        };\n    }\n\n    async readTodo() {\n        if (!fs.existsSync(this.todoPath)) {\n            throw new Error(`TODO.json not found at ${this.todoPath}`);\n        }\n\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n\n            // Validate and auto-fix if enabled\n            if (this.options.validateOnRead || this.options.enableAutoFix) {\n                const status = await this.autoFixer.getFileStatus(this.todoPath);\n                \n                if (!status.valid && this.options.enableAutoFix && status.canAutoFix) {\n                    const fixResult = await this.autoFixer.autoFix(this.todoPath, {\n                        autoFixLevel: this.options.autoFixLevel\n                    });\n                    \n                    if (fixResult.success && fixResult.hasChanges) {\n                        // Re-read the fixed file\n                        return JSON.parse(fs.readFileSync(this.todoPath, 'utf8'));\n                    }\n                }\n            }\n\n            return data;\n\n        } catch (error) {\n            if (this.options.enableAutoFix) {\n                // Attempt recovery for corrupted files\n                const recoveryResult = await this.autoFixer.recoverCorruptedFile(this.todoPath);\n                \n                if (recoveryResult.success) {\n                    return recoveryResult.finalData;\n                }\n            }\n            \n            throw new Error(`Failed to read TODO.json: ${error.message}`);\n        }\n    }\n\n    async writeTodo(data) {\n        try {\n            // Validate data before writing if enabled\n            if (this.options.validateOnRead) {\n                const validationResult = this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n                \n                if (!validationResult.isValid && this.options.enableAutoFix) {\n                    data = validationResult.data; // Use the sanitized data\n                }\n            }\n\n            // Use atomic write operation from ErrorRecovery\n            const writeResult = await this.autoFixer.recovery.atomicWrite(\n                this.todoPath,\n                JSON.stringify(data, null, 2),\n                true // Create backup\n            );\n\n            if (!writeResult.success) {\n                throw new Error(`Failed to write TODO.json: ${writeResult.error}`);\n            }\n\n            return writeResult;\n\n        } catch (error) {\n            throw new Error(`Failed to write TODO.json: ${error.message}`);\n        }\n    }\n\n    async getCurrentTask() {\n        const todoData = await this.readTodo();\n        if (!todoData.tasks || !Array.isArray(todoData.tasks)) {\n            return undefined;\n        }\n        return todoData.tasks.find(t => t && (t.status === 'pending' || t.status === 'in_progress'));\n    }\n\n    async updateTaskStatus(taskId, status) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task) {\n            const oldStatus = task.status;\n            task.status = status;\n            \n            // If task is now completed and archiving is enabled, archive it to DONE.json\n            if (status === 'completed' && oldStatus !== 'completed' && this.options.enableArchiving) {\n                await this.archiveCompletedTask(task);\n                // Remove from TODO.json\n                todoData.tasks = todoData.tasks.filter(t => t.id !== taskId);\n            }\n            \n            await this.writeTodo(todoData);\n        }\n    }\n\n    async addSubtask(parentTaskId, subtask) {\n        const todoData = await this.readTodo();\n        const parentTask = todoData.tasks.find(t => t.id === parentTaskId);\n        if (parentTask) {\n            if (!parentTask.subtasks) {\n                parentTask.subtasks = [];\n            }\n            parentTask.subtasks.push(subtask);\n            await this.writeTodo(todoData);\n        }\n    }\n\n    async addImportantFile(taskId, filePath) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task) {\n            if (!task.important_files) {\n                task.important_files = [];\n            }\n            // Avoid duplicates\n            if (!task.important_files.includes(filePath)) {\n                task.important_files.push(filePath);\n                await this.writeTodo(todoData);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    async removeImportantFile(taskId, filePath) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task && task.important_files) {\n            const index = task.important_files.indexOf(filePath);\n            if (index !== -1) {\n                task.important_files.splice(index, 1);\n                await this.writeTodo(todoData);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Generates the standardized research report file path for a task\n     * @param {string} taskId - The task ID\n     * @returns {string} The research report file path\n     */\n    getResearchReportPath(taskId) {\n        return `./development/research-reports/research-report-${taskId}.md`;\n    }\n\n    /**\n     * Checks if a research report file exists for the given task ID\n     * @param {string} taskId - The task ID\n     * @returns {boolean} True if the research report file exists\n     */\n    researchReportExists(taskId) {\n        const reportPath = this.getResearchReportPath(taskId);\n        const path = require('path');\n        \n        // Convert relative path to absolute path\n        const workingDir = process.cwd();\n        const absolutePath = path.resolve(workingDir, reportPath);\n        \n        return fs.existsSync(absolutePath);\n    }\n\n    async createTask(taskData) {\n        const todoData = await this.readTodo();\n        \n        // Generate unique task ID with robust fallback mechanisms\n        let randomSuffix;\n        try {\n            const randomValue = Math.random();\n            if (randomValue && typeof randomValue.toString === 'function') {\n                randomSuffix = randomValue.toString(36).substr(2, 9);\n            } else {\n                throw new Error('Math.random returned invalid value');\n            }\n        } catch {\n            // Fallback to process.hrtime for high-resolution time-based uniqueness\n            const hrtime = process.hrtime();\n            randomSuffix = (hrtime[0] * 1000000 + hrtime[1]).toString(36).substr(-9);\n        }\n        const taskId = `task_${Date.now()}_${randomSuffix}`;\n        \n        // Start with provided important_files or empty array\n        let importantFiles = [...(taskData.important_files || [])];\n        let successCriteria = [...(taskData.success_criteria || [])];\n        \n        // For research tasks, automatically add research report path and success criteria\n        if (taskData.mode === 'RESEARCH' || taskData.mode === 'research') {\n            const researchReportPath = this.getResearchReportPath(taskId);\n            \n            // Add research report to important_files if not already present\n            if (!importantFiles.includes(researchReportPath)) {\n                importantFiles.push(researchReportPath);\n            }\n            \n            // Add research report creation to success criteria if not already present\n            const reportCriterion = `Research report created: ${researchReportPath}`;\n            if (!successCriteria.some(criterion => criterion === reportCriterion)) {\n                successCriteria.push(reportCriterion);\n            }\n        }\n        \n        // Create complete task object with required fields\n        const newTask = {\n            id: taskId,\n            title: taskData.title,\n            description: taskData.description,\n            mode: taskData.mode,\n            priority: taskData.priority || 'medium',\n            status: taskData.status || 'pending',\n            dependencies: taskData.dependencies || [],\n            important_files: importantFiles,\n            success_criteria: successCriteria,\n            estimate: taskData.estimate || '',\n            requires_research: taskData.requires_research || false,\n            subtasks: taskData.subtasks || [],\n            created_at: new Date().toISOString()\n        };\n        \n        // Add task to the tasks array\n        todoData.tasks.push(newTask);\n        \n        // Write updated TODO.json\n        await this.writeTodo(todoData);\n        \n        return taskId;\n    }\n\n    async getNextMode(todoData) {\n        // Alternate between TASK_CREATION and task execution\n        if (todoData.last_mode === 'TASK_CREATION' || !todoData.last_mode) {\n            const currentTask = await this.getCurrentTask();\n            return currentTask ? currentTask.mode : 'DEVELOPMENT';\n        }\n        return 'TASK_CREATION';\n    }\n\n    shouldRunReviewer(todoData) {\n        // Check if it's time for a review strike\n        const completedTasks = todoData.tasks.filter(t => \n            t.status === 'completed' && \n            t.mode !== 'REVIEWER'\n        ).length;\n        \n        // Run reviewer every 5 completed tasks\n        return completedTasks > 0 && completedTasks % 5 === 0;\n    }\n\n    handleStrikeLogic(todoData) {\n        // Reset strikes if all 3 were completed in previous run\n        if (todoData.review_strikes === 3 && todoData.strikes_completed_last_run) {\n            todoData.review_strikes = 0;\n            todoData.strikes_completed_last_run = false;\n            return { action: 'reset', message: 'Resetting review strikes to 0 for new cycle' };\n        }\n        \n        // Mark as completed if just finished third strike\n        if (todoData.review_strikes === 3 && !todoData.strikes_completed_last_run) {\n            todoData.strikes_completed_last_run = true;\n            return { action: 'complete', message: 'Third strike completed! Project approved.' };\n        }\n        \n        return { action: 'continue', message: null };\n    }\n\n    /**\n     * Gets detailed status of the TODO.json file\n     * @returns {Object} File status including validation results\n     */\n    async getFileStatus() {\n        return await this.autoFixer.getFileStatus(this.todoPath);\n    }\n\n    /**\n     * Manually triggers auto-fix on the TODO.json file\n     * @param {Object} options - Fix options\n     * @returns {Object} Fix result\n     */\n    async performAutoFix(options = {}) {\n        return await this.autoFixer.autoFix(this.todoPath, options);\n    }\n\n    /**\n     * Performs a dry run to show what would be fixed\n     * @returns {Object} Dry run result\n     */\n    async dryRunAutoFix() {\n        return await this.autoFixer.dryRun(this.todoPath);\n    }\n\n    /**\n     * Lists available backups for the TODO.json file\n     * @returns {Array} List of backup files\n     */\n    async listBackups() {\n        return await this.autoFixer.recovery.listAvailableBackups(this.todoPath);\n    }\n\n    /**\n     * Restores TODO.json from a backup\n     * @param {string} backupFile - Specific backup file to restore (optional)\n     * @returns {Object} Restoration result\n     */\n    async restoreFromBackup(backupFile = null) {\n        return await this.autoFixer.recovery.restoreFromBackup(this.todoPath, backupFile);\n    }\n\n    /**\n     * Creates a manual backup of the current TODO.json file\n     * @returns {Object} Backup creation result\n     */\n    async createBackup() {\n        return await this.autoFixer.recovery.createBackup(this.todoPath);\n    }\n\n    /**\n     * Cleans up legacy backup files in the project root directory\n     * @returns {Object} Cleanup result\n     */\n    async cleanupLegacyBackups() {\n        return await this.autoFixer.recovery.cleanupLegacyBackups(this.todoPath);\n    }\n\n    /**\n     * Validates the current TODO.json without making changes\n     * @returns {Object} Validation result\n     */\n    async validateTodoFile() {\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n            return this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n        } catch (error) {\n            return {\n                isValid: false,\n                errors: [{ \n                    type: 'FILE_READ_ERROR', \n                    message: error.message, \n                    severity: 'critical' \n                }],\n                fixes: [],\n                summary: { totalErrors: 1, totalFixes: 0, criticalErrors: 1 }\n            };\n        }\n    }\n\n    /**\n     * Build dependency graph from tasks and return text-based visualization\n     * @param {Array} tasks - Array of task objects (optional, uses current tasks if not provided)\n     * @returns {Object} Dependency analysis with text tree\n     */\n    async buildDependencyGraph(tasks = null) {\n        const todoData = await this.readTodo();\n        const allTasks = tasks || todoData.tasks || [];\n        \n        // Build dependency map\n        const dependencyMap = new Map();\n        const taskMap = new Map();\n        \n        // Index all tasks\n        allTasks.forEach(task => {\n            taskMap.set(task.id, task);\n            dependencyMap.set(task.id, task.dependencies || []);\n        });\n        \n        // Detect circular dependencies\n        const circularDeps = this._detectCircularDependencies(dependencyMap);\n        \n        // Generate text tree visualization\n        const dependencyTree = this._generateDependencyTree(allTasks, dependencyMap, taskMap);\n        \n        // Calculate execution order\n        const executionOrder = this._calculateExecutionOrder(dependencyMap, circularDeps);\n        \n        return {\n            tree: dependencyTree,\n            circularDependencies: circularDeps,\n            executionOrder: executionOrder,\n            stats: {\n                totalTasks: allTasks.length,\n                tasksWithDependencies: allTasks.filter(t => t.dependencies && t.dependencies.length > 0).length,\n                circularIssues: circularDeps.length\n            }\n        };\n    }\n\n    /**\n     * Get tasks that can be executed (no unmet dependencies)\n     * @returns {Array} Tasks ready for execution\n     */\n    async getExecutableTasks() {\n        const todoData = await this.readTodo();\n        const tasks = todoData.tasks || [];\n        const completed = tasks.filter(t => t.status === 'completed').map(t => t.id);\n        \n        return tasks.filter(task => {\n            if (task.status === 'completed') return false;\n            if (!task.dependencies || task.dependencies.length === 0) return true;\n            return task.dependencies.every(depId => completed.includes(depId));\n        });\n    }\n\n    /**\n     * Generate dependency status report in markdown format\n     * @returns {string} Markdown dependency report\n     */\n    async generateDependencyReport() {\n        const graph = await this.buildDependencyGraph();\n        const executable = await this.getExecutableTasks();\n        \n        let report = '# Task Dependency Report\\n\\n';\n        \n        report += '## Dependency Tree\\n```\\n';\n        report += graph.tree;\n        report += '\\n```\\n\\n';\n        \n        if (graph.circularDependencies.length > 0) {\n            report += '## ⚠️ Circular Dependencies\\n';\n            graph.circularDependencies.forEach(cycle => {\n                report += `- ${cycle.join(' → ')}\\n`;\n            });\n            report += '\\n';\n        }\n        \n        report += '## 🚀 Ready to Execute\\n';\n        executable.forEach(task => {\n            report += `- **${task.title}** (${task.id}) - ${task.priority} priority\\n`;\n        });\n        \n        report += '\\n## 📊 Statistics\\n';\n        report += `- Total Tasks: ${graph.stats.totalTasks}\\n`;\n        report += `- Tasks with Dependencies: ${graph.stats.tasksWithDependencies}\\n`;\n        report += `- Executable Now: ${executable.length}\\n`;\n        report += `- Circular Issues: ${graph.stats.circularIssues}\\n`;\n        \n        return report;\n    }\n\n    /**\n     * Private method to detect circular dependencies\n     */\n    _detectCircularDependencies(dependencyMap) {\n        const visited = new Set();\n        const visiting = new Set();\n        const cycles = [];\n        \n        const visit = (taskId, path = []) => {\n            if (visiting.has(taskId)) {\n                // Found a cycle\n                const cycleStart = path.indexOf(taskId);\n                cycles.push(path.slice(cycleStart).concat([taskId]));\n                return;\n            }\n            \n            if (visited.has(taskId)) return;\n            \n            visiting.add(taskId);\n            const dependencies = dependencyMap.get(taskId) || [];\n            \n            dependencies.forEach(depId => {\n                visit(depId, [...path, taskId]);\n            });\n            \n            visiting.delete(taskId);\n            visited.add(taskId);\n        };\n        \n        Array.from(dependencyMap.keys()).forEach(taskId => {\n            if (!visited.has(taskId)) {\n                visit(taskId);\n            }\n        });\n        \n        return cycles;\n    }\n\n    /**\n     * Private method to generate ASCII dependency tree\n     */\n    _generateDependencyTree(tasks, _dependencyMap, _taskMap) {\n        const roots = tasks.filter(task => \n            !task.dependencies || task.dependencies.length === 0\n        );\n        \n        let tree = '';\n        const visited = new Set();\n        \n        const addNode = (task, depth = 0, isLast = true, prefix = '') => {\n            if (visited.has(task.id)) {\n                tree += `${prefix}${isLast ? '└── ' : '├── '}${task.title} (${task.id}) [CIRCULAR]\\n`;\n                return;\n            }\n            \n            visited.add(task.id);\n            const connector = isLast ? '└── ' : '├── ';\n            const status = task.status === 'completed' ? '✅' : \n                          task.status === 'in_progress' ? '🔄' : '⏳';\n            \n            tree += `${prefix}${connector}${status} ${task.title} (${task.id})\\n`;\n            \n            // Find tasks that depend on this one\n            const dependents = tasks.filter(t => \n                t.dependencies && t.dependencies.includes(task.id)\n            );\n            \n            dependents.forEach((dependent, index) => {\n                const isLastDependent = index === dependents.length - 1;\n                const newPrefix = prefix + (isLast ? '    ' : '│   ');\n                addNode(dependent, depth + 1, isLastDependent, newPrefix);\n            });\n        };\n        \n        if (roots.length === 0) {\n            tree = 'No root tasks found (all tasks have dependencies)\\n';\n        } else {\n            roots.forEach((root, index) => {\n                addNode(root, 0, index === roots.length - 1);\n            });\n        }\n        \n        return tree;\n    }\n\n    /**\n     * Private method to calculate optimal execution order\n     */\n    _calculateExecutionOrder(dependencyMap, circularDeps) {\n        if (circularDeps.length > 0) {\n            return { error: 'Cannot calculate execution order due to circular dependencies', cycles: circularDeps };\n        }\n        \n        const order = [];\n        const completed = new Set();\n        const tasks = Array.from(dependencyMap.keys());\n        \n        while (order.length < tasks.length) {\n            const ready = tasks.filter(taskId => {\n                if (completed.has(taskId)) return false;\n                const deps = dependencyMap.get(taskId) || [];\n                return deps.every(depId => completed.has(depId));\n            });\n            \n            if (ready.length === 0) {\n                // Should not happen if no circular deps, but safety check\n                const remaining = tasks.filter(taskId => !completed.has(taskId));\n                return { error: 'Cannot resolve dependencies', remaining };\n            }\n            \n            ready.forEach(taskId => {\n                order.push(taskId);\n                completed.add(taskId);\n            });\n        }\n        \n        return { order, phases: this._groupByExecutionPhases(order, dependencyMap) };\n    }\n\n    /**\n     * Private method to group tasks by execution phases (tasks that can run in parallel)\n     */\n    _groupByExecutionPhases(order, dependencyMap) {\n        const phases = [];\n        const completed = new Set();\n        \n        while (completed.size < order.length) {\n            const phase = [];\n            \n            order.forEach(taskId => {\n                if (completed.has(taskId)) return;\n                \n                const deps = dependencyMap.get(taskId) || [];\n                if (deps.every(depId => completed.has(depId))) {\n                    phase.push(taskId);\n                }\n            });\n            \n            if (phase.length === 0) break; // Safety check\n            \n            phases.push(phase);\n            phase.forEach(taskId => completed.add(taskId));\n        }\n        \n        return phases;\n    }\n\n    /**\n     * Convert success criteria to executable quality gates\n     * @param {string} taskId - Task ID\n     * @returns {Object} Quality gate execution results\n     */\n    async executeQualityGates(taskId) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task || !task.success_criteria) {\n            return { success: false, error: 'Task not found or no success criteria' };\n        }\n        \n        const results = [];\n        \n        for (const criterion of task.success_criteria) {\n            const result = await this._executeQualityGate(criterion);\n            results.push({\n                criterion,\n                passed: result.success,\n                output: result.output,\n                error: result.error\n            });\n        }\n        \n        const allPassed = results.every(r => r.passed);\n        \n        return {\n            success: allPassed,\n            results,\n            summary: {\n                total: results.length,\n                passed: results.filter(r => r.passed).length,\n                failed: results.filter(r => !r.passed).length\n            }\n        };\n    }\n\n    /**\n     * Private method to execute a single quality gate\n     */\n    async _executeQualityGate(criterion) {\n        try {\n            // Detect different types of quality gates\n            if (criterion.startsWith('npm run ') || criterion.startsWith('node ')) {\n                // Execute npm/node commands\n                return await this._executeCommand(criterion);\n            } else if (criterion.startsWith('file exists: ')) {\n                // Check file existence\n                const filePath = criterion.replace('file exists: ', '').trim();\n                const exists = fs.existsSync(filePath);\n                return { success: exists, output: `File ${exists ? 'exists' : 'missing'}: ${filePath}` };\n            } else if (criterion.startsWith('coverage > ')) {\n                // Check coverage threshold\n                const threshold = parseFloat(criterion.replace('coverage > ', '').replace('%', ''));\n                return await this._checkCoverageThreshold(threshold);\n            } else if (criterion.startsWith('tests pass')) {\n                // Run tests\n                return await this._executeCommand('npm test');\n            } else if (criterion.startsWith('lint passes')) {\n                // Run linting\n                return await this._executeCommand('npm run lint');\n            } else {\n                // Default: treat as manual verification needed\n                return { \n                    success: false, \n                    output: 'Manual verification required',\n                    error: `Cannot auto-execute: ${criterion}` \n                };\n            }\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    }\n\n    /**\n     * Execute a shell command for quality gates\n     */\n    async _executeCommand(command) {\n        return new Promise((resolve) => {\n            const { exec } = require('child_process');\n            exec(command, { timeout: 300000 }, (error, stdout, stderr) => {\n                if (error) {\n                    resolve({ \n                        success: false, \n                        output: stdout || '', \n                        error: stderr || error.message \n                    });\n                } else {\n                    resolve({ \n                        success: true, \n                        output: stdout || 'Command completed successfully' \n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Check if coverage meets threshold\n     */\n    async _checkCoverageThreshold(threshold) {\n        try {\n            // Try to read coverage summary\n            const coveragePath = './coverage/coverage-summary.json';\n            if (!fs.existsSync(coveragePath)) {\n                return { \n                    success: false, \n                    error: 'Coverage report not found. Run npm run test:coverage first.' \n                };\n            }\n            \n            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));\n            const totalCoverage = coverage.total && coverage.total.lines ? coverage.total.lines.pct : 0;\n            \n            return {\n                success: totalCoverage >= threshold,\n                output: `Coverage: ${totalCoverage}% (threshold: ${threshold}%)`,\n                actualCoverage: totalCoverage\n            };\n        } catch (error) {\n            return { success: false, error: `Coverage check failed: ${error.message}` };\n        }\n    }\n\n    /**\n     * Add executable quality gate to task\n     * @param {string} taskId - Task ID\n     * @param {string} gateCommand - Executable command or check\n     * @returns {boolean} Success status\n     */\n    async addQualityGate(taskId, gateCommand) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task) return false;\n        \n        if (!task.success_criteria) {\n            task.success_criteria = [];\n        }\n        \n        if (!task.success_criteria.includes(gateCommand)) {\n            task.success_criteria.push(gateCommand);\n            await this.writeTodo(todoData);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Batch update multiple tasks\n     * @param {Array} updates - Array of {taskId, field, value} objects\n     * @returns {Object} Batch update results\n     */\n    async batchUpdateTasks(updates) {\n        const todoData = await this.readTodo();\n        const results = { success: [], failed: [] };\n        \n        updates.forEach(update => {\n            const task = todoData.tasks.find(t => t.id === update.taskId);\n            if (task && update.field && update.value !== undefined) {\n                task[update.field] = update.value;\n                results.success.push(update.taskId);\n            } else {\n                results.failed.push({ taskId: update.taskId, error: 'Task not found or invalid update' });\n            }\n        });\n        \n        if (results.success.length > 0) {\n            await this.writeTodo(todoData);\n        }\n        \n        return results;\n    }\n\n    /**\n     * Filter and query tasks with various criteria\n     * @param {Object} filters - Filter criteria\n     * @returns {Array} Filtered tasks\n     */\n    async queryTasks(filters = {}) {\n        const todoData = await this.readTodo();\n        let tasks = todoData.tasks || [];\n        \n        // Apply filters\n        if (filters.status) {\n            tasks = tasks.filter(t => t.status === filters.status);\n        }\n        \n        if (filters.priority) {\n            tasks = tasks.filter(t => t.priority === filters.priority);\n        }\n        \n        if (filters.mode) {\n            tasks = tasks.filter(t => t.mode === filters.mode);\n        }\n        \n        if (filters.hasFile) {\n            tasks = tasks.filter(t => \n                t.important_files && t.important_files.some(f => f.includes(filters.hasFile))\n            );\n        }\n        \n        if (filters.titleContains) {\n            tasks = tasks.filter(t => \n                t.title.toLowerCase().includes(filters.titleContains.toLowerCase())\n            );\n        }\n        \n        return tasks;\n    }\n\n    /**\n     * Create task from common templates\n     * @param {string} templateType - Template type\n     * @param {Object} params - Template parameters\n     * @returns {string} Created task ID\n     */\n    async createTaskFromTemplate(templateType, params = {}) {\n        const templates = {\n            'bug-fix': {\n                title: `Fix bug: ${params.bugDescription || 'Untitled bug'}`,\n                description: `Investigate and fix the following bug:\\n\\n${params.bugDescription || 'Bug description needed'}\\n\\nSteps to reproduce:\\n${params.stepsToReproduce || '1. Steps needed'}`,\n                mode: 'DEVELOPMENT',\n                priority: params.priority || 'high',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'Bug no longer reproducible'\n                ]\n            },\n            \n            'feature': {\n                title: `Implement feature: ${params.featureName || 'Untitled feature'}`,\n                description: `Implement the following feature:\\n\\n${params.featureDescription || 'Feature description needed'}\\n\\nAcceptance criteria:\\n${params.acceptanceCriteria || '- Criteria needed'}`,\n                mode: 'DEVELOPMENT',\n                priority: params.priority || 'medium',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'coverage > 80%',\n                    'Feature meets acceptance criteria'\n                ]\n            },\n            \n            'refactor': {\n                title: `Refactor: ${params.targetComponent || 'Untitled component'}`,\n                description: `Refactor the following component:\\n\\n${params.refactorDescription || 'Refactor description needed'}\\n\\nGoals:\\n${params.goals || '- Improve maintainability'}`,\n                mode: 'REFACTORING',\n                priority: params.priority || 'medium',\n                success_criteria: [\n                    'lint passes',\n                    'tests pass',\n                    'coverage maintained',\n                    'No breaking changes'\n                ]\n            },\n            \n            'research': {\n                title: `Research: ${params.topic || 'Untitled research'}`,\n                description: `Research the following topic:\\n\\n${params.researchDescription || 'Research description needed'}\\n\\nQuestions to answer:\\n${params.questions || '- Questions needed'}`,\n                mode: 'RESEARCH',\n                priority: params.priority || 'medium',\n                requires_research: true\n            }\n        };\n        \n        const template = templates[templateType];\n        if (!template) {\n            throw new Error(`Unknown template type: ${templateType}. Available: ${Object.keys(templates).join(', ')}`);\n        }\n        \n        return await this.createTask({ ...template, ...params });\n    }\n\n    /**\n     * Enhanced error tracking for task failures\n     * @param {string} taskId - Task ID\n     * @param {Object} errorInfo - Error information\n     */\n    async trackTaskError(taskId, errorInfo) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        \n        if (!task) return false;\n        \n        if (!task.errors) {\n            task.errors = [];\n        }\n        \n        task.errors.push({\n            timestamp: new Date().toISOString(),\n            type: errorInfo.type || 'unknown',\n            message: errorInfo.message || '',\n            context: errorInfo.context || {},\n            recoverable: errorInfo.recoverable || false\n        });\n        \n        // Also update status if this is a blocking error\n        if (errorInfo.blocking) {\n            task.status = 'blocked';\n        }\n        \n        await this.writeTodo(todoData);\n        return true;\n    }\n\n    /**\n     * Get error summary for debugging\n     * @param {string} taskId - Task ID (optional, gets all errors if not provided)\n     * @returns {Object} Error summary\n     */\n    async getErrorSummary(taskId = null) {\n        const todoData = await this.readTodo();\n        \n        if (taskId) {\n            const task = todoData.tasks.find(t => t.id === taskId);\n            return task ? (task.errors || []) : [];\n        }\n        \n        // Get all errors across all tasks\n        const allErrors = [];\n        todoData.tasks.forEach(task => {\n            if (task.errors) {\n                task.errors.forEach(error => {\n                    allErrors.push({ taskId: task.id, taskTitle: task.title, ...error });\n                });\n            }\n        });\n        \n        return {\n            totalErrors: allErrors.length,\n            errorsByType: this._groupErrorsByType(allErrors),\n            recentErrors: allErrors.filter(e => \n                new Date() - new Date(e.timestamp) < 24 * 60 * 60 * 1000 // Last 24 hours\n            ),\n            blockingTasks: todoData.tasks.filter(t => t.status === 'blocked').map(t => ({ id: t.id, title: t.title }))\n        };\n    }\n\n    /**\n     * Remove a task by ID\n     * @param {string} taskId - Task ID to remove\n     * @returns {boolean} True if task was removed, false if not found\n     */\n    async removeTask(taskId) {\n        const todoData = await this.readTodo();\n        const initialCount = todoData.tasks.length;\n        \n        // Filter out the task with the specified ID\n        todoData.tasks = todoData.tasks.filter(task => task.id !== taskId);\n        \n        // Check if a task was actually removed\n        if (todoData.tasks.length < initialCount) {\n            await this.writeTodo(todoData);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Remove multiple tasks by IDs\n     * @param {Array} taskIds - Array of task IDs to remove\n     * @returns {Object} Result with success/failed arrays\n     */\n    async removeTasks(taskIds) {\n        const todoData = await this.readTodo();\n        const results = { success: [], failed: [] };\n        \n        taskIds.forEach(taskId => {\n            const taskExists = todoData.tasks.some(task => task.id === taskId);\n            if (taskExists) {\n                results.success.push(taskId);\n            } else {\n                results.failed.push(taskId);\n            }\n        });\n        \n        // Remove all successful task IDs\n        if (results.success.length > 0) {\n            todoData.tasks = todoData.tasks.filter(task => \n                !results.success.includes(task.id)\n            );\n            await this.writeTodo(todoData);\n        }\n        \n        return results;\n    }\n\n    /**\n     * Reorder a task to a new position\n     * @param {string} taskId - Task ID to reorder\n     * @param {number} newIndex - New position index (0-based)\n     * @returns {boolean} True if task was reordered, false if not found\n     */\n    async reorderTask(taskId, newIndex) {\n        const todoData = await this.readTodo();\n        const taskIndex = todoData.tasks.findIndex(task => task.id === taskId);\n        \n        if (taskIndex === -1) {\n            return false; // Task not found\n        }\n        \n        // Validate new index\n        if (newIndex < 0 || newIndex >= todoData.tasks.length) {\n            throw new Error(`Invalid index ${newIndex}. Must be between 0 and ${todoData.tasks.length - 1}`);\n        }\n        \n        // If already at the target position, no change needed\n        if (taskIndex === newIndex) {\n            return true;\n        }\n        \n        // Remove task from current position\n        const [task] = todoData.tasks.splice(taskIndex, 1);\n        \n        // Insert task at new position\n        todoData.tasks.splice(newIndex, 0, task);\n        \n        await this.writeTodo(todoData);\n        return true;\n    }\n\n    /**\n     * Move a task to the beginning of the list\n     * @param {string} taskId - Task ID to move to top\n     * @returns {boolean} True if task was moved, false if not found\n     */\n    async moveTaskToTop(taskId) {\n        return await this.reorderTask(taskId, 0);\n    }\n\n    /**\n     * Move a task to the end of the list\n     * @param {string} taskId - Task ID to move to bottom\n     * @returns {boolean} True if task was moved, false if not found\n     */\n    async moveTaskToBottom(taskId) {\n        const todoData = await this.readTodo();\n        const lastIndex = todoData.tasks.length - 1;\n        return await this.reorderTask(taskId, lastIndex);\n    }\n\n    /**\n     * Move a task up one position\n     * @param {string} taskId - Task ID to move up\n     * @returns {boolean} True if task was moved, false if not found or already at top\n     */\n    async moveTaskUp(taskId) {\n        const todoData = await this.readTodo();\n        const taskIndex = todoData.tasks.findIndex(task => task.id === taskId);\n        \n        if (taskIndex === -1 || taskIndex === 0) {\n            return false; // Task not found or already at top\n        }\n        \n        return await this.reorderTask(taskId, taskIndex - 1);\n    }\n\n    /**\n     * Move a task down one position\n     * @param {string} taskId - Task ID to move down\n     * @returns {boolean} True if task was moved, false if not found or already at bottom\n     */\n    async moveTaskDown(taskId) {\n        const todoData = await this.readTodo();\n        const taskIndex = todoData.tasks.findIndex(task => task.id === taskId);\n        \n        if (taskIndex === -1 || taskIndex === todoData.tasks.length - 1) {\n            return false; // Task not found or already at bottom\n        }\n        \n        return await this.reorderTask(taskId, taskIndex + 1);\n    }\n\n    /**\n     * Reorder multiple tasks to new positions\n     * @param {Array} reorderSpecs - Array of {taskId, newIndex} objects\n     * @returns {Object} Result with success/failed arrays and details\n     */\n    async reorderTasks(reorderSpecs) {\n        const todoData = await this.readTodo();\n        const results = { success: [], failed: [], errors: [] };\n        \n        // Validate all specs first\n        for (const spec of reorderSpecs) {\n            const { taskId, newIndex } = spec;\n            \n            if (!taskId || typeof newIndex !== 'number') {\n                results.failed.push(taskId || 'unknown');\n                results.errors.push({\n                    taskId: taskId || 'unknown',\n                    error: 'Invalid reorder specification: requires taskId and numeric newIndex'\n                });\n                continue;\n            }\n            \n            const taskExists = todoData.tasks.some(task => task.id === taskId);\n            if (!taskExists) {\n                results.failed.push(taskId);\n                results.errors.push({\n                    taskId,\n                    error: 'Task not found'\n                });\n                continue;\n            }\n            \n            if (newIndex < 0 || newIndex >= todoData.tasks.length) {\n                results.failed.push(taskId);\n                results.errors.push({\n                    taskId,\n                    error: `Invalid index ${newIndex}. Must be between 0 and ${todoData.tasks.length - 1}`\n                });\n                continue;\n            }\n            \n            results.success.push(taskId);\n        }\n        \n        // If any validation failed, don't perform any reordering\n        if (results.failed.length > 0) {\n            return results;\n        }\n        \n        // Sort reorder specs by current position to avoid conflicts\n        const sortedSpecs = reorderSpecs\n            .map(spec => ({\n                ...spec,\n                currentIndex: todoData.tasks.findIndex(task => task.id === spec.taskId)\n            }))\n            .sort((a, b) => a.currentIndex - b.currentIndex);\n        \n        // Apply reordering operations in sequence\n        for (const spec of sortedSpecs) {\n            const { taskId, newIndex } = spec;\n            const currentIndex = todoData.tasks.findIndex(task => task.id === taskId);\n            \n            if (currentIndex !== newIndex) {\n                // Remove task from current position\n                const [task] = todoData.tasks.splice(currentIndex, 1);\n                // Insert at new position\n                todoData.tasks.splice(newIndex, 0, task);\n            }\n        }\n        \n        await this.writeTodo(todoData);\n        return results;\n    }\n\n    /**\n     * Get the current position of a task\n     * @param {string} taskId - Task ID to find position for\n     * @returns {number} Current index of task, or -1 if not found\n     */\n    getTaskPosition(taskId) {\n        const todoData = this.readTodo();\n        return todoData.tasks.findIndex(task => task.id === taskId);\n    }\n\n    /**\n     * Archive a completed task to DONE.json\n     * @param {Object} task - Task object to archive\n     */\n    async archiveCompletedTask(task) {\n        if (!this.options.enableArchiving) {\n            return;\n        }\n\n        // Add completion timestamp\n        const archivedTask = {\n            ...task,\n            completed_at: new Date().toISOString(),\n            archived_from_todo: this.todoPath\n        };\n\n        // Read or create DONE.json\n        let doneData;\n        if (fs.existsSync(this.donePath)) {\n            try {\n                const content = fs.readFileSync(this.donePath, 'utf8');\n                doneData = JSON.parse(content);\n            } catch {\n                // If DONE.json is corrupted, create new structure\n                doneData = this._createDoneStructure();\n            }\n        } else {\n            doneData = this._createDoneStructure();\n        }\n\n        // Add task to completed tasks\n        doneData.completed_tasks.push(archivedTask);\n        doneData.total_completed = doneData.completed_tasks.length;\n        doneData.last_completion = archivedTask.completed_at;\n\n        // Write DONE.json\n        fs.writeFileSync(this.donePath, JSON.stringify(doneData, null, 2));\n    }\n\n    /**\n     * Create initial DONE.json structure\n     * @returns {Object} DONE.json structure\n     */\n    _createDoneStructure() {\n        return {\n            project: \"infinite-continue-stop-hook\",\n            completed_tasks: [],\n            total_completed: 0,\n            last_completion: null,\n            created_at: new Date().toISOString()\n        };\n    }\n\n    /**\n     * Read DONE.json file\n     * @returns {Object} DONE.json data\n     */\n    async readDone() {\n        if (!fs.existsSync(this.donePath)) {\n            return this._createDoneStructure();\n        }\n\n        try {\n            const content = fs.readFileSync(this.donePath, 'utf8');\n            return JSON.parse(content);\n        } catch {\n            return this._createDoneStructure();\n        }\n    }\n\n    /**\n     * Get completed tasks with optional filtering\n     * @param {Object} filters - Optional filters (limit, since, taskType, etc.)\n     * @returns {Array} Array of completed tasks\n     */\n    async getCompletedTasks(filters = {}) {\n        const doneData = await this.readDone();\n        let tasks = doneData.completed_tasks || [];\n\n        // Apply filters\n        if (filters.limit && typeof filters.limit === 'number') {\n            tasks = tasks.slice(-filters.limit); // Get most recent N tasks\n        }\n\n        if (filters.since && typeof filters.since === 'string') {\n            const sinceDate = new Date(filters.since);\n            tasks = tasks.filter(task => \n                task.completed_at && new Date(task.completed_at) >= sinceDate\n            );\n        }\n\n        if (filters.mode && typeof filters.mode === 'string') {\n            tasks = tasks.filter(task => task.mode === filters.mode);\n        }\n\n        if (filters.priority && typeof filters.priority === 'string') {\n            tasks = tasks.filter(task => task.priority === filters.priority);\n        }\n\n        return tasks;\n    }\n\n    /**\n     * Get completion statistics\n     * @returns {Object} Statistics about completed tasks\n     */\n    async getCompletionStats() {\n        const doneData = await this.readDone();\n        const tasks = doneData.completed_tasks || [];\n\n        const stats = {\n            total_completed: tasks.length,\n            last_completion: doneData.last_completion,\n            modes: {},\n            priorities: {},\n            recent_completions: {\n                last_24h: 0,\n                last_7d: 0,\n                last_30d: 0\n            }\n        };\n\n        const now = new Date();\n        const day = 24 * 60 * 60 * 1000;\n\n        tasks.forEach(task => {\n            // Count by mode\n            if (task.mode) {\n                stats.modes[task.mode] = (stats.modes[task.mode] || 0) + 1;\n            }\n\n            // Count by priority\n            if (task.priority) {\n                stats.priorities[task.priority] = (stats.priorities[task.priority] || 0) + 1;\n            }\n\n            // Count recent completions\n            if (task.completed_at) {\n                const completedAt = new Date(task.completed_at);\n                const daysAgo = (now - completedAt) / day;\n\n                if (daysAgo <= 1) stats.recent_completions.last_24h++;\n                if (daysAgo <= 7) stats.recent_completions.last_7d++;\n                if (daysAgo <= 30) stats.recent_completions.last_30d++;\n            }\n        });\n\n        return stats;\n    }\n\n    /**\n     * Restore a completed task back to TODO.json\n     * @param {string} taskId - ID of completed task to restore\n     * @returns {boolean} True if task was restored, false if not found\n     */\n    async restoreCompletedTask(taskId) {\n        const doneData = await this.readDone();\n        const taskIndex = doneData.completed_tasks.findIndex(task => task.id === taskId);\n\n        if (taskIndex === -1) {\n            return false;\n        }\n\n        // Remove from DONE.json\n        const [task] = doneData.completed_tasks.splice(taskIndex, 1);\n        doneData.total_completed = doneData.completed_tasks.length;\n\n        // Clean up archive metadata\n        const {completed_at: _completed_at, archived_from_todo: _archived_from_todo, ...restoredTask} = task;\n        restoredTask.status = 'pending'; // Reset status\n\n        // Add back to TODO.json\n        const todoData = await this.readTodo();\n        todoData.tasks.push(restoredTask);\n\n        // Write both files\n        await this.writeTodo(todoData);\n        fs.writeFileSync(this.donePath, JSON.stringify(doneData, null, 2));\n\n        return true;\n    }\n\n    /**\n     * Migrate all existing completed tasks from TODO.json to DONE.json\n     * @returns {Object} Migration results with counts\n     */\n    async migrateCompletedTasks() {\n        const todoData = await this.readTodo();\n        const completedTasks = todoData.tasks.filter(task => task.status === 'completed');\n        \n        if (completedTasks.length === 0) {\n            return { migrated: 0, skipped: 0, total: 0 };\n        }\n\n        let migrated = 0;\n        let skipped = 0;\n\n        // Archive each completed task\n        for (const task of completedTasks) {\n            try {\n                await this.archiveCompletedTask(task);\n                migrated++;\n            } catch (error) {\n                console.warn(`Failed to archive task ${task.id}: ${error.message}`);\n                skipped++;\n            }\n        }\n\n        // Remove all successfully archived tasks from TODO.json\n        if (migrated > 0) {\n            todoData.tasks = todoData.tasks.filter(task => task.status !== 'completed');\n            await this.writeTodo(todoData);\n        }\n\n        return {\n            migrated,\n            skipped,\n            total: completedTasks.length\n        };\n    }\n\n    /**\n     * Private method to group errors by type\n     */\n    _groupErrorsByType(errors) {\n        const grouped = {};\n        errors.forEach(error => {\n            const type = error.type || 'unknown';\n            if (!grouped[type]) {\n                grouped[type] = [];\n            }\n            grouped[type].push(error);\n        });\n        return grouped;\n    }\n}\n\nmodule.exports = TaskManager;"],"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","ignoreList":[]}