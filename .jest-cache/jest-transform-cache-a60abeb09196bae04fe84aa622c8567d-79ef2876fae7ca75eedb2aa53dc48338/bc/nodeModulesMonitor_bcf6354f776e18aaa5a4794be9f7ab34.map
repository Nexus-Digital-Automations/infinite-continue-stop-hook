{"version":3,"names":["cov_b35kfj846","actualCoverage","fs","s","require","path","crypto","NodeModulesMonitor","constructor","options","b","f","projectRoot","resolve","process","cwd","nodeModulesPath","join","backupDir","checksumFile","logFile","criticalFiles","config","enableBackup","enableRestore","enableDetailed","maxBackups","checksumAlgorithm","preTestChecksums","Map","violations","monitoringActive","realTimeWatchers","threatLevel","protectionFeatures","realTimeWatch","autoRestore","threatEscalation","quarantineMode","deepContentAnalysis","proactiveScanning","emergencyLockdown","log","features","startMonitoring","ensureBackupDirectory","generateChecksums","createBackups","startRealTimeWatching","filesMonitored","size","backupsCreated","realTimeWatching","success","timestamp","Date","toISOString","error","message","Error","checkIntegrity","currentChecksums","filePath","originalChecksum","currentChecksum","calculateFileChecksum","set","violation","file","type","push","newFiles","detectUnexpectedFiles","forEach","result","length","filesChecked","unexpectedFiles","violationCount","types","Set","map","v","restoreCorruptedFiles","restored","availableBackups","getAvailableBackups","restoredCount","restoredFiles","restoreFile","totalViolations","files","generateReport","report","summary","corruptedFiles","filter","integrityStatus","fullPath","find","status","stopMonitoring","stopRealTimeWatching","saveChecksums","finalThreatLevel","finalViolations","clear","existsSync","checksum","detailedPaths","packagePath","fullPackagePath","addPackageFiles","getAllFilesRecursive","shouldSkipFile","package","Promise","reject","stream","createReadStream","hash","createHash","on","chunk","update","digest","replace","backupPath","promises","mkdir","recursive","backedUpCount","sourcePath","backupFilePath","dirname","copyFile","cleanupOldBackups","filesBackedUp","backups","latestBackup","relativePath","relative","backup","suspiciousPatterns","pattern","matches","test","match","isLegitimateFile","toString","basename","legitimateFiles","includes","dir","extensions","traverse","currentDir","items","readdirSync","item","stat","statSync","isDirectory","startsWith","isFile","extname","skipPatterns","some","readdir","itemPath","name","mtime","sort","a","toDelete","slice","rm","force","checksumData","checksums","Object","fromEntries","algorithm","writeFile","JSON","stringify","data","level","logEntry","toUpperCase","levelEmoji","info","warn","env","NODE_ENV","console","keys","writeLogToFile","catch","logLine","appendFile","watcher","watch","eventType","_filename","handleFileChange","watchedFiles","get","escalateThreatLevel","autoRestoreFile","newLevel","levels","currentIndex","indexOf","newIndex","activateQuarantineMode","restoredChecksum","expected","actual","testMode","reason","emit","close","reportThreat","threatType","details","threat","sessionId","now","handleRealTimeThreat","isCoverageMode","handleCoverageThreat","writeType","emergencyProtocol","nextTick","emergencyFileProtection","isEmergencyMode","NODE_MODULES_EMERGENCY","coverageMode","emergencyAction","COVERAGE_THREAT_DETECTED","activateCoverageQuarantine","checksumMismatch","COVERAGE_QUARANTINE_ACTIVE","startCoverageFileMonitoring","coveragePatterns","patterns","enhanced","coverageMonitoringActive","performDeepContentAnalysis","content","threats","severity","binaryCharCount","i","Math","min","code","charCodeAt","endsWith","exportContamination","performProactiveScan","scanned","scanResults","criticalThreats","criticalPaths","scanPath","readFileSync","t","threatCount","activateEmergencyLockdown","NODE_MODULES_EMERGENCY_LOCKDOWN","FILESYSTEM_PROTECTION_EMERGENCY","isEmergencyLockdown","emergencyMonitoringActive","activated","globalMonitorInstance","getGlobalMonitor","resetGlobalMonitor","module","exports"],"sources":["nodeModulesMonitor.js"],"sourcesContent":["/**\n * Node Modules File Integrity Monitor\n * \n * This module provides comprehensive monitoring of node_modules file integrity\n * to detect corruption attempts during test runs. It creates checksums before\n * test runs and validates them afterward to ensure no files were contaminated.\n * \n * Features:\n * - Pre/post test integrity checking\n * - Checksum-based corruption detection\n * - Automatic backup and restoration\n * - Detailed corruption reporting\n * - Integration with test lifecycle\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nclass NodeModulesMonitor {\n    constructor(options = {}) {\n        this.projectRoot = path.resolve(options.projectRoot || process.cwd());\n        this.nodeModulesPath = path.join(this.projectRoot, 'node_modules');\n        this.backupDir = path.join(this.projectRoot, '.node-modules-backup');\n        this.checksumFile = path.join(this.projectRoot, '.node-modules-checksums.json');\n        this.logFile = path.join(this.projectRoot, 'development/node-modules-monitor.log');\n        \n        // Critical files to monitor closely\n        this.criticalFiles = [\n            'exit/lib/exit.js',\n            'jest-worker/build/index.js',\n            'jest/package.json',\n            'exit/package.json'\n        ];\n        \n        // Configuration\n        this.config = {\n            enableBackup: options.enableBackup !== false,\n            enableRestore: options.enableRestore !== false,\n            enableDetailed: options.enableDetailed !== false,\n            maxBackups: options.maxBackups || 3,\n            checksumAlgorithm: options.checksumAlgorithm || 'sha256',\n            ...options.config\n        };\n        \n        // Runtime state\n        this.preTestChecksums = new Map();\n        this.violations = [];\n        this.monitoringActive = false;\n        this.realTimeWatchers = new Map();\n        this.threatLevel = 'LOW';\n        \n        // Enhanced protection features\n        this.protectionFeatures = {\n            realTimeWatch: options.realTimeWatch !== false,\n            autoRestore: options.autoRestore !== false,\n            threatEscalation: options.threatEscalation !== false,\n            quarantineMode: options.quarantineMode !== false,\n            deepContentAnalysis: options.deepContentAnalysis !== false,\n            proactiveScanning: options.proactiveScanning !== false,\n            emergencyLockdown: options.emergencyLockdown !== false\n        };\n        \n        this.log('NodeModulesMonitor initialized', { \n            projectRoot: this.projectRoot,\n            features: this.protectionFeatures \n        });\n    }\n    \n    /**\n     * Start monitoring before test run\n     * Creates checksums and backups of critical files\n     */\n    async startMonitoring() {\n        this.log('Starting node_modules integrity monitoring');\n        this.monitoringActive = true;\n        this.violations = [];\n        \n        try {\n            // Create backup directory if needed\n            if (this.config.enableBackup) {\n                await this.ensureBackupDirectory();\n            }\n            \n            // Generate checksums for critical files\n            await this.generateChecksums();\n            \n            // Create backups of critical files\n            if (this.config.enableBackup) {\n                await this.createBackups();\n            }\n            \n            // Start real-time watching if enabled\n            if (this.protectionFeatures.realTimeWatch) {\n                await this.startRealTimeWatching();\n            }\n            \n            this.log('Node_modules monitoring started successfully', {\n                filesMonitored: this.preTestChecksums.size,\n                backupsCreated: this.config.enableBackup,\n                realTimeWatching: this.protectionFeatures.realTimeWatch\n            });\n            \n            return {\n                success: true,\n                filesMonitored: this.preTestChecksums.size,\n                timestamp: new Date().toISOString()\n            };\n            \n        } catch (error) {\n            this.log('Failed to start monitoring', { error: error.message }, 'error');\n            this.monitoringActive = false;\n            throw new Error(`Failed to start node_modules monitoring: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Check integrity after test run\n     * Validates checksums and detects any corruption\n     */\n    async checkIntegrity() {\n        if (!this.monitoringActive) {\n            throw new Error('Monitoring not active - call startMonitoring() first');\n        }\n        \n        this.log('Checking node_modules integrity');\n        \n        try {\n            const violations = [];\n            const currentChecksums = new Map();\n            \n            // Check each monitored file\n            for (const [filePath, originalChecksum] of this.preTestChecksums) {\n                const currentChecksum = await this.calculateFileChecksum(filePath);\n                currentChecksums.set(filePath, currentChecksum);\n                \n                if (currentChecksum !== originalChecksum) {\n                    const violation = {\n                        file: filePath,\n                        type: 'CHECKSUM_MISMATCH',\n                        originalChecksum,\n                        currentChecksum,\n                        timestamp: new Date().toISOString()\n                    };\n                    \n                    violations.push(violation);\n                    this.log('Integrity violation detected', violation, 'error');\n                }\n            }\n            \n            // Check for new files that shouldn't exist\n            const newFiles = await this.detectUnexpectedFiles();\n            newFiles.forEach(file => {\n                const violation = {\n                    file: file,\n                    type: 'UNEXPECTED_FILE',\n                    timestamp: new Date().toISOString()\n                };\n                violations.push(violation);\n                this.log('Unexpected file detected', violation, 'warn');\n            });\n            \n            this.violations = violations;\n            \n            const result = {\n                success: violations.length === 0,\n                violations,\n                filesChecked: this.preTestChecksums.size,\n                unexpectedFiles: newFiles.length,\n                timestamp: new Date().toISOString()\n            };\n            \n            if (violations.length > 0) {\n                this.log('Integrity check FAILED', {\n                    violationCount: violations.length,\n                    types: [...new Set(violations.map(v => v.type))]\n                }, 'error');\n            } else {\n                this.log('Integrity check PASSED', { filesChecked: this.preTestChecksums.size });\n            }\n            \n            return result;\n            \n        } catch (error) {\n            this.log('Integrity check failed', { error: error.message }, 'error');\n            throw new Error(`Integrity check failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Restore corrupted files from backups\n     */\n    async restoreCorruptedFiles() {\n        if (this.violations.length === 0) {\n            this.log('No violations to restore');\n            return { restored: 0, message: 'No corrupted files found' };\n        }\n        \n        if (!this.config.enableRestore) {\n            this.log('Restore disabled in configuration');\n            return { restored: 0, message: 'Restore disabled' };\n        }\n        \n        // Check if backups are available before attempting restoration\n        const availableBackups = await this.getAvailableBackups();\n        if (availableBackups.length === 0) {\n            this.log('No backups available for restoration', {}, 'error');\n            throw new Error('No backups available');\n        }\n        \n        this.log('Starting file restoration');\n        let restoredCount = 0;\n        const restoredFiles = [];\n        \n        for (const violation of this.violations) {\n            if (violation.type === 'CHECKSUM_MISMATCH') {\n                try {\n                    await this.restoreFile(violation.file);\n                    restoredFiles.push(violation.file);\n                    restoredCount++;\n                    this.log('File restored', { file: violation.file });\n                } catch (error) {\n                    this.log('Failed to restore file', {\n                        file: violation.file,\n                        error: error.message\n                    }, 'error');\n                }\n            }\n        }\n        \n        this.log('File restoration completed', {\n            restoredCount,\n            totalViolations: this.violations.length\n        });\n        \n        return {\n            restored: restoredCount,\n            files: restoredFiles,\n            message: `Restored ${restoredCount} corrupted files`\n        };\n    }\n    \n    /**\n     * Generate detailed integrity report\n     */\n    generateReport() {\n        const report = {\n            timestamp: new Date().toISOString(),\n            monitoringActive: this.monitoringActive,\n            filesMonitored: this.preTestChecksums.size,\n            violations: this.violations,\n            summary: {\n                totalViolations: this.violations.length,\n                corruptedFiles: this.violations.filter(v => v.type === 'CHECKSUM_MISMATCH').length,\n                unexpectedFiles: this.violations.filter(v => v.type === 'UNEXPECTED_FILE').length,\n                integrityStatus: this.violations.length === 0 ? 'CLEAN' : 'COMPROMISED'\n            },\n            criticalFiles: this.criticalFiles.map(file => {\n                const fullPath = path.join(this.nodeModulesPath, file);\n                const violation = this.violations.find(v => v.file === fullPath);\n                return {\n                    file,\n                    status: violation ? 'COMPROMISED' : 'CLEAN',\n                    violation: violation || null\n                };\n            })\n        };\n        \n        return report;\n    }\n    \n    /**\n     * Stop monitoring and cleanup\n     */\n    async stopMonitoring() {\n        this.log('Stopping node_modules monitoring');\n        \n        // Stop real-time watching\n        if (this.protectionFeatures.realTimeWatch) {\n            this.stopRealTimeWatching();\n        }\n        \n        // Save final checksums for future reference\n        if (this.preTestChecksums.size > 0) {\n            await this.saveChecksums();\n        }\n        \n        this.monitoringActive = false;\n        \n        this.log('Node_modules monitoring stopped', {\n            finalThreatLevel: this.threatLevel,\n            totalViolations: this.violations.length\n        });\n        \n        return {\n            success: true,\n            finalViolations: this.violations.length,\n            finalThreatLevel: this.threatLevel,\n            timestamp: new Date().toISOString()\n        };\n    }\n    \n    // ========================================================================\n    // PRIVATE METHODS\n    // ========================================================================\n    \n    /**\n     * Generate checksums for all critical files\n     */\n    async generateChecksums() {\n        this.preTestChecksums.clear();\n        \n        for (const file of this.criticalFiles) {\n            const fullPath = path.join(this.nodeModulesPath, file);\n            if (fs.existsSync(fullPath)) {\n                const checksum = await this.calculateFileChecksum(fullPath);\n                this.preTestChecksums.set(fullPath, checksum);\n            }\n        }\n        \n        // If detailed monitoring enabled, check all JS files in critical packages\n        if (this.config.enableDetailed) {\n            const detailedPaths = [\n                'exit',\n                'jest-worker',\n                'jest'\n            ];\n            \n            for (const packagePath of detailedPaths) {\n                const fullPackagePath = path.join(this.nodeModulesPath, packagePath);\n                if (fs.existsSync(fullPackagePath)) {\n                    await this.addPackageFiles(fullPackagePath);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add all JS files from a package to monitoring\n     */\n    async addPackageFiles(packagePath) {\n        try {\n            const files = this.getAllFilesRecursive(packagePath, ['.js', '.json']);\n            \n            for (const file of files) {\n                // Skip large files and test files\n                if (this.shouldSkipFile(file)) {\n                    continue;\n                }\n                \n                const checksum = await this.calculateFileChecksum(file);\n                this.preTestChecksums.set(file, checksum);\n            }\n        } catch (error) {\n            this.log('Failed to add package files', {\n                package: packagePath,\n                error: error.message\n            }, 'warn');\n        }\n    }\n    \n    /**\n     * Calculate checksum for a file\n     */\n    async calculateFileChecksum(filePath) {\n        return new Promise((resolve, reject) => {\n            try {\n                // Create a read stream to detect file system errors\n                const stream = fs.createReadStream(filePath);\n                const hash = crypto.createHash(this.config.checksumAlgorithm);\n                \n                stream.on('error', (error) => {\n                    reject(new Error(`Failed to read file ${filePath}: ${error.message}`));\n                });\n                \n                stream.on('data', (chunk) => {\n                    hash.update(chunk);\n                });\n                \n                stream.on('end', () => {\n                    resolve(hash.digest('hex'));\n                });\n                \n            } catch (error) {\n                reject(new Error(`Failed to calculate checksum for ${filePath}: ${error.message}`));\n            }\n        });\n    }\n    \n    /**\n     * Create backups of critical files\n     */\n    async createBackups() {\n        const timestamp = new Date().toISOString().replace(/:/g, '-');\n        const backupPath = path.join(this.backupDir, timestamp);\n        \n        await fs.promises.mkdir(backupPath, { recursive: true });\n        \n        let backedUpCount = 0;\n        \n        for (const file of this.criticalFiles) {\n            const sourcePath = path.join(this.nodeModulesPath, file);\n            const backupFilePath = path.join(backupPath, file);\n            \n            if (fs.existsSync(sourcePath)) {\n                try {\n                    await fs.promises.mkdir(path.dirname(backupFilePath), { recursive: true });\n                    await fs.promises.copyFile(sourcePath, backupFilePath);\n                    backedUpCount++;\n                } catch (error) {\n                    this.log('Failed to backup file', {\n                        file,\n                        error: error.message\n                    }, 'warn');\n                }\n            }\n        }\n        \n        // Cleanup old backups\n        await this.cleanupOldBackups();\n        \n        this.log('Backups created', { \n            backupPath, \n            filesBackedUp: backedUpCount \n        });\n    }\n    \n    /**\n     * Restore a file from the most recent backup\n     */\n    async restoreFile(filePath) {\n        const backups = await this.getAvailableBackups();\n        if (backups.length === 0) {\n            throw new Error('No backups available for restoration');\n        }\n        \n        const latestBackup = backups[0]; // Sorted by date, most recent first\n        const relativePath = path.relative(this.nodeModulesPath, filePath);\n        const backupFilePath = path.join(this.backupDir, latestBackup, relativePath);\n        \n        if (!fs.existsSync(backupFilePath)) {\n            throw new Error(`Backup not found: ${backupFilePath}`);\n        }\n        \n        // Restore the file\n        await fs.promises.copyFile(backupFilePath, filePath);\n        \n        this.log('File restored from backup', {\n            file: filePath,\n            backup: latestBackup\n        });\n    }\n    \n    /**\n     * Detect unexpected files in node_modules\n     */\n    async detectUnexpectedFiles() {\n        const unexpectedFiles = [];\n        \n        // Check for JSON files in critical packages that shouldn't be there\n        const suspiciousPatterns = [\n            /node_modules\\/exit\\/.*\\.json$/,\n            /node_modules\\/jest-worker\\/.*\\.json$/\n        ];\n        \n        for (const pattern of suspiciousPatterns) {\n            try {\n                const files = this.getAllFilesRecursive(this.nodeModulesPath);\n                const matches = files.filter(file => pattern.test(file));\n                \n                for (const match of matches) {\n                    // Check if it's a legitimate file (package.json, etc.)\n                    if (!this.isLegitimateFile(match)) {\n                        unexpectedFiles.push(match);\n                    }\n                }\n            } catch (error) {\n                this.log('Error detecting unexpected files', {\n                    pattern: pattern.toString(),\n                    error: error.message\n                }, 'warn');\n            }\n        }\n        \n        return unexpectedFiles;\n    }\n    \n    /**\n     * Check if a file is legitimate in node_modules\n     */\n    isLegitimateFile(filePath) {\n        const basename = path.basename(filePath);\n        const legitimateFiles = [\n            'package.json',\n            'package-lock.json',\n            'README.json',\n            'tsconfig.json'\n        ];\n        \n        return legitimateFiles.includes(basename);\n    }\n    \n    /**\n     * Get all files recursively from a directory\n     */\n    getAllFilesRecursive(dir, extensions = null) {\n        const files = [];\n        \n        function traverse(currentDir) {\n            try {\n                const items = fs.readdirSync(currentDir);\n                \n                for (const item of items) {\n                    const fullPath = path.join(currentDir, item);\n                    const stat = fs.statSync(fullPath);\n                    \n                    if (stat.isDirectory()) {\n                        // Skip node_modules subdirectories and common ignore patterns\n                        if (!item.startsWith('.') && item !== 'node_modules') {\n                            traverse(fullPath);\n                        }\n                    } else if (stat.isFile()) {\n                        if (!extensions || extensions.includes(path.extname(fullPath))) {\n                            files.push(fullPath);\n                        }\n                    }\n                }\n            } catch {\n                // Silently ignore permission errors\n            }\n        }\n        \n        traverse(dir);\n        return files;\n    }\n    \n    /**\n     * Check if a file should be skipped during monitoring\n     */\n    shouldSkipFile(filePath) {\n        const stat = fs.statSync(filePath);\n        const basename = path.basename(filePath);\n        \n        // Skip large files (> 1MB)\n        if (stat.size > 1024 * 1024) {\n            return true;\n        }\n        \n        // Skip test files and common ignore patterns\n        const skipPatterns = [\n            /\\.test\\./,\n            /\\.spec\\./,\n            /test/i,\n            /spec/i,\n            /example/i,\n            /demo/i,\n            /\\.min\\./\n        ];\n        \n        return skipPatterns.some(pattern => pattern.test(basename));\n    }\n    \n    /**\n     * Ensure backup directory exists\n     */\n    async ensureBackupDirectory() {\n        try {\n            await fs.promises.mkdir(this.backupDir, { recursive: true });\n        } catch (error) {\n            throw new Error(`Failed to create backup directory: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Get available backups sorted by date (newest first)\n     */\n    async getAvailableBackups() {\n        try {\n            if (!fs.existsSync(this.backupDir)) {\n                return [];\n            }\n            \n            const items = await fs.promises.readdir(this.backupDir);\n            const backups = [];\n            \n            for (const item of items) {\n                const itemPath = path.join(this.backupDir, item);\n                const stat = await fs.promises.stat(itemPath);\n                \n                if (stat.isDirectory()) {\n                    backups.push({\n                        name: item,\n                        path: itemPath,\n                        mtime: stat.mtime\n                    });\n                }\n            }\n            \n            // Sort by modification time, newest first\n            return backups\n                .sort((a, b) => b.mtime - a.mtime)\n                .map(backup => backup.name);\n                \n        } catch (error) {\n            this.log('Failed to get available backups', { error: error.message }, 'warn');\n            return [];\n        }\n    }\n    \n    /**\n     * Cleanup old backups beyond maxBackups limit\n     */\n    async cleanupOldBackups() {\n        try {\n            const backups = await this.getAvailableBackups();\n            \n            if (backups.length > this.config.maxBackups) {\n                // Keep only maxBackups, delete the rest (oldest first)\n                const toDelete = backups.slice(this.config.maxBackups);\n                \n                for (const backup of toDelete) {\n                    const backupPath = path.join(this.backupDir, backup);\n                    await fs.promises.rm(backupPath, { recursive: true, force: true });\n                    this.log('Old backup deleted', { backup });\n                }\n            }\n        } catch (error) {\n            this.log('Failed to cleanup old backups', { error: error.message }, 'warn');\n        }\n    }\n    \n    /**\n     * Save checksums to file for future reference\n     */\n    async saveChecksums() {\n        try {\n            const checksumData = {\n                timestamp: new Date().toISOString(),\n                checksums: Object.fromEntries(this.preTestChecksums),\n                algorithm: this.config.checksumAlgorithm\n            };\n            \n            await fs.promises.writeFile(\n                this.checksumFile,\n                JSON.stringify(checksumData, null, 2)\n            );\n        } catch (error) {\n            this.log('Failed to save checksums', { error: error.message }, 'warn');\n        }\n    }\n    \n    /**\n     * Log messages with timestamp and optional level\n     */\n    log(message, data = {}, level = 'info') {\n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            level: level.toUpperCase(),\n            message,\n            ...data\n        };\n        \n        // Console output for immediate feedback\n        const levelEmoji = {\n            info: 'ℹ️',\n            warn: '⚠️',\n            error: '❌'\n        };\n        \n        // Skip console output in test environment to avoid conflicts\n        if (process.env.NODE_ENV !== 'test') {\n            console.log(`${levelEmoji[level] || 'ℹ️'} [NodeModulesMonitor] ${message}`, \n                       Object.keys(data).length > 0 ? data : '');\n        }\n        \n        // File logging (async, non-blocking)\n        this.writeLogToFile(logEntry).catch(() => {\n            // Silently ignore log file write errors\n        });\n    }\n    \n    /**\n     * Write log entry to file\n     */\n    async writeLogToFile(logEntry) {\n        try {\n            // Skip file logging in test environment to avoid conflicts\n            if (process.env.NODE_ENV === 'test') {\n                return;\n            }\n            \n            // Ensure log directory exists\n            await fs.promises.mkdir(path.dirname(this.logFile), { recursive: true });\n            \n            const logLine = JSON.stringify(logEntry) + '\\n';\n            await fs.promises.appendFile(this.logFile, logLine);\n        } catch {\n            // Silently ignore - logging should not break the monitor\n        }\n    }\n    \n    /**\n     * Start real-time file watching for critical files\n     */\n    async startRealTimeWatching() {\n        try {\n            for (const file of this.criticalFiles) {\n                const fullPath = path.join(this.nodeModulesPath, file);\n                if (fs.existsSync(fullPath)) {\n                    const watcher = fs.watch(fullPath, (eventType, _filename) => {\n                        this.handleFileChange(fullPath, eventType);\n                    });\n                    this.realTimeWatchers.set(fullPath, watcher);\n                }\n            }\n            \n            this.log('Real-time watching started', { \n                watchedFiles: this.realTimeWatchers.size \n            });\n        } catch (error) {\n            this.log('Failed to start real-time watching', { \n                error: error.message \n            }, 'warn');\n        }\n    }\n    \n    /**\n     * Handle real-time file changes\n     */\n    async handleFileChange(filePath, eventType) {\n        if (eventType === 'change') {\n            try {\n                // Immediate integrity check on file change\n                const originalChecksum = this.preTestChecksums.get(filePath);\n                if (originalChecksum) {\n                    const currentChecksum = await this.calculateFileChecksum(filePath);\n                    \n                    if (currentChecksum !== originalChecksum) {\n                        this.escalateThreatLevel('HIGH');\n                        this.log('REAL-TIME VIOLATION DETECTED', {\n                            file: filePath,\n                            originalChecksum,\n                            currentChecksum,\n                            threatLevel: this.threatLevel\n                        }, 'error');\n                        \n                        // Auto-restore if enabled\n                        if (this.protectionFeatures.autoRestore) {\n                            await this.autoRestoreFile(filePath);\n                        }\n                    }\n                }\n            } catch (error) {\n                this.log('Error handling file change', {\n                    file: filePath,\n                    error: error.message\n                }, 'error');\n            }\n        }\n    }\n    \n    /**\n     * Escalate threat level based on violations\n     */\n    escalateThreatLevel(newLevel) {\n        const levels = ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'];\n        const currentIndex = levels.indexOf(this.threatLevel);\n        const newIndex = levels.indexOf(newLevel);\n        \n        if (newIndex > currentIndex) {\n            this.threatLevel = newLevel;\n            this.log('Threat level escalated', { \n                level: this.threatLevel \n            }, 'warn');\n            \n            // Trigger enhanced protection measures\n            if (this.threatLevel === 'CRITICAL' && this.protectionFeatures.quarantineMode) {\n                this.activateQuarantineMode();\n            }\n        }\n    }\n    \n    /**\n     * Auto-restore a corrupted file\n     */\n    async autoRestoreFile(filePath) {\n        try {\n            await this.restoreFile(filePath);\n            this.log('Auto-restored corrupted file', { file: filePath });\n            \n            // Verify restoration\n            const originalChecksum = this.preTestChecksums.get(filePath);\n            const restoredChecksum = await this.calculateFileChecksum(filePath);\n            \n            if (restoredChecksum === originalChecksum) {\n                this.log('File restoration verified', { file: filePath });\n            } else {\n                this.escalateThreatLevel('CRITICAL');\n                this.log('File restoration FAILED verification', {\n                    file: filePath,\n                    expected: originalChecksum,\n                    actual: restoredChecksum\n                }, 'error');\n            }\n        } catch (error) {\n            this.escalateThreatLevel('CRITICAL');\n            this.log('Auto-restore failed', {\n                file: filePath,\n                error: error.message\n            }, 'error');\n        }\n    }\n    \n    /**\n     * Activate quarantine mode - maximum protection\n     */\n    activateQuarantineMode() {\n        this.log('QUARANTINE MODE ACTIVATED', {\n            threatLevel: this.threatLevel,\n            timestamp: new Date().toISOString()\n        }, 'error');\n        \n        // In test environment, don't trigger process exit to avoid Jest worker crashes\n        if (process.env.NODE_ENV === 'test') {\n            this.log('QUARANTINE MODE: Test environment detected, skipping process exit', {\n                testMode: true,\n                reason: 'prevent_jest_worker_crash'\n            }, 'warn');\n            return;\n        }\n        \n        // Stop all test execution if possible (production only)\n        if (typeof process.emit === 'function') {\n            process.emit('SIGTERM');\n        }\n    }\n    \n    /**\n     * Stop real-time watching\n     */\n    stopRealTimeWatching() {\n        for (const [filePath, watcher] of this.realTimeWatchers) {\n            try {\n                watcher.close();\n            } catch (error) {\n                this.log('Error closing watcher', {\n                    file: filePath,\n                    error: error.message\n                }, 'warn');\n            }\n        }\n        this.realTimeWatchers.clear();\n        this.log('Real-time watching stopped');\n    }\n    \n    /**\n     * Enhanced threat reporting for integration with test/setup.js\n     */\n    reportThreat(threatType, details) {\n        const threat = {\n            type: threatType,\n            details,\n            timestamp: new Date().toISOString(),\n            threatLevel: this.threatLevel,\n            sessionId: this.sessionId || `session_${Date.now()}`\n        };\n        \n        this.log('THREAT REPORTED', threat, 'error');\n        \n        // ENHANCED: Immediate response to real-time threats\n        if (threatType === 'REALTIME_CONTAMINATION_ATTEMPT') {\n            this.handleRealTimeThreat(threat);\n        }\n        \n        // Escalate based on threat type\n        switch (threatType) {\n            case 'JSON_TO_JS_CONTAMINATION':\n            case 'REALTIME_CONTAMINATION_ATTEMPT':\n                this.escalateThreatLevel('CRITICAL');\n                break;\n            case 'JSON_CONTAMINATION':\n                this.escalateThreatLevel('HIGH');\n                break;\n            case 'COVERAGE_CONTAMINATION':\n                this.escalateThreatLevel('HIGH');\n                break;\n            default:\n                this.escalateThreatLevel('MEDIUM');\n        }\n        \n        // ENHANCED: Coverage-specific threat handling\n        if (details.isCoverageMode) {\n            this.handleCoverageThreat(threat);\n        }\n        \n        return threat;\n    }\n    \n    /**\n     * Handle real-time threats with immediate response\n     */\n    handleRealTimeThreat(threat) {\n        this.log('REAL-TIME THREAT DETECTED', {\n            type: threat.type,\n            file: threat.details.filePath,\n            writeType: threat.details.writeType,\n            emergencyProtocol: 'ACTIVATED'\n        }, 'error');\n        \n        // Immediate file protection\n        if (threat.details.filePath && this.protectionFeatures.autoRestore) {\n            process.nextTick(async () => {\n                try {\n                    await this.emergencyFileProtection(threat.details.filePath);\n                } catch (error) {\n                    this.log('Emergency file protection failed', {\n                        file: threat.details.filePath,\n                        error: error.message\n                    }, 'error');\n                }\n            });\n        }\n        \n        // Signal emergency state\n        this.isEmergencyMode = true;\n        process.env.NODE_MODULES_EMERGENCY = 'true';\n    }\n    \n    /**\n     * Handle coverage-specific threats\n     */\n    handleCoverageThreat(threat) {\n        this.log('COVERAGE THREAT DETECTED', {\n            type: threat.type,\n            coverageMode: threat.details.isCoverageMode,\n            emergencyAction: 'COVERAGE_PROTECTION_ACTIVATED'\n        }, 'error');\n        \n        // Set coverage emergency flag\n        process.env.COVERAGE_THREAT_DETECTED = 'true';\n        \n        // Enhanced coverage protection measures\n        if (this.protectionFeatures.quarantineMode) {\n            this.activateCoverageQuarantine();\n        }\n    }\n    \n    /**\n     * Emergency file protection for immediate threats\n     */\n    async emergencyFileProtection(filePath) {\n        this.log('EMERGENCY FILE PROTECTION ACTIVATED', { file: filePath }, 'error');\n        \n        try {\n            // Check if file is in our monitoring list\n            const originalChecksum = this.preTestChecksums.get(filePath);\n            if (originalChecksum) {\n                const currentChecksum = await this.calculateFileChecksum(filePath);\n                \n                if (currentChecksum !== originalChecksum) {\n                    this.log('EMERGENCY RESTORATION REQUIRED', {\n                        file: filePath,\n                        checksumMismatch: true\n                    }, 'error');\n                    \n                    // Immediate restoration\n                    await this.autoRestoreFile(filePath);\n                }\n            }\n        } catch (error) {\n            this.log('Emergency protection failed', {\n                file: filePath,\n                error: error.message\n            }, 'error');\n        }\n    }\n    \n    /**\n     * Activate coverage-specific quarantine mode\n     */\n    activateCoverageQuarantine() {\n        this.log('COVERAGE QUARANTINE ACTIVATED', {\n            timestamp: new Date().toISOString(),\n            threatLevel: this.threatLevel\n        }, 'error');\n        \n        // Signal to Jest/coverage systems\n        process.env.COVERAGE_QUARANTINE_ACTIVE = 'true';\n        \n        // Enhanced monitoring for coverage files\n        this.startCoverageFileMonitoring();\n    }\n    \n    /**\n     * Enhanced monitoring specifically for coverage file operations\n     */\n    startCoverageFileMonitoring() {\n        const coveragePatterns = [\n            'coverage/',\n            '.nyc_output/',\n            'lcov.info',\n            'coverage-final.json'\n        ];\n        \n        this.log('Starting coverage file monitoring', {\n            patterns: coveragePatterns,\n            enhanced: true\n        });\n        \n        // This would be implemented with additional file watchers\n        // focused on coverage-related paths\n        this.coverageMonitoringActive = true;\n    }\n    \n    /**\n     * ENHANCED: Deep content analysis for advanced threat detection\n     */\n    async performDeepContentAnalysis(filePath, content) {\n        if (!this.protectionFeatures.deepContentAnalysis) {\n            return null;\n        }\n        \n        const threats = [];\n        \n        try {\n            // Analyze file structure for JSON contamination patterns\n            const suspiciousPatterns = [\n                // TODO.json specific patterns\n                /\"project\"\\s*:\\s*\"[^\"]*infinite-continue-stop-hook\"/,\n                /\"current_mode\"\\s*:\\s*\"(development|testing|research|refactoring)\"/,\n                /\"tasks\"\\s*:\\s*\\[\\s*\\{/,\n                /\"execution_count\"\\s*:\\s*\\d+/,\n                \n                // Hook system contamination\n                /infinite-continue-stop-hook/,\n                /stop-hook\\.js/,\n                /CLAUDE\\.md/,\n                \n                // Task management contamination\n                /\"task_\\d{13}_[a-z0-9]+\"/,\n                /\"status\"\\s*:\\s*\"(pending|in_progress|completed)\"/,\n                /\"priority\"\\s*:\\s*\"(high|medium|low|critical)\"/,\n                \n                // Process manipulation patterns\n                /process\\.env\\.[A-Z_]+\\s*=\\s*[\"'][^\"']*[\"']/,\n                /global\\.[a-zA-Z_]+\\s*=\\s*\\{/,\n                \n                // Coverage system contamination\n                /\"__coverage__\"\\s*:\\s*\\{/,\n                /coverage-final\\.json/,\n                /\"c\"\\s*:\\s*\\{\\s*\"\\d+\":/\n            ];\n            \n            for (const pattern of suspiciousPatterns) {\n                if (pattern.test(content)) {\n                    threats.push({\n                        type: 'PATTERN_MATCH',\n                        pattern: pattern.toString(),\n                        severity: 'HIGH',\n                        file: filePath\n                    });\n                }\n            }\n            \n            // Analyze for binary-in-text injection\n            if (typeof content === 'string') {\n                let binaryCharCount = 0;\n                for (let i = 0; i < Math.min(content.length, 2048); i++) {\n                    const code = content.charCodeAt(i);\n                    if ((code < 32 && code !== 9 && code !== 10 && code !== 13) || code === 127) {\n                        binaryCharCount++;\n                    }\n                }\n                \n                if (binaryCharCount > 10) {\n                    threats.push({\n                        type: 'BINARY_INJECTION',\n                        severity: 'CRITICAL',\n                        file: filePath,\n                        binaryCharCount\n                    });\n                }\n            }\n            \n            // Check for module export contamination\n            if (filePath.endsWith('.js') && typeof content === 'string') {\n                const exportContamination = [\n                    /module\\.exports\\s*=\\s*\\{[^}]*\"project\"[^}]*\\}/,\n                    /exports\\.[a-zA-Z_]+\\s*=\\s*\\{[^}]*\"tasks\"[^}]*\\}/,\n                    /module\\.exports\\s*=\\s*\\{[^}]*\"current_mode\"[^}]*\\}/\n                ];\n                \n                for (const pattern of exportContamination) {\n                    if (pattern.test(content)) {\n                        threats.push({\n                            type: 'MODULE_EXPORT_CONTAMINATION',\n                            severity: 'CRITICAL',\n                            file: filePath,\n                            pattern: pattern.toString()\n                        });\n                    }\n                }\n            }\n            \n            return threats.length > 0 ? threats : null;\n            \n        } catch (error) {\n            this.log('Deep content analysis failed', {\n                file: filePath,\n                error: error.message\n            }, 'error');\n            return null;\n        }\n    }\n    \n    /**\n     * ENHANCED: Proactive scanning of critical directories\n     */\n    async performProactiveScan() {\n        if (!this.protectionFeatures.proactiveScanning) {\n            return { scanned: 0, threats: [] };\n        }\n        \n        this.log('Starting proactive security scan');\n        \n        const scanResults = {\n            scanned: 0,\n            threats: [],\n            criticalThreats: 0\n        };\n        \n        const criticalPaths = [\n            path.join(this.nodeModulesPath, 'exit/lib/exit.js'),\n            path.join(this.nodeModulesPath, 'jest-worker/build/index.js'),\n            path.join(this.nodeModulesPath, 'jest/package.json'),\n            path.join(this.projectRoot, 'package.json'),\n            path.join(this.projectRoot, 'TODO.json')\n        ];\n        \n        for (const scanPath of criticalPaths) {\n            try {\n                if (fs.existsSync(scanPath)) {\n                    const content = fs.readFileSync(scanPath, 'utf8');\n                    const threats = await this.performDeepContentAnalysis(scanPath, content);\n                    \n                    if (threats && threats.length > 0) {\n                        scanResults.threats.push(...threats);\n                        scanResults.criticalThreats += threats.filter(t => t.severity === 'CRITICAL').length;\n                        \n                        this.log('Proactive scan detected threats', {\n                            file: scanPath,\n                            threatCount: threats.length,\n                            threats: threats.map(t => t.type)\n                        }, 'error');\n                    }\n                    \n                    scanResults.scanned++;\n                }\n            } catch (error) {\n                this.log('Proactive scan error', {\n                    file: scanPath,\n                    error: error.message\n                }, 'warn');\n            }\n        }\n        \n        this.log('Proactive scan completed', scanResults);\n        \n        // Auto-escalate if critical threats found\n        if (scanResults.criticalThreats > 0 && this.protectionFeatures.threatEscalation) {\n            this.escalateThreatLevel('CRITICAL');\n            \n            if (this.protectionFeatures.emergencyLockdown) {\n                await this.activateEmergencyLockdown();\n            }\n        }\n        \n        return scanResults;\n    }\n    \n    /**\n     * ENHANCED: Emergency lockdown mode for critical threats\n     */\n    async activateEmergencyLockdown() {\n        this.log('EMERGENCY LOCKDOWN ACTIVATED', {\n            threatLevel: this.threatLevel,\n            timestamp: new Date().toISOString()\n        }, 'error');\n        \n        // Set emergency environment flags\n        process.env.NODE_MODULES_EMERGENCY_LOCKDOWN = 'true';\n        process.env.FILESYSTEM_PROTECTION_EMERGENCY = 'true';\n        \n        // Signal to test systems to halt immediately\n        this.isEmergencyLockdown = true;\n        \n        // Enhanced file monitoring\n        this.emergencyMonitoringActive = true;\n        \n        return {\n            activated: true,\n            timestamp: new Date().toISOString(),\n            threatLevel: this.threatLevel\n        };\n    }\n}\n\n// Export singleton instance for global access\nlet globalMonitorInstance = null;\n\n/**\n * Get or create global monitor instance\n */\nfunction getGlobalMonitor(options = {}) {\n    if (!globalMonitorInstance) {\n        globalMonitorInstance = new NodeModulesMonitor(options);\n    }\n    return globalMonitorInstance;\n}\n\n/**\n * Reset global monitor instance (for testing)\n */\nfunction resetGlobalMonitor() {\n    if (globalMonitorInstance) {\n        globalMonitorInstance.stopMonitoring().catch(() => {\n            // Ignore cleanup errors during reset\n        });\n    }\n    globalMonitorInstance = null;\n}\n\nmodule.exports = NodeModulesMonitor;\nmodule.exports.getGlobalMonitor = getGlobalMonitor;\nmodule.exports.resetGlobalMonitor = resetGlobalMonitor;"],"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","ignoreList":[]}