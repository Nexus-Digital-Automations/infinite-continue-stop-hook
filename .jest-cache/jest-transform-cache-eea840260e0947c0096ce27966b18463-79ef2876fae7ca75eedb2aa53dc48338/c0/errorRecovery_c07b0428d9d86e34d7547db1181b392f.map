{"version":3,"names":["cov_oepys2yyb","actualCoverage","fs","s","require","path","crypto","ErrorRecovery","constructor","options","b","f","maxBackups","backupDir","lockTimeout","activeLocks","Map","createBackup","filePath","includes","success","error","backupPath","existsSync","fileDir","dirname","backupDirPath","join","mkdirSync","recursive","timestamp","Date","toISOString","replace","fileContent","readFileSync","checksum","createHash","update","digest","substr","backupFilename","copyFileSync","_cleanupOldBackups","size","statSync","message","restoreFromBackup","specificBackup","restoredFrom","backupToRestore","backups","_listBackups","length","validationResult","_validateBackup","isValid","backupInfo","atomicWrite","content","backupCreated","tempPath","now","backupResult","writeFileSync","JSON","parse","jsonError","unlinkSync","renameSync","acquireLock","lockPath","lockId","randomBytes","toString","lockInfo","_readLockFile","_isLockValid","lockData","pid","process","stringify","set","releaseLock","activeLock","get","delete","listAvailableBackups","recoverCorruptedFile","strategies","strategy","result","_executeRecoveryStrategy","recoveredData","data","toDelete","slice","forEach","backup","_cleanupLegacyBackups","projectRoot","legacyBackups","_listLegacyBackups","files","readdirSync","filter","file","test","map","stats","matches","match","parseInt","filename","created","mtime","sort","a","cleanupLegacyBackups","deletedCount","keptCount","toKeep","keptFiles","startsWith","endsWith","project","Array","isArray","tasks","taskCount","age","_strategyRestoreFromBackup","_strategyRepairJsonSyntax","_strategyRebuildFromFragments","_strategyCreateMinimalStructure","_filePath","minimalStructure","basename","review_strikes","strikes_completed_last_run","current_task_index","last_mode","module","exports"],"sources":["errorRecovery.js"],"sourcesContent":["/**\n * Error Recovery Manager\n * \n * Handles backup creation, file recovery, and atomic operations\n * for TODO.json files to ensure data safety during modifications.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nclass ErrorRecovery {\n    constructor(options = {}) {\n        this.maxBackups = options.maxBackups || 3;\n        this.backupDir = options.backupDir || '.todo-backups';\n        this.lockTimeout = options.lockTimeout || 5000; // 5 seconds\n        this.activeLocks = new Map();\n    }\n\n    /**\n     * Creates a backup of the TODO.json file before modifications\n     * @param {string} filePath - Path to the TODO.json file\n     * @returns {Object} Backup creation result\n     */\n    async createBackup(filePath) {\n        try {\n            // CRITICAL SAFETY CHECK: Only backup TODO.json files\n            if (filePath.includes('node_modules') || !filePath.includes('TODO.json')) {\n                return {\n                    success: false,\n                    error: `Unsafe backup source: ${filePath}. Only TODO.json files can be backed up.`,\n                    backupPath: null\n                };\n            }\n\n            if (!fs.existsSync(filePath)) {\n                return {\n                    success: false,\n                    error: 'File does not exist',\n                    backupPath: null\n                };\n            }\n\n            const fileDir = path.dirname(filePath);\n            const backupDirPath = path.join(fileDir, this.backupDir);\n            \n            // Ensure backup directory exists\n            if (!fs.existsSync(backupDirPath)) {\n                fs.mkdirSync(backupDirPath, { recursive: true });\n            }\n\n            // Generate backup filename with timestamp and checksum\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n            const fileContent = fs.readFileSync(filePath, 'utf8');\n            const checksum = crypto.createHash('md5').update(fileContent).digest('hex').substr(0, 8);\n            const backupFilename = `TODO.json.${timestamp}.${checksum}.backup`;\n            const backupPath = path.join(backupDirPath, backupFilename);\n\n            // Copy file to backup location\n            fs.copyFileSync(filePath, backupPath);\n\n            // Clean up old backups\n            await this._cleanupOldBackups(backupDirPath);\n\n            return {\n                success: true,\n                backupPath,\n                timestamp,\n                checksum,\n                size: fs.statSync(backupPath).size\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                backupPath: null\n            };\n        }\n    }\n\n    /**\n     * Restores TODO.json from the most recent backup\n     * @param {string} filePath - Path to the TODO.json file\n     * @param {string} specificBackup - Optional specific backup file to restore\n     * @returns {Object} Restoration result\n     */\n    async restoreFromBackup(filePath, specificBackup = null) {\n        try {\n            const fileDir = path.dirname(filePath);\n            const backupDirPath = path.join(fileDir, this.backupDir);\n\n            if (!fs.existsSync(backupDirPath)) {\n                return {\n                    success: false,\n                    error: 'No backup directory found',\n                    restoredFrom: null\n                };\n            }\n\n            let backupToRestore;\n            \n            if (specificBackup) {\n                backupToRestore = path.join(backupDirPath, specificBackup);\n                if (!fs.existsSync(backupToRestore)) {\n                    return {\n                        success: false,\n                        error: 'Specified backup file not found',\n                        restoredFrom: null\n                    };\n                }\n            } else {\n                // Find the most recent backup\n                const backups = this._listBackups(backupDirPath);\n                if (backups.length === 0) {\n                    return {\n                        success: false,\n                        error: 'No backup files found',\n                        restoredFrom: null\n                    };\n                }\n                backupToRestore = backups[0].path; // Most recent first\n            }\n\n            // Validate backup before restoring\n            const validationResult = await this._validateBackup(backupToRestore);\n            if (!validationResult.isValid) {\n                return {\n                    success: false,\n                    error: `Backup validation failed: ${validationResult.error}`,\n                    restoredFrom: null\n                };\n            }\n\n            // Create backup of current file before restoring\n            if (fs.existsSync(filePath)) {\n                await this.createBackup(filePath);\n            }\n\n            // Restore from backup\n            fs.copyFileSync(backupToRestore, filePath);\n\n            return {\n                success: true,\n                restoredFrom: backupToRestore,\n                backupInfo: validationResult.backupInfo\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                restoredFrom: null\n            };\n        }\n    }\n\n    /**\n     * Performs atomic write operation with rollback capability\n     * @param {string} filePath - Path to the file\n     * @param {string} content - Content to write\n     * @param {boolean} createBackup - Whether to create backup before writing\n     * @returns {Object} Write operation result\n     */\n    async atomicWrite(filePath, content, createBackup = true) {\n        // CRITICAL SAFETY CHECK: Prevent writing to node_modules or system files\n        if (filePath.includes('node_modules') || filePath.includes('/usr/') || filePath.includes('/bin/') || \n            filePath.includes('/lib/') || filePath.includes('/system/') || !filePath.includes('TODO.json')) {\n            return {\n                success: false,\n                error: `Unsafe file path detected: ${filePath}. Only TODO.json files are allowed.`,\n                backupCreated: false\n            };\n        }\n\n        const tempPath = `${filePath}.tmp.${Date.now()}`;\n        let backupResult = null;\n\n        try {\n            // Create backup if requested and file exists\n            if (createBackup && fs.existsSync(filePath)) {\n                backupResult = await this.createBackup(filePath);\n                if (!backupResult.success) {\n                    return {\n                        success: false,\n                        error: `Backup failed: ${backupResult.error}`,\n                        backupCreated: false\n                    };\n                }\n            }\n\n            // Write to temporary file first\n            fs.writeFileSync(tempPath, content, 'utf8');\n\n            // Validate the written content\n            try {\n                JSON.parse(content);\n            } catch (jsonError) {\n                fs.unlinkSync(tempPath);\n                return {\n                    success: false,\n                    error: `Invalid JSON content: ${jsonError.message}`,\n                    backupCreated: backupResult ? backupResult.success : false\n                };\n            }\n\n            // Atomic move from temp to final location\n            fs.renameSync(tempPath, filePath);\n\n            return {\n                success: true,\n                backupCreated: backupResult ? backupResult.success : false,\n                backupPath: backupResult ? backupResult.backupPath : null\n            };\n\n        } catch (error) {\n            // Clean up temp file if it exists\n            if (fs.existsSync(tempPath)) {\n                try {\n                    fs.unlinkSync(tempPath);\n                } catch {\n                    // Ignore cleanup errors\n                }\n            }\n\n            return {\n                success: false,\n                error: error.message,\n                backupCreated: backupResult ? backupResult.success : false\n            };\n        }\n    }\n\n    /**\n     * Acquires a file lock to prevent concurrent modifications\n     * @param {string} filePath - Path to the file to lock\n     * @returns {Object} Lock acquisition result\n     */\n    async acquireLock(filePath) {\n        const lockPath = `${filePath}.lock`;\n        const lockId = crypto.randomBytes(16).toString('hex');\n        \n        try {\n            // Check if lock already exists\n            if (fs.existsSync(lockPath)) {\n                const lockInfo = this._readLockFile(lockPath);\n                if (lockInfo && this._isLockValid(lockInfo)) {\n                    return {\n                        success: false,\n                        error: 'File is locked by another process',\n                        lockId: null\n                    };\n                } else {\n                    // Remove stale lock\n                    fs.unlinkSync(lockPath);\n                }\n            }\n\n            // Create lock file\n            const lockData = {\n                lockId,\n                pid: process.pid,\n                timestamp: Date.now(),\n                filePath\n            };\n\n            fs.writeFileSync(lockPath, JSON.stringify(lockData), 'utf8');\n            this.activeLocks.set(filePath, { lockId, lockPath });\n\n            return {\n                success: true,\n                lockId,\n                lockPath\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                lockId: null\n            };\n        }\n    }\n\n    /**\n     * Releases a file lock\n     * @param {string} filePath - Path to the file to unlock\n     * @param {string} lockId - Lock ID for verification\n     * @returns {Object} Lock release result\n     */\n    async releaseLock(filePath, lockId) {\n        try {\n            const activeLock = this.activeLocks.get(filePath);\n            if (!activeLock || activeLock.lockId !== lockId) {\n                return {\n                    success: false,\n                    error: 'Invalid lock ID or file not locked by this process'\n                };\n            }\n\n            // Remove lock file\n            if (fs.existsSync(activeLock.lockPath)) {\n                fs.unlinkSync(activeLock.lockPath);\n            }\n\n            // Remove from active locks\n            this.activeLocks.delete(filePath);\n\n            return {\n                success: true\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Lists available backups for a TODO.json file\n     * @param {string} filePath - Path to the TODO.json file\n     * @returns {Array} List of available backups\n     */\n    listAvailableBackups(filePath) {\n        try {\n            const fileDir = path.dirname(filePath);\n            const backupDirPath = path.join(fileDir, this.backupDir);\n\n            if (!fs.existsSync(backupDirPath)) {\n                return [];\n            }\n\n            return this._listBackups(backupDirPath);\n\n        } catch {\n            return [];\n        }\n    }\n\n    /**\n     * Recovers from corrupted TODO.json using various strategies\n     * @param {string} filePath - Path to the corrupted file\n     * @returns {Object} Recovery result\n     */\n    async recoverCorruptedFile(filePath) {\n        const strategies = [\n            'restore_from_backup',\n            'repair_json_syntax',\n            'rebuild_from_fragments',\n            'create_minimal_structure'\n        ];\n\n        for (const strategy of strategies) {\n            const result = await this._executeRecoveryStrategy(strategy, filePath);\n            if (result.success) {\n                return {\n                    success: true,\n                    strategy,\n                    message: result.message,\n                    recoveredData: result.data\n                };\n            }\n        }\n\n        return {\n            success: false,\n            error: 'All recovery strategies failed',\n            strategies: strategies\n        };\n    }\n\n    /**\n     * Cleans up old backup files in both current and legacy locations\n     */\n    async _cleanupOldBackups(backupDirPath) {\n        try {\n            // Clean up current backups in .todo-backups directory\n            const backups = this._listBackups(backupDirPath);\n            \n            if (backups.length > this.maxBackups) {\n                const toDelete = backups.slice(this.maxBackups);\n                toDelete.forEach(backup => {\n                    try {\n                        fs.unlinkSync(backup.path);\n                    } catch {\n                        // Ignore individual deletion errors\n                    }\n                });\n            }\n\n            // Clean up legacy backups in project root directory\n            await this._cleanupLegacyBackups(backupDirPath);\n        } catch {\n            // Ignore cleanup errors\n        }\n    }\n\n    /**\n     * Cleans up legacy backup files in the project root directory\n     */\n    async _cleanupLegacyBackups(backupDirPath) {\n        try {\n            // Get the project root directory (parent of .todo-backups)\n            const projectRoot = path.dirname(backupDirPath);\n            const legacyBackups = this._listLegacyBackups(projectRoot);\n            \n            if (legacyBackups.length > this.maxBackups) {\n                const toDelete = legacyBackups.slice(this.maxBackups);\n                toDelete.forEach(backup => {\n                    try {\n                        fs.unlinkSync(backup.path);\n                    } catch {\n                        // Ignore individual deletion errors\n                    }\n                });\n            }\n        } catch {\n            // Ignore cleanup errors for legacy backups\n        }\n    }\n\n    /**\n     * Lists and sorts legacy backup files from project root\n     */\n    _listLegacyBackups(projectRoot) {\n        try {\n            const files = fs.readdirSync(projectRoot)\n                .filter(file => /^TODO\\.json\\.backup\\.\\d+$/.test(file))\n                .map(file => {\n                    const filePath = path.join(projectRoot, file);\n                    const stats = fs.statSync(filePath);\n                    \n                    // Extract timestamp from filename (unix timestamp)\n                    const matches = file.match(/TODO\\.json\\.backup\\.(\\d+)$/);\n                    const timestamp = matches ? parseInt(matches[1]) : 0;\n                    \n                    return {\n                        filename: file,\n                        path: filePath,\n                        timestamp,\n                        size: stats.size,\n                        created: stats.mtime\n                    };\n                });\n\n            // Sort by creation time (newest first)\n            return files.sort((a, b) => b.created - a.created);\n\n        } catch {\n            return [];\n        }\n    }\n\n    /**\n     * Manually cleans up all legacy backup files, keeping only the most recent ones\n     * @param {string} filePath - Path to the TODO.json file\n     * @returns {Object} Cleanup result\n     */\n    async cleanupLegacyBackups(filePath) {\n        try {\n            const projectRoot = path.dirname(filePath);\n            const legacyBackups = this._listLegacyBackups(projectRoot);\n            \n            if (legacyBackups.length <= this.maxBackups) {\n                return {\n                    success: true,\n                    message: `Found ${legacyBackups.length} legacy backups, no cleanup needed`,\n                    deletedCount: 0,\n                    keptCount: legacyBackups.length\n                };\n            }\n\n            const toDelete = legacyBackups.slice(this.maxBackups);\n            const toKeep = legacyBackups.slice(0, this.maxBackups);\n            let deletedCount = 0;\n\n            toDelete.forEach(backup => {\n                try {\n                    fs.unlinkSync(backup.path);\n                    deletedCount++;\n                } catch {\n                    // Log but continue with other deletions\n                }\n            });\n\n            return {\n                success: true,\n                message: `Cleaned up ${deletedCount} legacy backup files, kept ${toKeep.length} most recent`,\n                deletedCount,\n                keptCount: toKeep.length,\n                keptFiles: toKeep.map(b => b.filename)\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                deletedCount: 0,\n                keptCount: 0\n            };\n        }\n    }\n\n    /**\n     * Lists and sorts backup files\n     */\n    _listBackups(backupDirPath) {\n        try {\n            const files = fs.readdirSync(backupDirPath)\n                .filter(file => file.startsWith('TODO.json.') && file.endsWith('.backup'))\n                .map(file => {\n                    const filePath = path.join(backupDirPath, file);\n                    const stats = fs.statSync(filePath);\n                    \n                    // Extract timestamp from filename\n                    const matches = file.match(/TODO\\.json\\.([^.]+)\\.([^.]+)\\.backup/);\n                    const timestamp = matches ? matches[1] : '';\n                    const checksum = matches ? matches[2] : '';\n                    \n                    return {\n                        filename: file,\n                        path: filePath,\n                        timestamp,\n                        checksum,\n                        size: stats.size,\n                        created: stats.mtime\n                    };\n                });\n\n            // Sort by creation time (newest first)\n            return files.sort((a, b) => b.created - a.created);\n\n        } catch {\n            return [];\n        }\n    }\n\n    /**\n     * Validates a backup file\n     */\n    async _validateBackup(backupPath) {\n        try {\n            const content = fs.readFileSync(backupPath, 'utf8');\n            const data = JSON.parse(content);\n            \n            // Basic structure validation\n            if (!data.project || !Array.isArray(data.tasks)) {\n                return {\n                    isValid: false,\n                    error: 'Invalid TODO.json structure in backup'\n                };\n            }\n\n            const stats = fs.statSync(backupPath);\n            return {\n                isValid: true,\n                backupInfo: {\n                    size: stats.size,\n                    created: stats.mtime,\n                    taskCount: data.tasks.length,\n                    project: data.project\n                }\n            };\n\n        } catch (error) {\n            return {\n                isValid: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Reads lock file information\n     */\n    _readLockFile(lockPath) {\n        try {\n            const content = fs.readFileSync(lockPath, 'utf8');\n            return JSON.parse(content);\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Checks if a lock is still valid\n     */\n    _isLockValid(lockInfo) {\n        if (!lockInfo || !lockInfo.timestamp) return false;\n        \n        const age = Date.now() - lockInfo.timestamp;\n        return age < this.lockTimeout;\n    }\n\n    /**\n     * Executes a specific recovery strategy\n     */\n    async _executeRecoveryStrategy(strategy, filePath) {\n        switch (strategy) {\n            case 'restore_from_backup':\n                return await this._strategyRestoreFromBackup(filePath);\n            case 'repair_json_syntax':\n                return await this._strategyRepairJsonSyntax(filePath);\n            case 'rebuild_from_fragments':\n                return await this._strategyRebuildFromFragments(filePath);\n            case 'create_minimal_structure':\n                return await this._strategyCreateMinimalStructure(filePath);\n            default:\n                return { success: false, message: 'Unknown strategy' };\n        }\n    }\n\n    async _strategyRestoreFromBackup(filePath) {\n        const result = await this.restoreFromBackup(filePath);\n        if (result.success) {\n            return {\n                success: true,\n                message: 'Restored from backup successfully',\n                data: JSON.parse(fs.readFileSync(filePath, 'utf8'))\n            };\n        }\n        return { success: false, message: result.error };\n    }\n\n    async _strategyRepairJsonSyntax(filePath) {\n        try {\n            if (!fs.existsSync(filePath)) return { success: false, message: 'File not found' };\n            \n            let content = fs.readFileSync(filePath, 'utf8');\n            \n            // Try basic JSON repairs\n            content = content.replace(/,(\\s*[}\\]])/g, '$1'); // Remove trailing commas\n            content = content.replace(/([^\\\\])\"/g, '$1\\\\\"'); // Escape quotes\n            \n            const data = JSON.parse(content);\n            await this.atomicWrite(filePath, JSON.stringify(data, null, 2));\n            \n            return {\n                success: true,\n                message: 'Repaired JSON syntax',\n                data\n            };\n        } catch (error) {\n            return { success: false, message: `JSON repair failed: ${error.message}` };\n        }\n    }\n\n    async _strategyRebuildFromFragments(_filePath) {\n        // This would implement more sophisticated recovery from partial data\n        return { success: false, message: 'Fragment recovery not implemented' };\n    }\n\n    async _strategyCreateMinimalStructure(filePath) {\n        const minimalStructure = {\n            project: path.basename(path.dirname(filePath)),\n            tasks: [],\n            review_strikes: 0,\n            strikes_completed_last_run: false,\n            current_task_index: 0,\n            last_mode: null\n        };\n\n        await this.atomicWrite(filePath, JSON.stringify(minimalStructure, null, 2));\n        \n        return {\n            success: true,\n            message: 'Created minimal TODO.json structure',\n            data: minimalStructure\n        };\n    }\n}\n\nmodule.exports = ErrorRecovery;"],"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","ignoreList":[]}