{"version":3,"names":["cov_142b089npg","actualCoverage","fs","s","require","AutoFixer","TaskManager","constructor","todoPath","options","b","f","autoFixer","enableAutoFix","autoFixLevel","validateOnRead","readTodo","existsSync","Error","content","readFileSync","data","JSON","parse","status","getFileStatus","valid","canAutoFix","fixResult","autoFix","success","hasChanges","error","recoveryResult","recoverCorruptedFile","finalData","message","writeTodo","validationResult","validator","validateAndSanitize","isValid","writeResult","recovery","atomicWrite","stringify","getCurrentTask","todoData","tasks","Array","isArray","undefined","find","t","updateTaskStatus","taskId","task","id","addSubtask","parentTaskId","subtask","parentTask","subtasks","push","getResearchReportPath","researchReportExists","reportPath","path","workingDir","process","cwd","absolutePath","resolve","createTask","taskData","Date","now","Math","random","toString","substr","importantFiles","important_files","successCriteria","success_criteria","mode","researchReportPath","includes","reportCriterion","some","criterion","newTask","title","description","priority","dependencies","estimate","requires_research","created_at","toISOString","getNextMode","last_mode","currentTask","shouldRunReviewer","completedTasks","filter","length","handleStrikeLogic","review_strikes","strikes_completed_last_run","action","performAutoFix","dryRunAutoFix","dryRun","listBackups","listAvailableBackups","restoreFromBackup","backupFile","createBackup","validateTodoFile","errors","type","severity","fixes","summary","totalErrors","totalFixes","criticalErrors","module","exports"],"sources":["taskManager.js"],"sourcesContent":["const fs = require('fs');\nconst AutoFixer = require('./autoFixer');\n\nclass TaskManager {\n    constructor(todoPath, options = {}) {\n        this.todoPath = todoPath;\n        this.autoFixer = new AutoFixer(options.autoFixer || {});\n        this.options = {\n            enableAutoFix: options.enableAutoFix !== false,\n            autoFixLevel: options.autoFixLevel || 'moderate',\n            validateOnRead: options.validateOnRead !== false,\n            ...options\n        };\n    }\n\n    async readTodo() {\n        if (!fs.existsSync(this.todoPath)) {\n            throw new Error(`TODO.json not found at ${this.todoPath}`);\n        }\n\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n\n            // Validate and auto-fix if enabled\n            if (this.options.validateOnRead || this.options.enableAutoFix) {\n                const status = await this.autoFixer.getFileStatus(this.todoPath);\n                \n                if (!status.valid && this.options.enableAutoFix && status.canAutoFix) {\n                    const fixResult = await this.autoFixer.autoFix(this.todoPath, {\n                        autoFixLevel: this.options.autoFixLevel\n                    });\n                    \n                    if (fixResult.success && fixResult.hasChanges) {\n                        // Re-read the fixed file\n                        return JSON.parse(fs.readFileSync(this.todoPath, 'utf8'));\n                    }\n                }\n            }\n\n            return data;\n\n        } catch (error) {\n            if (this.options.enableAutoFix) {\n                // Attempt recovery for corrupted files\n                const recoveryResult = await this.autoFixer.recoverCorruptedFile(this.todoPath);\n                \n                if (recoveryResult.success) {\n                    return recoveryResult.finalData;\n                }\n            }\n            \n            throw new Error(`Failed to read TODO.json: ${error.message}`);\n        }\n    }\n\n    async writeTodo(data) {\n        try {\n            // Validate data before writing if enabled\n            if (this.options.validateOnRead) {\n                const validationResult = this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n                \n                if (!validationResult.isValid && this.options.enableAutoFix) {\n                    data = validationResult.data; // Use the sanitized data\n                }\n            }\n\n            // Use atomic write operation from ErrorRecovery\n            const writeResult = await this.autoFixer.recovery.atomicWrite(\n                this.todoPath,\n                JSON.stringify(data, null, 2),\n                true // Create backup\n            );\n\n            if (!writeResult.success) {\n                throw new Error(`Failed to write TODO.json: ${writeResult.error}`);\n            }\n\n            return writeResult;\n\n        } catch (error) {\n            throw new Error(`Failed to write TODO.json: ${error.message}`);\n        }\n    }\n\n    async getCurrentTask() {\n        const todoData = await this.readTodo();\n        if (!todoData.tasks || !Array.isArray(todoData.tasks)) {\n            return undefined;\n        }\n        return todoData.tasks.find(t => t && (t.status === 'pending' || t.status === 'in_progress'));\n    }\n\n    async updateTaskStatus(taskId, status) {\n        const todoData = await this.readTodo();\n        const task = todoData.tasks.find(t => t.id === taskId);\n        if (task) {\n            task.status = status;\n            await this.writeTodo(todoData);\n        }\n    }\n\n    async addSubtask(parentTaskId, subtask) {\n        const todoData = await this.readTodo();\n        const parentTask = todoData.tasks.find(t => t.id === parentTaskId);\n        if (parentTask) {\n            if (!parentTask.subtasks) {\n                parentTask.subtasks = [];\n            }\n            parentTask.subtasks.push(subtask);\n            await this.writeTodo(todoData);\n        }\n    }\n\n    /**\n     * Generates the standardized research report file path for a task\n     * @param {string} taskId - The task ID\n     * @returns {string} The research report file path\n     */\n    getResearchReportPath(taskId) {\n        return `./development/research-reports/research-report-${taskId}.md`;\n    }\n\n    /**\n     * Checks if a research report file exists for the given task ID\n     * @param {string} taskId - The task ID\n     * @returns {boolean} True if the research report file exists\n     */\n    researchReportExists(taskId) {\n        const reportPath = this.getResearchReportPath(taskId);\n        const path = require('path');\n        \n        // Convert relative path to absolute path\n        const workingDir = process.cwd();\n        const absolutePath = path.resolve(workingDir, reportPath);\n        \n        return fs.existsSync(absolutePath);\n    }\n\n    async createTask(taskData) {\n        const todoData = await this.readTodo();\n        \n        // Generate unique task ID\n        const taskId = `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        \n        // Start with provided important_files or empty array\n        let importantFiles = [...(taskData.important_files || [])];\n        let successCriteria = [...(taskData.success_criteria || [])];\n        \n        // For research tasks, automatically add research report path and success criteria\n        if (taskData.mode === 'RESEARCH' || taskData.mode === 'research') {\n            const researchReportPath = this.getResearchReportPath(taskId);\n            \n            // Add research report to important_files if not already present\n            if (!importantFiles.includes(researchReportPath)) {\n                importantFiles.push(researchReportPath);\n            }\n            \n            // Add research report creation to success criteria if not already present\n            const reportCriterion = `Research report created: ${researchReportPath}`;\n            if (!successCriteria.some(criterion => criterion === reportCriterion)) {\n                successCriteria.push(reportCriterion);\n            }\n        }\n        \n        // Create complete task object with required fields\n        const newTask = {\n            id: taskId,\n            title: taskData.title,\n            description: taskData.description,\n            mode: taskData.mode,\n            priority: taskData.priority || 'medium',\n            status: taskData.status || 'pending',\n            dependencies: taskData.dependencies || [],\n            important_files: importantFiles,\n            success_criteria: successCriteria,\n            estimate: taskData.estimate || '',\n            requires_research: taskData.requires_research || false,\n            subtasks: taskData.subtasks || [],\n            created_at: new Date().toISOString()\n        };\n        \n        // Add task to the tasks array\n        todoData.tasks.push(newTask);\n        \n        // Write updated TODO.json\n        await this.writeTodo(todoData);\n        \n        return taskId;\n    }\n\n    async getNextMode(todoData) {\n        // Alternate between TASK_CREATION and task execution\n        if (todoData.last_mode === 'TASK_CREATION' || !todoData.last_mode) {\n            const currentTask = await this.getCurrentTask();\n            return currentTask ? currentTask.mode : 'DEVELOPMENT';\n        }\n        return 'TASK_CREATION';\n    }\n\n    shouldRunReviewer(todoData) {\n        // Check if it's time for a review strike\n        const completedTasks = todoData.tasks.filter(t => \n            t.status === 'completed' && \n            t.mode !== 'REVIEWER'\n        ).length;\n        \n        // Run reviewer every 5 completed tasks\n        return completedTasks > 0 && completedTasks % 5 === 0;\n    }\n\n    handleStrikeLogic(todoData) {\n        // Reset strikes if all 3 were completed in previous run\n        if (todoData.review_strikes === 3 && todoData.strikes_completed_last_run) {\n            todoData.review_strikes = 0;\n            todoData.strikes_completed_last_run = false;\n            return { action: 'reset', message: 'Resetting review strikes to 0 for new cycle' };\n        }\n        \n        // Mark as completed if just finished third strike\n        if (todoData.review_strikes === 3 && !todoData.strikes_completed_last_run) {\n            todoData.strikes_completed_last_run = true;\n            return { action: 'complete', message: 'Third strike completed! Project approved.' };\n        }\n        \n        return { action: 'continue', message: null };\n    }\n\n    /**\n     * Gets detailed status of the TODO.json file\n     * @returns {Object} File status including validation results\n     */\n    async getFileStatus() {\n        return await this.autoFixer.getFileStatus(this.todoPath);\n    }\n\n    /**\n     * Manually triggers auto-fix on the TODO.json file\n     * @param {Object} options - Fix options\n     * @returns {Object} Fix result\n     */\n    async performAutoFix(options = {}) {\n        return await this.autoFixer.autoFix(this.todoPath, options);\n    }\n\n    /**\n     * Performs a dry run to show what would be fixed\n     * @returns {Object} Dry run result\n     */\n    async dryRunAutoFix() {\n        return await this.autoFixer.dryRun(this.todoPath);\n    }\n\n    /**\n     * Lists available backups for the TODO.json file\n     * @returns {Array} List of backup files\n     */\n    async listBackups() {\n        return await this.autoFixer.recovery.listAvailableBackups(this.todoPath);\n    }\n\n    /**\n     * Restores TODO.json from a backup\n     * @param {string} backupFile - Specific backup file to restore (optional)\n     * @returns {Object} Restoration result\n     */\n    async restoreFromBackup(backupFile = null) {\n        return await this.autoFixer.recovery.restoreFromBackup(this.todoPath, backupFile);\n    }\n\n    /**\n     * Creates a manual backup of the current TODO.json file\n     * @returns {Object} Backup creation result\n     */\n    async createBackup() {\n        return await this.autoFixer.recovery.createBackup(this.todoPath);\n    }\n\n    /**\n     * Validates the current TODO.json without making changes\n     * @returns {Object} Validation result\n     */\n    async validateTodoFile() {\n        try {\n            const content = fs.readFileSync(this.todoPath, 'utf8');\n            const data = JSON.parse(content);\n            return this.autoFixer.validator.validateAndSanitize(data, this.todoPath);\n        } catch (error) {\n            return {\n                isValid: false,\n                errors: [{ \n                    type: 'FILE_READ_ERROR', \n                    message: error.message, \n                    severity: 'critical' \n                }],\n                fixes: [],\n                summary: { totalErrors: 1, totalFixes: 0, criticalErrors: 1 }\n            };\n        }\n    }\n}\n\nmodule.exports = TaskManager;"],"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","ignoreList":[]}