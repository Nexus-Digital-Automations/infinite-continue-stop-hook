{"version":3,"names":["cov_54zya5rsx","actualCoverage","fs","s","require","path","AgentExecutor","constructor","modesDir","f","buildPrompt","task","mode","todoData","fullPrompt","buildTaskContext","workingDir","process","cwd","developmentFiles","discoverDevelopmentFiles","fileIndex","forEach","file","buildTaskFileInstructions","files","developmentDir","join","existsSync","b","items","readdirSync","item","fullPath","stat","statSync","isFile","push","modeFileName","toLowerCase","replace","modeFile","researchReportsDir","reportFiles","reportFile","reportPath","reportStat","endsWith","error","console","message","getAllFilesRecursively","dir","isDirectory","relativePath","relative","readModeFile","filename","filePath","Error","readFileSync","context","description","padEnd","id","status","project","summary","getTaskSummary","completed","total","percentage","prompt","JSON","stringify","dependencies","important_files","review_strikes","getReviewFocus","researchReportPath","getResearchReportPath","researchReportExists","length","importantFiles","includes","unshift","requires_research","subtasks","st","idx","buildTaskCompletionReminder","strikeNumber","focuses","tasks","filter","t","Math","round","taskId","absolutePath","resolve","startingIndex","instructions","enhancedImportantFiles","hasFiles","trim","dep","reminder","formatSubagentPrompt","subtaskPrompt","module","exports"],"sources":["agentExecutor.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nclass AgentExecutor {\n    constructor(modesDir) {\n        this.modesDir = modesDir;\n    }\n\n    buildPrompt(task, mode, todoData) {\n        // Create minimal prompt that instructs reading files\n        let fullPrompt = '# INFINITE CONTINUE HOOK - ACTIVE TASK\\n\\n';\n        fullPrompt += this.buildTaskContext(task, mode, todoData);\n        fullPrompt += '\\n\\n---\\n\\n';\n        \n        // Critical instructions to read files with specific file paths\n        fullPrompt += `## Critical Instructions\\n\\n`;\n        fullPrompt += `IMMEDIATELY read ALL files in the development directory:\\n`;\n        \n        // Discover actual development files and list them specifically\n        const workingDir = process.cwd();\n        const developmentFiles = this.discoverDevelopmentFiles(workingDir, mode);\n        let fileIndex = 1;\n        \n        developmentFiles.forEach(file => {\n            fullPrompt += `${fileIndex}. READ \\`${file}\\`\\n`;\n            fileIndex++;\n        });\n        fullPrompt += `\\n`;\n        \n        // Add task-specific file reading instructions\n        fullPrompt += this.buildTaskFileInstructions(task, fileIndex);\n        \n        fullPrompt += `These files contain ALL necessary context and instructions.\\n`;\n        fullPrompt += `Follow the guidance in these files exactly.\\n`;\n        \n        return fullPrompt;\n    }\n\n    /**\n     * Discovers all files in the development directory and returns them as a prioritized list\n     * @param {string} workingDir - The current working directory\n     * @param {string} mode - The current mode to prioritize mode-specific files\n     * @returns {Array} Array of file paths to read\n     */\n    discoverDevelopmentFiles(workingDir, mode) {\n        const files = [];\n        const developmentDir = path.join(workingDir, 'development');\n        \n        // Check if development directory exists\n        if (!fs.existsSync(developmentDir)) {\n            return files; // Return empty array if no development directory\n        }\n        \n        try {\n            // Add all files directly in the development directory (non-recursive)\n            const items = fs.readdirSync(developmentDir);\n            \n            items.forEach(item => {\n                const fullPath = path.join(developmentDir, item);\n                const stat = fs.statSync(fullPath);\n                \n                // Only include files, not directories\n                if (stat.isFile()) {\n                    files.push(`./development/${item}`);\n                }\n            });\n            \n            // Add the specific mode file from modes subdirectory\n            const modeFileName = `${mode.toLowerCase().replace('_', '-')}.md`;\n            const modeFile = path.join(developmentDir, 'modes', modeFileName);\n            if (fs.existsSync(modeFile)) {\n                files.push(`./development/modes/${modeFileName}`);\n            }\n            \n            // For research mode, add research-reports directory files if they exist\n            if (mode.toLowerCase() === 'research') {\n                const researchReportsDir = path.join(developmentDir, 'research-reports');\n                if (fs.existsSync(researchReportsDir)) {\n                    try {\n                        const reportFiles = fs.readdirSync(researchReportsDir);\n                        reportFiles.forEach(reportFile => {\n                            const reportPath = path.join(researchReportsDir, reportFile);\n                            const reportStat = fs.statSync(reportPath);\n                            \n                            if (reportStat.isFile() && reportFile.endsWith('.md')) {\n                                files.push(`./development/research-reports/${reportFile}`);\n                            }\n                        });\n                    } catch (error) {\n                        console.error(`Warning: Error reading research-reports directory: ${error.message}`);\n                    }\n                }\n            }\n            \n        } catch (error) {\n            // If there's an error reading the directory, return what we have so far\n            console.error(`Warning: Error reading development directory: ${error.message}`);\n        }\n        \n        return files;\n    }\n\n    /**\n     * Recursively gets all files in a directory\n     * @param {string} dir - Directory to search\n     * @param {string} workingDir - Working directory for relative paths\n     * @returns {Array} Array of relative file paths\n     */\n    getAllFilesRecursively(dir, workingDir) {\n        const files = [];\n        \n        try {\n            const items = fs.readdirSync(dir);\n            \n            items.forEach(item => {\n                const fullPath = path.join(dir, item);\n                const stat = fs.statSync(fullPath);\n                \n                if (stat.isDirectory()) {\n                    // Recursively get files from subdirectories\n                    files.push(...this.getAllFilesRecursively(fullPath, workingDir));\n                } else if (stat.isFile()) {\n                    // Convert to relative path from working directory\n                    const relativePath = path.relative(workingDir, fullPath);\n                    files.push('./' + relativePath.replace(/\\\\/g, '/'));\n                }\n            });\n        } catch (error) {\n            console.error(`Warning: Error reading directory ${dir}: ${error.message}`);\n        }\n        \n        return files;\n    }\n\n    readModeFile(filename) {\n        const filePath = path.join(this.modesDir, filename);\n        if (!fs.existsSync(filePath)) {\n            throw new Error(`Mode file not found: ${filePath}`);\n        }\n        return fs.readFileSync(filePath, 'utf8');\n    }\n\n    buildTaskContext(task, mode, todoData) {\n        let context = '';\n        \n        // Add prominent task summary box\n        context += `┌─────────────────────────────────────────────────────────────────┐\\n`;\n        context += `│ CURRENT TASK: ${task.description.padEnd(49)} │\\n`;\n        context += `│ Mode: ${mode.padEnd(58)} │\\n`;\n        context += `│ Task ID: ${task.id.padEnd(55)} │\\n`;\n        context += `│ Status: ${task.status.padEnd(56)} │\\n`;\n        context += `│ Project: ${todoData.project.padEnd(55)} │\\n`;\n        const summary = this.getTaskSummary(todoData);\n        context += `│ Progress: ${summary.completed}/${summary.total} tasks (${summary.percentage}%)`.padEnd(66) + '│\\n';\n        context += `└─────────────────────────────────────────────────────────────────┘\\n\\n`;\n        \n        if (mode === 'TASK_CREATION') {\n            context += `## Intelligent Task Creation Context\\n\\n`;\n            context += `**CRITICAL REQUIREMENT**: Create at least 4 tasks/subtasks if the project is incomplete. If fewer than 4 are needed to complete the project, create only what's necessary.\\n\\n`;\n            context += `Analyze the project state and determine what type of task creation is needed:\\n`;\n            context += `- **New standalone tasks** for missing functionality, features, or technical debt\\n`;\n            context += `- **Subtasks** to decompose the current task if it's too large/complex\\n`;\n            context += `- **No task creation** if current tasks adequately cover the project scope\\n\\n`;\n            context += `**Current Task Context** (may need decomposition into subtasks):\\n`;\n            context += `**Task ID:** ${task.id}\\n`;\n            context += `**Description:** ${task.description}\\n`;\n            context += `**Current Prompt:** ${task.prompt}\\n`;\n            context += `**Mode:** ${task.mode}\\n`;\n            context += `**Dependencies:** ${JSON.stringify(task.dependencies)}\\n`;\n            context += `**Important Files:** ${JSON.stringify(task.important_files)}\\n\\n`;\n            context += `**Project Analysis Required**: Read the full TODO.json and assess project completeness, gaps, and needs.\\n`;\n            context += `Follow the decision framework in the task-creation mode file to determine appropriate action.\\n`;\n            context += `If no task creation is needed, proceed to the next pending task in the workflow.\\n`;\n        } else if (mode === 'REVIEWER') {\n            context += `## Review Context\\n\\n`;\n            context += `**Current Review Strike:** ${todoData.review_strikes + 1}/3\\n\\n`;\n            context += this.getReviewFocus(todoData.review_strikes + 1);\n        } else {\n            context += `## Current Task Details\\n\\n`;\n            context += `**Task ID:** ${task.id}\\n`;\n            context += `**Mode:** ${task.mode}\\n`;\n            context += `**Description:** ${task.description}\\n\\n`;\n            context += `**Task Prompt:**\\n${task.prompt}\\n\\n`;\n            \n            // Enhanced research report integration for research tasks\n            if (task.mode === 'RESEARCH' || task.mode === 'research') {\n                const researchReportPath = this.getResearchReportPath(task.id);\n                context += `**🔬 RESEARCH TASK REQUIREMENTS:**\\n`;\n                context += `- Follow structured research methodology from modes/research.md\\n`;\n                context += `- Use standardized research report template\\n`;\n                if (this.researchReportExists(task.id)) {\n                    context += `- Review existing research report: ${researchReportPath}\\n`;\n                    context += `- Update/expand research findings as needed\\n`;\n                } else {\n                    context += `- Create research report: ${researchReportPath}\\n`;\n                    context += `- Include executive summary, methodology, findings, and recommendations\\n`;\n                }\n                context += `\\n`;\n            }\n            \n            if (task.dependencies && task.dependencies.length > 0) {\n                context += `**Dependencies to consider:** ${task.dependencies.join(', ')}\\n`;\n            }\n            \n            // Enhanced important files display with research report prioritization\n            if (task.important_files && task.important_files.length > 0) {\n                let importantFiles = [...task.important_files];\n                \n                // For research tasks, ensure research report is prominently displayed\n                if (task.mode === 'RESEARCH' || task.mode === 'research') {\n                    const researchReportPath = this.getResearchReportPath(task.id);\n                    if (!importantFiles.includes(researchReportPath)) {\n                        importantFiles.unshift(researchReportPath);\n                    }\n                }\n                \n                context += `**REVIEW these important files:** ${importantFiles.join(', ')}\\n`;\n            }\n            \n            if (task.requires_research) {\n                context += `\\n**Note:** This task requires research. Ensure you have the necessary information before implementation.\\n`;\n            }\n            \n            if (task.subtasks && task.subtasks.length > 0) {\n                context += `\\n**Subtasks created:**\\n`;\n                task.subtasks.forEach((st, idx) => {\n                    context += `${idx + 1}. [${st.status}] ${st.description}\\n`;\n                });\n            }\n        }\n        \n        context += `\\n**Review Strikes:** ${todoData.review_strikes}/3\\n`;\n        \n        // Add task completion reminder for all modes\n        context += this.buildTaskCompletionReminder(task, mode);\n        \n        return context;\n    }\n\n    getReviewFocus(strikeNumber) {\n        const focuses = {\n            1: `**Strike 1 Focus:** Build Verification\n- Ensure the project builds completely without errors\n- Check all dependencies are properly installed\n- Verify build artifacts are generated correctly\n- No compilation or build-time errors`,\n            \n            2: `**Strike 2 Focus:** Lint and Code Quality\n- Run all linters and ensure zero errors\n- Check code style consistency\n- Verify no console.log statements in production code\n- Ensure proper error handling throughout`,\n            \n            3: `**Strike 3 Focus:** Test Coverage and Success\n- Verify all tests pass without failures\n- Check test coverage meets requirements:\n  - Critical modules: 100% coverage\n  - Business logic: 95%+ coverage\n  - Other modules: 90%+ coverage\n- No skipped tests`\n        };\n        \n        return focuses[strikeNumber] || focuses[1];\n    }\n\n    getTaskSummary(todoData) {\n        const total = todoData.tasks.length;\n        const completed = todoData.tasks.filter(t => t.status === 'completed').length;\n        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        return { total, completed, percentage };\n    }\n\n    /**\n     * Generates research report path for a task ID following standardized naming\n     * @param {string} taskId - The task ID\n     * @returns {string} The research report file path\n     */\n    getResearchReportPath(taskId) {\n        return `./development/research-reports/research-report-${taskId}.md`;\n    }\n\n    /**\n     * Checks if a research report exists for the given task\n     * @param {string} taskId - The task ID\n     * @returns {boolean} True if the research report file exists\n     */\n    researchReportExists(taskId) {\n        const reportPath = this.getResearchReportPath(taskId);\n        const fs = require('fs');\n        const path = require('path');\n        \n        // Convert relative path to absolute path\n        const workingDir = process.cwd();\n        const absolutePath = path.resolve(workingDir, reportPath);\n        \n        return fs.existsSync(absolutePath);\n    }\n\n    buildTaskFileInstructions(task, startingIndex = 3) {\n        let instructions = '';\n        let fileIndex = startingIndex;\n        \n        // For research tasks, automatically include research report if it exists\n        let enhancedImportantFiles = [...(task.important_files || [])];\n        \n        if (task.mode === 'RESEARCH' || task.mode === 'research') {\n            const researchReportPath = this.getResearchReportPath(task.id);\n            \n            // Add research report to the beginning of important files if it exists and isn't already included\n            if (this.researchReportExists(task.id) && !enhancedImportantFiles.includes(researchReportPath)) {\n                enhancedImportantFiles.unshift(researchReportPath); // Add to beginning for priority\n            } else if (!enhancedImportantFiles.includes(researchReportPath)) {\n                // Even if it doesn't exist yet, include it as a placeholder for research tasks\n                enhancedImportantFiles.unshift(researchReportPath);\n            }\n        }\n        \n        // Check if task has dependencies or important_files (including enhanced ones)\n        const hasFiles = (task.dependencies && task.dependencies.length > 0) || \n                        (enhancedImportantFiles.length > 0);\n        \n        if (!hasFiles) {\n            return instructions;\n        }\n        \n        instructions += `ALSO read the following task-specific files:\\n`;\n        \n        // Add important files first (these are highest priority)\n        if (enhancedImportantFiles.length > 0) {\n            enhancedImportantFiles.forEach(file => {\n                if (file && file.trim()) {\n                    // Special handling for research reports\n                    if (file.includes('research-report-') && (task.mode === 'RESEARCH' || task.mode === 'research')) {\n                        if (this.researchReportExists(task.id)) {\n                            instructions += `${fileIndex}. REVIEW RESEARCH REPORT \\`${file.trim()}\\` (contains previous research findings)\\n`;\n                        } else {\n                            instructions += `${fileIndex}. CREATE RESEARCH REPORT \\`${file.trim()}\\` (following standardized template)\\n`;\n                        }\n                    } else {\n                        instructions += `${fileIndex}. REVIEW \\`${file.trim()}\\`\\n`;\n                    }\n                    fileIndex++;\n                }\n            });\n        }\n        \n        // Add dependencies files\n        if (task.dependencies && task.dependencies.length > 0) {\n            task.dependencies.forEach(dep => {\n                if (dep && dep.trim()) {\n                    instructions += `${fileIndex}. READ \\`${dep.trim()}\\`\\n`;\n                    fileIndex++;\n                }\n            });\n        }\n        \n        instructions += `\\n`;\n        return instructions;\n    }\n\n    buildTaskCompletionReminder(task, mode) {\n        let reminder = `\\n\\n## 🔴 CRITICAL: TASK COMPLETION REMINDER\\n\\n`;\n        \n        if (mode === 'TASK_CREATION') {\n            reminder += `**AFTER CREATING TASKS**: You MUST mark this task-creation task as completed once you finish creating/updating tasks.\\n\\n`;\n        } else if (mode === 'REVIEWER') {\n            reminder += `**AFTER COMPLETING REVIEW**: You MUST mark this review task as completed once you finish the review process.\\n\\n`;\n        } else {\n            reminder += `**AFTER COMPLETING THIS TASK**: You MUST mark this task as completed when all work is finished.\\n\\n`;\n        }\n        \n        reminder += `### Quick Completion Code\\n`;\n        reminder += `\\`\\`\\`javascript\\n`;\n        reminder += `// Initialize TaskManager and mark current task as completed\\n`;\n        reminder += `const TaskManager = require('./lib/taskManager');\\n`;\n        reminder += `const taskManager = new TaskManager('./TODO.json');\\n`;\n        reminder += `await taskManager.updateTaskStatus(\"${task.id}\", \"completed\");\\n`;\n        reminder += `console.log(\"✅ Task ${task.id} marked as completed\");\\n`;\n        reminder += `\\`\\`\\`\\n\\n`;\n        \n        reminder += `### Completion Criteria Checklist\\n`;\n        reminder += `✅ **Mark as completed ONLY when:**\\n`;\n        reminder += `- All success criteria are met\\n`;\n        reminder += `- Implementation is working correctly\\n`;\n        reminder += `- Tests pass (if applicable)\\n`;\n        reminder += `- Code quality standards are met\\n`;\n        reminder += `- No known issues remain\\n\\n`;\n        \n        reminder += `❌ **Do NOT mark as completed if:**\\n`;\n        reminder += `- Any success criteria remain unmet\\n`;\n        reminder += `- Implementation has known issues\\n`;\n        reminder += `- Tests are failing\\n`;\n        reminder += `- Code needs further refinement\\n\\n`;\n        \n        reminder += `**Remember**: The hook system expects tasks to be marked complete for proper workflow management.\\n\\n`;\n        \n        // Add git commit instructions\n        reminder += `## 🔧 COMMIT YOUR CHANGES BEFORE CONTINUING\\n\\n`;\n        reminder += `**MANDATORY**: Before proceeding to the next task, commit your completed work:\\n\\n`;\n        reminder += `\\`\\`\\`bash\\n`;\n        reminder += `# Stage all changes\\n`;\n        reminder += `git add -A\\n\\n`;\n        reminder += `# Commit with descriptive message (write your own message)\\n`;\n        reminder += `git commit -m \"feat: implement [task description]\\n\\n`;\n        reminder += `- [bullet point of what you accomplished]\\n`;\n        reminder += `- [another accomplishment]\\n\\n`;\n        reminder += `🤖 Generated with Claude Code\\n`;\n        reminder += `Co-Authored-By: Claude <noreply@anthropic.com>\"\\n\\n`;\n        reminder += `# Push to remote (optional but recommended)\\n`;\n        reminder += `git push\\n`;\n        reminder += `\\`\\`\\`\\n\\n`;\n        reminder += `**Important**: \\n`;\n        reminder += `- Write a meaningful commit message describing what you accomplished\\n`;\n        reminder += `- Use conventional commit format (feat:, fix:, docs:, etc.)\\n`;\n        reminder += `- Include task-specific details in the message body\\n`;\n        reminder += `- This is required before starting the next task\\n`;\n        \n        return reminder;\n    }\n\n    formatSubagentPrompt(task, subtaskPrompt) {\n        // Format prompt for subagent execution\n        return `Execute the following subtask as part of the larger task \"${task.description}\":\n\n${subtaskPrompt}\n\nImportant context from parent task:\n- Dependencies: ${JSON.stringify(task.dependencies)}\n- Important files: ${JSON.stringify(task.important_files)}\n\nFocus on completing this specific subtask efficiently and report back with results.`;\n    }\n}\n\nmodule.exports = AgentExecutor;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}