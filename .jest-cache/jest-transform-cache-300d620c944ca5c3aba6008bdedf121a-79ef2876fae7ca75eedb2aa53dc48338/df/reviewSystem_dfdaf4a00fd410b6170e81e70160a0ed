d4266aa4abf93cb2367d8b4bcda8dfda
/* istanbul ignore next */
function cov_25gbrynu21() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/infinite-continue-stop-hook/lib/reviewSystem.js";
  var hash = "2cc1f3617da4d583348c3342855b9edd4138b99b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/infinite-continue-stop-hook/lib/reviewSystem.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 11
        },
        end: {
          line: 1,
          column: 24
        }
      },
      "1": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 21
        },
        end: {
          line: 3,
          column: 45
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "4": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "5": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "6": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "7": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "8": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "9": {
        start: {
          line: 57,
          column: 40
        },
        end: {
          line: 57,
          column: 88
        }
      },
      "10": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "11": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 95
        }
      },
      "12": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 53
        }
      },
      "13": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "14": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 107
        }
      },
      "15": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 68,
          column: 88
        }
      },
      "16": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "17": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 82,
          column: 25
        }
      },
      "18": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "19": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 79
        }
      },
      "20": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 57
        }
      },
      "21": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 83
        }
      },
      "22": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 45
        }
      },
      "23": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "24": {
        start: {
          line: 93,
          column: 38
        },
        end: {
          line: 95,
          column: 17
        }
      },
      "25": {
        start: {
          line: 96,
          column: 40
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "26": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 64
        }
      },
      "27": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "28": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 81
        }
      },
      "29": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 49
        }
      },
      "30": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "31": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "32": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 134,
          column: 25
        }
      },
      "33": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 130,
          column: 29
        }
      },
      "34": {
        start: {
          line: 115,
          column: 52
        },
        end: {
          line: 115,
          column: 80
        }
      },
      "35": {
        start: {
          line: 116,
          column: 52
        },
        end: {
          line: 116,
          column: 111
        }
      },
      "36": {
        start: {
          line: 116,
          column: 86
        },
        end: {
          line: 116,
          column: 107
        }
      },
      "37": {
        start: {
          line: 117,
          column: 54
        },
        end: {
          line: 117,
          column: 115
        }
      },
      "38": {
        start: {
          line: 117,
          column: 88
        },
        end: {
          line: 117,
          column: 111
        }
      },
      "39": {
        start: {
          line: 119,
          column: 32
        },
        end: {
          line: 122,
          column: 33
        }
      },
      "40": {
        start: {
          line: 120,
          column: 36
        },
        end: {
          line: 120,
          column: 100
        }
      },
      "41": {
        start: {
          line: 121,
          column: 36
        },
        end: {
          line: 121,
          column: 98
        }
      },
      "42": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "43": {
        start: {
          line: 124,
          column: 36
        },
        end: {
          line: 124,
          column: 104
        }
      },
      "44": {
        start: {
          line: 125,
          column: 36
        },
        end: {
          line: 125,
          column: 121
        }
      },
      "45": {
        start: {
          line: 128,
          column: 32
        },
        end: {
          line: 128,
          column: 81
        }
      },
      "46": {
        start: {
          line: 129,
          column: 32
        },
        end: {
          line: 129,
          column: 61
        }
      },
      "47": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "48": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "49": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 82
        }
      },
      "50": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 45
        }
      },
      "51": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "52": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 73
        }
      },
      "53": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "54": {
        start: {
          line: 146,
          column: 40
        },
        end: {
          line: 146,
          column: 88
        }
      },
      "55": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 181,
          column: 21
        }
      },
      "56": {
        start: {
          line: 150,
          column: 24
        },
        end: {
          line: 150,
          column: 78
        }
      },
      "57": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 53
        }
      },
      "58": {
        start: {
          line: 154,
          column: 24
        },
        end: {
          line: 163,
          column: 25
        }
      },
      "59": {
        start: {
          line: 155,
          column: 28
        },
        end: {
          line: 159,
          column: 31
        }
      },
      "60": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 161,
          column: 77
        }
      },
      "61": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 57
        }
      },
      "62": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 180,
          column: 25
        }
      },
      "63": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 176,
          column: 29
        }
      },
      "64": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 172,
          column: 35
        }
      },
      "65": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 174,
          column: 85
        }
      },
      "66": {
        start: {
          line: 175,
          column: 32
        },
        end: {
          line: 175,
          column: 96
        }
      },
      "67": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 86
        }
      },
      "68": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 92
        }
      },
      "69": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 82
        }
      },
      "70": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 45
        }
      },
      "71": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 64
        }
      },
      "72": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 67
        }
      },
      "73": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 41
        }
      },
      "74": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "75": {
        start: {
          line: 205,
          column: 23
        },
        end: {
          line: 205,
          column: 25
        }
      },
      "76": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "77": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "78": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 87
        }
      },
      "79": {
        start: {
          line: 209,
          column: 58
        },
        end: {
          line: 209,
          column: 84
        }
      },
      "80": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 246,
          column: 10
        }
      },
      "81": {
        start: {
          line: 228,
          column: 22
        },
        end: {
          line: 228,
          column: 34
        }
      },
      "82": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 78
        }
      },
      "83": {
        start: {
          line: 255,
          column: 58
        },
        end: {
          line: 255,
          column: 77
        }
      },
      "84": {
        start: {
          line: 256,
          column: 31
        },
        end: {
          line: 256,
          column: 82
        }
      },
      "85": {
        start: {
          line: 256,
          column: 61
        },
        end: {
          line: 256,
          column: 81
        }
      },
      "86": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "87": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 24
        }
      },
      "88": {
        start: {
          line: 272,
          column: 28
        },
        end: {
          line: 272,
          column: 90
        }
      },
      "89": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 70
        }
      },
      "90": {
        start: {
          line: 279,
          column: 25
        },
        end: {
          line: 279,
          column: 58
        }
      },
      "91": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "92": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 70
        }
      },
      "93": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 296,
          column: 10
        }
      },
      "94": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 300,
          column: 107
        }
      },
      "95": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 40
        }
      },
      "96": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "97": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 46
        }
      },
      "98": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 63
        }
      },
      "99": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 66
        }
      },
      "100": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 66
        }
      },
      "101": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 58
        }
      },
      "102": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 49
        }
      },
      "103": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 94
        }
      },
      "104": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 72
        }
      },
      "105": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 22
        }
      },
      "106": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "107": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 25
        }
      },
      "108": {
        start: {
          line: 325,
          column: 31
        },
        end: {
          line: 325,
          column: 76
        }
      },
      "109": {
        start: {
          line: 325,
          column: 58
        },
        end: {
          line: 325,
          column: 75
        }
      },
      "110": {
        start: {
          line: 326,
          column: 40
        },
        end: {
          line: 326,
          column: 99
        }
      },
      "111": {
        start: {
          line: 326,
          column: 67
        },
        end: {
          line: 326,
          column: 91
        }
      },
      "112": {
        start: {
          line: 327,
          column: 35
        },
        end: {
          line: 329,
          column: 16
        }
      },
      "113": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 54
        }
      },
      "114": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 334,
          column: 40
        }
      },
      "115": {
        start: {
          line: 338,
          column: 33
        },
        end: {
          line: 340,
          column: 16
        }
      },
      "116": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 56
        }
      },
      "117": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 42
        }
      },
      "118": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "119": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 38
        }
      },
      "120": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "121": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 354,
          column: 18
        }
      },
      "122": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 359,
          column: 18
        }
      },
      "123": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 365,
          column: 14
        }
      },
      "124": {
        start: {
          line: 370,
          column: 22
        },
        end: {
          line: 370,
          column: 24
        }
      },
      "125": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "126": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 386,
          column: 15
        }
      },
      "127": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 385,
          column: 19
        }
      },
      "128": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "129": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 401,
          column: 15
        }
      },
      "130": {
        start: {
          line: 394,
          column: 89
        },
        end: {
          line: 394,
          column: 97
        }
      },
      "131": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "132": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 418,
          column: 15
        }
      },
      "133": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 417,
          column: 19
        }
      },
      "134": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "135": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 435,
          column: 15
        }
      },
      "136": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 434,
          column: 19
        }
      },
      "137": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 21
        }
      },
      "138": {
        start: {
          line: 442,
          column: 0
        },
        end: {
          line: 442,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 41
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 96,
            column: 59
          },
          end: {
            line: 96,
            column: 60
          }
        },
        loc: {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 64
          }
        },
        line: 97
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 116,
            column: 71
          },
          end: {
            line: 116,
            column: 72
          }
        },
        loc: {
          start: {
            line: 116,
            column: 86
          },
          end: {
            line: 116,
            column: 107
          }
        },
        line: 116
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 117,
            column: 73
          },
          end: {
            line: 117,
            column: 74
          }
        },
        loc: {
          start: {
            line: 117,
            column: 88
          },
          end: {
            line: 117,
            column: 111
          }
        },
        line: 117
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 63
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 204
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 207,
            column: 47
          }
        },
        loc: {
          start: {
            line: 207,
            column: 56
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 207
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 209,
            column: 49
          },
          end: {
            line: 209,
            column: 50
          }
        },
        loc: {
          start: {
            line: 209,
            column: 58
          },
          end: {
            line: 209,
            column: 84
          }
        },
        line: 209
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 228,
            column: 14
          }
        },
        loc: {
          start: {
            line: 228,
            column: 22
          },
          end: {
            line: 228,
            column: 34
          }
        },
        line: 228
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 49
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 253
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 50
          },
          end: {
            line: 255,
            column: 51
          }
        },
        loc: {
          start: {
            line: 255,
            column: 58
          },
          end: {
            line: 255,
            column: 77
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 256,
            column: 53
          },
          end: {
            line: 256,
            column: 54
          }
        },
        loc: {
          start: {
            line: 256,
            column: 61
          },
          end: {
            line: 256,
            column: 81
          }
        },
        line: 256
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 72
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 271
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 49
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 278
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 46
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 299
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 303,
            column: 31
          },
          end: {
            line: 303,
            column: 32
          }
        },
        loc: {
          start: {
            line: 303,
            column: 46
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 303
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 37
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 319
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 325,
            column: 53
          },
          end: {
            line: 325,
            column: 54
          }
        },
        loc: {
          start: {
            line: 325,
            column: 58
          },
          end: {
            line: 325,
            column: 75
          }
        },
        line: 325
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 326,
            column: 62
          },
          end: {
            line: 326,
            column: 63
          }
        },
        loc: {
          start: {
            line: 326,
            column: 67
          },
          end: {
            line: 326,
            column: 91
          }
        },
        line: 326
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 327,
            column: 57
          },
          end: {
            line: 327,
            column: 58
          }
        },
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 328,
            column: 54
          }
        },
        line: 328
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 34
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 337
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 338,
            column: 55
          },
          end: {
            line: 338,
            column: 56
          }
        },
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 339,
            column: 56
          }
        },
        line: 339
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 47
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 345
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 37
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 369
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 373,
            column: 42
          },
          end: {
            line: 373,
            column: 43
          }
        },
        loc: {
          start: {
            line: 373,
            column: 51
          },
          end: {
            line: 386,
            column: 13
          }
        },
        line: 373
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 394,
            column: 84
          },
          end: {
            line: 394,
            column: 85
          }
        },
        loc: {
          start: {
            line: 394,
            column: 89
          },
          end: {
            line: 394,
            column: 97
          }
        },
        line: 394
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 405,
            column: 43
          },
          end: {
            line: 405,
            column: 44
          }
        },
        loc: {
          start: {
            line: 405,
            column: 51
          },
          end: {
            line: 418,
            column: 13
          }
        },
        line: 405
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 422,
            column: 43
          },
          end: {
            line: 422,
            column: 44
          }
        },
        loc: {
          start: {
            line: 422,
            column: 50
          },
          end: {
            line: 435,
            column: 13
          }
        },
        line: 422
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 60,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 60,
            column: 44
          }
        }, {
          start: {
            line: 60,
            column: 48
          },
          end: {
            line: 60,
            column: 74
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 83,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 43
          }
        }, {
          start: {
            line: 72,
            column: 47
          },
          end: {
            line: 72,
            column: 72
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        }, {
          start: {
            line: 103,
            column: 23
          },
          end: {
            line: 136,
            column: 17
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 134,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 24
          },
          end: {
            line: 134,
            column: 25
          }
        }, {
          start: {
            line: 131,
            column: 31
          },
          end: {
            line: 134,
            column: 25
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 32
          },
          end: {
            line: 122,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 32
          },
          end: {
            line: 122,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 126,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 126,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "11": {
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 181,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 181,
            column: 21
          }
        }, {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 181,
            column: 21
          }
        }],
        line: 149
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 44
          }
        }, {
          start: {
            line: 149,
            column: 48
          },
          end: {
            line: 149,
            column: 73
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 180,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 180,
            column: 25
          }
        }, {
          start: {
            line: 177,
            column: 31
          },
          end: {
            line: 180,
            column: 25
          }
        }],
        line: 166
      },
      "14": {
        loc: {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 191,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 65
          }
        }, {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 63
          }
        }, {
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 63
          }
        }],
        line: 189
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 208,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 208,
            column: 36
          }
        }, {
          start: {
            line: 208,
            column: 40
          },
          end: {
            line: 208,
            column: 53
          }
        }],
        line: 208
      },
      "17": {
        loc: {
          start: {
            line: 223,
            column: 22
          },
          end: {
            line: 223,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 22
          },
          end: {
            line: 223,
            column: 53
          }
        }, {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 58
          }
        }],
        line: 223
      },
      "18": {
        loc: {
          start: {
            line: 224,
            column: 21
          },
          end: {
            line: 224,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 21
          },
          end: {
            line: 224,
            column: 52
          }
        }, {
          start: {
            line: 224,
            column: 56
          },
          end: {
            line: 224,
            column: 57
          }
        }],
        line: 224
      },
      "19": {
        loc: {
          start: {
            line: 225,
            column: 22
          },
          end: {
            line: 225,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 22
          },
          end: {
            line: 225,
            column: 53
          }
        }, {
          start: {
            line: 225,
            column: 57
          },
          end: {
            line: 225,
            column: 58
          }
        }],
        line: 225
      },
      "20": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "21": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "22": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 21
          }
        }, {
          start: {
            line: 321,
            column: 25
          },
          end: {
            line: 321,
            column: 40
          }
        }],
        line: 321
      },
      "23": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 328,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 328,
            column: 28
          }
        }, {
          start: {
            line: 328,
            column: 32
          },
          end: {
            line: 328,
            column: 54
          }
        }],
        line: 328
      },
      "24": {
        loc: {
          start: {
            line: 332,
            column: 15
          },
          end: {
            line: 334,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 15
          },
          end: {
            line: 332,
            column: 42
          }
        }, {
          start: {
            line: 333,
            column: 15
          },
          end: {
            line: 333,
            column: 48
          }
        }, {
          start: {
            line: 334,
            column: 15
          },
          end: {
            line: 334,
            column: 39
          }
        }],
        line: 332
      },
      "25": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 339,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 339,
            column: 28
          }
        }, {
          start: {
            line: 339,
            column: 32
          },
          end: {
            line: 339,
            column: 56
          }
        }],
        line: 339
      },
      "26": {
        loc: {
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: 361,
            column: 15
          },
          end: {
            line: 366,
            column: 9
          }
        }],
        line: 346
      },
      "27": {
        loc: {
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        }, {
          start: {
            line: 355,
            column: 19
          },
          end: {
            line: 360,
            column: 13
          }
        }],
        line: 350
      },
      "28": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "29": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "30": {
        loc: {
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 49
          }
        }, {
          start: {
            line: 395,
            column: 53
          },
          end: {
            line: 395,
            column: 55
          }
        }],
        line: 395
      },
      "31": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "32": {
        loc: {
          start: {
            line: 412,
            column: 37
          },
          end: {
            line: 412,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 37
          },
          end: {
            line: 412,
            column: 55
          }
        }, {
          start: {
            line: 412,
            column: 59
          },
          end: {
            line: 412,
            column: 61
          }
        }],
        line: 412
      },
      "33": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "34": {
        loc: {
          start: {
            line: 429,
            column: 37
          },
          end: {
            line: 429,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 37
          },
          end: {
            line: 429,
            column: 51
          }
        }, {
          start: {
            line: 429,
            column: 55
          },
          end: {
            line: 429,
            column: 57
          }
        }],
        line: 429
      },
      "35": {
        loc: {
          start: {
            line: 431,
            column: 30
          },
          end: {
            line: 431,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 431,
            column: 48
          },
          end: {
            line: 431,
            column: 54
          }
        }, {
          start: {
            line: 431,
            column: 57
          },
          end: {
            line: 431,
            column: 65
          }
        }],
        line: 431
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2cc1f3617da4d583348c3342855b9edd4138b99b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25gbrynu21 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25gbrynu21();
const fs =
/* istanbul ignore next */
(cov_25gbrynu21().s[0]++, require('fs'));
const path =
/* istanbul ignore next */
(cov_25gbrynu21().s[1]++, require('path'));
const {
  execSync
} =
/* istanbul ignore next */
(cov_25gbrynu21().s[2]++, require('child_process'));
class ReviewSystem {
  constructor() {
    /* istanbul ignore next */
    cov_25gbrynu21().f[0]++;
    cov_25gbrynu21().s[3]++;
    this.reviewCriteria = {
      1: {
        name: 'Build Verification',
        tasks: ['Run clean build from scratch', 'Verify zero build errors', 'Check all dependencies installed', 'Ensure build artifacts generated']
      },
      2: {
        name: 'Lint and Code Quality',
        tasks: ['Run all linters', 'Ensure zero lint errors', 'Check for console.log statements', 'Verify code style consistency']
      },
      3: {
        name: 'Test Coverage and Success',
        tasks: ['Run all tests', 'Verify 100% coverage on critical modules', 'Check 90%+ coverage on other modules', 'Ensure no skipped or failing tests']
      }
    };
  }

  /**
   * Checks if all strikes would pass at 100% quality
   * Returns quality assessment for each strike
   */
  async checkStrikeQuality(workingDir) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[1]++;
    const results =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[4]++, {
      strike1: {
        name: 'Build Verification',
        quality: 100,
        issues: []
      },
      strike2: {
        name: 'Lint and Code Quality',
        quality: 100,
        issues: []
      },
      strike3: {
        name: 'Test Coverage and Success',
        quality: 100,
        issues: []
      },
      overallReady: true
    });
    /* istanbul ignore next */
    cov_25gbrynu21().s[5]++;
    try {
      /* istanbul ignore next */
      cov_25gbrynu21().s[6]++;
      // Strike 1: Build Quality Check
      try {
        // Check for package.json and basic build capability
        const packagePath =
        /* istanbul ignore next */
        (cov_25gbrynu21().s[7]++, path.join(workingDir, 'package.json'));
        /* istanbul ignore next */
        cov_25gbrynu21().s[8]++;
        if (fs.existsSync(packagePath)) {
          /* istanbul ignore next */
          cov_25gbrynu21().b[0][0]++;
          const packageJson =
          /* istanbul ignore next */
          (cov_25gbrynu21().s[9]++, JSON.parse(fs.readFileSync(packagePath, 'utf8')));

          // Check if build script exists
          /* istanbul ignore next */
          cov_25gbrynu21().s[10]++;
          if (
          /* istanbul ignore next */
          (cov_25gbrynu21().b[2][0]++, !packageJson.scripts) ||
          /* istanbul ignore next */
          (cov_25gbrynu21().b[2][1]++, !packageJson.scripts.build)) {
            /* istanbul ignore next */
            cov_25gbrynu21().b[1][0]++;
            cov_25gbrynu21().s[11]++;
            results.strike1.issues.push('No build script defined in package.json');
            /* istanbul ignore next */
            cov_25gbrynu21().s[12]++;
            results.strike1.quality = 80;
          } else
          /* istanbul ignore next */
          {
            cov_25gbrynu21().b[1][1]++;
          }

          // Check node_modules exists
          cov_25gbrynu21().s[13]++;
          if (!fs.existsSync(path.join(workingDir, 'node_modules'))) {
            /* istanbul ignore next */
            cov_25gbrynu21().b[3][0]++;
            cov_25gbrynu21().s[14]++;
            results.strike1.issues.push('node_modules not found - dependencies not installed');
            /* istanbul ignore next */
            cov_25gbrynu21().s[15]++;
            results.strike1.quality = Math.min(results.strike1.quality, 60);
          } else
          /* istanbul ignore next */
          {
            cov_25gbrynu21().b[3][1]++;
          }

          // Try a quick build check if build script exists
          cov_25gbrynu21().s[16]++;
          if (
          /* istanbul ignore next */
          (cov_25gbrynu21().b[5][0]++, packageJson.scripts) &&
          /* istanbul ignore next */
          (cov_25gbrynu21().b[5][1]++, packageJson.scripts.build)) {
            /* istanbul ignore next */
            cov_25gbrynu21().b[4][0]++;
            cov_25gbrynu21().s[17]++;
            try {
              /* istanbul ignore next */
              cov_25gbrynu21().s[18]++;
              execSync('npm run build', {
                cwd: workingDir,
                stdio: 'pipe',
                timeout: 30000
              });
            } catch {
              /* istanbul ignore next */
              cov_25gbrynu21().s[19]++;
              results.strike1.issues.push('Build command fails');
              /* istanbul ignore next */
              cov_25gbrynu21().s[20]++;
              results.strike1.quality = 50;
            }
          } else
          /* istanbul ignore next */
          {
            cov_25gbrynu21().b[4][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_25gbrynu21().b[0][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_25gbrynu21().s[21]++;
        results.strike1.issues.push(`Build check error: ${error.message}`);
        /* istanbul ignore next */
        cov_25gbrynu21().s[22]++;
        results.strike1.quality = 50;
      }

      // Strike 2: Lint Quality Check
      /* istanbul ignore next */
      cov_25gbrynu21().s[23]++;
      try {
        // Check for eslint config
        const eslintConfigs =
        /* istanbul ignore next */
        (cov_25gbrynu21().s[24]++, ['eslint.config.js', '.eslintrc.js', '.eslintrc.json', '.eslintrc']);
        const hasEslintConfig =
        /* istanbul ignore next */
        (cov_25gbrynu21().s[25]++, eslintConfigs.some(config => {
          /* istanbul ignore next */
          cov_25gbrynu21().f[2]++;
          cov_25gbrynu21().s[26]++;
          return fs.existsSync(path.join(workingDir, config));
        }));
        /* istanbul ignore next */
        cov_25gbrynu21().s[27]++;
        if (!hasEslintConfig) {
          /* istanbul ignore next */
          cov_25gbrynu21().b[6][0]++;
          cov_25gbrynu21().s[28]++;
          results.strike2.issues.push('No ESLint configuration found');
          /* istanbul ignore next */
          cov_25gbrynu21().s[29]++;
          results.strike2.quality = 70;
        } else {
          /* istanbul ignore next */
          cov_25gbrynu21().b[6][1]++;
          cov_25gbrynu21().s[30]++;
          // Try running eslint
          try {
            /* istanbul ignore next */
            cov_25gbrynu21().s[31]++;
            execSync('npx eslint . --format json --no-warn-ignored', {
              cwd: workingDir,
              stdio: 'pipe',
              timeout: 15000
            });
          } catch (lintError) {
            /* istanbul ignore next */
            cov_25gbrynu21().s[32]++;
            // Parse ESLint output to count errors
            if (lintError.stdout) {
              /* istanbul ignore next */
              cov_25gbrynu21().b[7][0]++;
              cov_25gbrynu21().s[33]++;
              try {
                const lintResults =
                /* istanbul ignore next */
                (cov_25gbrynu21().s[34]++, JSON.parse(lintError.stdout));
                const totalErrors =
                /* istanbul ignore next */
                (cov_25gbrynu21().s[35]++, lintResults.reduce((sum, file) => {
                  /* istanbul ignore next */
                  cov_25gbrynu21().f[3]++;
                  cov_25gbrynu21().s[36]++;
                  return sum + file.errorCount;
                }, 0));
                const totalWarnings =
                /* istanbul ignore next */
                (cov_25gbrynu21().s[37]++, lintResults.reduce((sum, file) => {
                  /* istanbul ignore next */
                  cov_25gbrynu21().f[4]++;
                  cov_25gbrynu21().s[38]++;
                  return sum + file.warningCount;
                }, 0));
                /* istanbul ignore next */
                cov_25gbrynu21().s[39]++;
                if (totalErrors > 0) {
                  /* istanbul ignore next */
                  cov_25gbrynu21().b[8][0]++;
                  cov_25gbrynu21().s[40]++;
                  results.strike2.issues.push(`${totalErrors} lint errors found`);
                  /* istanbul ignore next */
                  cov_25gbrynu21().s[41]++;
                  results.strike2.quality = Math.max(20, 100 - totalErrors * 5);
                } else
                /* istanbul ignore next */
                {
                  cov_25gbrynu21().b[8][1]++;
                }
                cov_25gbrynu21().s[42]++;
                if (totalWarnings > 0) {
                  /* istanbul ignore next */
                  cov_25gbrynu21().b[9][0]++;
                  cov_25gbrynu21().s[43]++;
                  results.strike2.issues.push(`${totalWarnings} lint warnings found`);
                  /* istanbul ignore next */
                  cov_25gbrynu21().s[44]++;
                  results.strike2.quality = Math.min(results.strike2.quality, 100 - totalWarnings * 2);
                } else
                /* istanbul ignore next */
                {
                  cov_25gbrynu21().b[9][1]++;
                }
              } catch {
                /* istanbul ignore next */
                cov_25gbrynu21().s[45]++;
                results.strike2.issues.push('Lint check failed');
                /* istanbul ignore next */
                cov_25gbrynu21().s[46]++;
                results.strike2.quality = 60;
              }
            } else {
              /* istanbul ignore next */
              cov_25gbrynu21().b[7][1]++;
              cov_25gbrynu21().s[47]++;
              results.strike2.issues.push('Lint command failed');
              /* istanbul ignore next */
              cov_25gbrynu21().s[48]++;
              results.strike2.quality = 60;
            }
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_25gbrynu21().s[49]++;
        results.strike2.issues.push(`Lint check error: ${error.message}`);
        /* istanbul ignore next */
        cov_25gbrynu21().s[50]++;
        results.strike2.quality = 60;
      }

      // Strike 3: Test Quality Check
      /* istanbul ignore next */
      cov_25gbrynu21().s[51]++;
      try {
        const packagePath =
        /* istanbul ignore next */
        (cov_25gbrynu21().s[52]++, path.join(workingDir, 'package.json'));
        /* istanbul ignore next */
        cov_25gbrynu21().s[53]++;
        if (fs.existsSync(packagePath)) {
          /* istanbul ignore next */
          cov_25gbrynu21().b[10][0]++;
          const packageJson =
          /* istanbul ignore next */
          (cov_25gbrynu21().s[54]++, JSON.parse(fs.readFileSync(packagePath, 'utf8')));

          // Check if test script exists
          /* istanbul ignore next */
          cov_25gbrynu21().s[55]++;
          if (
          /* istanbul ignore next */
          (cov_25gbrynu21().b[12][0]++, !packageJson.scripts) ||
          /* istanbul ignore next */
          (cov_25gbrynu21().b[12][1]++, !packageJson.scripts.test)) {
            /* istanbul ignore next */
            cov_25gbrynu21().b[11][0]++;
            cov_25gbrynu21().s[56]++;
            results.strike3.issues.push('No test script defined');
            /* istanbul ignore next */
            cov_25gbrynu21().s[57]++;
            results.strike3.quality = 40;
          } else {
            /* istanbul ignore next */
            cov_25gbrynu21().b[11][1]++;
            cov_25gbrynu21().s[58]++;
            // Try running tests
            try {
              /* istanbul ignore next */
              cov_25gbrynu21().s[59]++;
              execSync('npm test', {
                cwd: workingDir,
                stdio: 'pipe',
                timeout: 30000
              });
            } catch {
              /* istanbul ignore next */
              cov_25gbrynu21().s[60]++;
              results.strike3.issues.push('Tests are failing');
              /* istanbul ignore next */
              cov_25gbrynu21().s[61]++;
              results.strike3.quality = 30;
            }

            // Check for coverage script
            /* istanbul ignore next */
            cov_25gbrynu21().s[62]++;
            if (packageJson.scripts['test:coverage']) {
              /* istanbul ignore next */
              cov_25gbrynu21().b[13][0]++;
              cov_25gbrynu21().s[63]++;
              try {
                /* istanbul ignore next */
                cov_25gbrynu21().s[64]++;
                execSync('npm run test:coverage', {
                  cwd: workingDir,
                  stdio: 'pipe',
                  timeout: 45000
                });
              } catch {
                /* istanbul ignore next */
                cov_25gbrynu21().s[65]++;
                results.strike3.issues.push('Coverage check failed');
                /* istanbul ignore next */
                cov_25gbrynu21().s[66]++;
                results.strike3.quality = Math.min(results.strike3.quality, 70);
              }
            } else {
              /* istanbul ignore next */
              cov_25gbrynu21().b[13][1]++;
              cov_25gbrynu21().s[67]++;
              results.strike3.issues.push('No coverage script defined');
              /* istanbul ignore next */
              cov_25gbrynu21().s[68]++;
              results.strike3.quality = Math.min(results.strike3.quality, 80);
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_25gbrynu21().b[10][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_25gbrynu21().s[69]++;
        results.strike3.issues.push(`Test check error: ${error.message}`);
        /* istanbul ignore next */
        cov_25gbrynu21().s[70]++;
        results.strike3.quality = 40;
      }

      // Determine overall readiness
      /* istanbul ignore next */
      cov_25gbrynu21().s[71]++;
      results.overallReady =
      /* istanbul ignore next */
      (cov_25gbrynu21().b[14][0]++, results.strike1.quality >= 100) &&
      /* istanbul ignore next */
      (cov_25gbrynu21().b[14][1]++, results.strike2.quality >= 100) &&
      /* istanbul ignore next */
      (cov_25gbrynu21().b[14][2]++, results.strike3.quality >= 100);
    } catch (error) {
      /* istanbul ignore next */
      cov_25gbrynu21().s[72]++;
      console.error('Error in strike quality check:', error);
      /* istanbul ignore next */
      cov_25gbrynu21().s[73]++;
      results.overallReady = false;
    }
    /* istanbul ignore next */
    cov_25gbrynu21().s[74]++;
    return results;
  }

  /**
   * Creates a task creation task to improve quality before strikes
   */
  createQualityImprovementTask(qualityResults, _projectName) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[5]++;
    const issues =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[75]++, []);
    /* istanbul ignore next */
    cov_25gbrynu21().s[76]++;
    Object.values(qualityResults).forEach(strike => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[6]++;
      cov_25gbrynu21().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_25gbrynu21().b[16][0]++, strike.quality < 100) &&
      /* istanbul ignore next */
      (cov_25gbrynu21().b[16][1]++, strike.issues)) {
        /* istanbul ignore next */
        cov_25gbrynu21().b[15][0]++;
        cov_25gbrynu21().s[78]++;
        issues.push(...strike.issues.map(issue => {
          /* istanbul ignore next */
          cov_25gbrynu21().f[7]++;
          cov_25gbrynu21().s[79]++;
          return `${strike.name}: ${issue}`;
        }));
      } else
      /* istanbul ignore next */
      {
        cov_25gbrynu21().b[15][1]++;
      }
    });
    /* istanbul ignore next */
    cov_25gbrynu21().s[80]++;
    return {
      id: `quality-improvement-${Date.now()}`,
      title: 'Create Quality Improvement Tasks',
      description: 'Analyze project quality issues and create specific tasks to reach 100% quality for all strikes',
      mode: 'TASK-CREATION',
      priority: 'high',
      status: 'pending',
      prompt: `Project quality assessment shows issues preventing 100% strike success:

Quality Status:
- Strike 1 (Build): ${
      /* istanbul ignore next */
      (cov_25gbrynu21().b[17][0]++, qualityResults.strike1?.quality) ||
      /* istanbul ignore next */
      (cov_25gbrynu21().b[17][1]++, 0)}%
- Strike 2 (Lint): ${
      /* istanbul ignore next */
      (cov_25gbrynu21().b[18][0]++, qualityResults.strike2?.quality) ||
      /* istanbul ignore next */
      (cov_25gbrynu21().b[18][1]++, 0)}%  
- Strike 3 (Tests): ${
      /* istanbul ignore next */
      (cov_25gbrynu21().b[19][0]++, qualityResults.strike3?.quality) ||
      /* istanbul ignore next */
      (cov_25gbrynu21().b[19][1]++, 0)}%

Issues Found:
${issues.map(issue => {
        /* istanbul ignore next */
        cov_25gbrynu21().f[8]++;
        cov_25gbrynu21().s[81]++;
        return `- ${issue}`;
      }).join('\n')}

TASK: Analyze these quality gaps and create specific improvement tasks to bring ALL strikes to 100% quality. Create tasks for:
1. Build issues (missing dependencies, build failures, configuration)
2. Code quality issues (lint errors, style violations, code standards)
3. Testing issues (failing tests, missing coverage, test setup)

Insert all improvement tasks BEFORE the strike review tasks. Strikes should always remain last in the task list.`,
      success_criteria: ['All quality issues identified and analyzed', 'Specific improvement tasks created for each quality gap', 'Tasks properly prioritized and ordered before strikes', 'Clear path to 100% quality established'],
      important_files: ['package.json', 'eslint.config.js', '**/*.test.js'],
      requires_research: true,
      is_quality_improvement_task: true,
      quality_analysis: qualityResults
    };
  }

  /**
   * Ensures strike review tasks are always at the end of the task list
   * Inserts improvement tasks before strikes
   */
  insertTasksBeforeStrikes(todoData, newTasks) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[9]++;
    // Separate strike tasks from other tasks
    const strikeTasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[82]++, todoData.tasks.filter(task => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[10]++;
      cov_25gbrynu21().s[83]++;
      return task.is_review_task;
    }));
    const nonStrikeTasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[84]++, todoData.tasks.filter(task => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[11]++;
      cov_25gbrynu21().s[85]++;
      return !task.is_review_task;
    }));

    // Combine non-strike tasks with new tasks, then add strikes at the end
    /* istanbul ignore next */
    cov_25gbrynu21().s[86]++;
    todoData.tasks = [...nonStrikeTasks, ...newTasks, ...strikeTasks];
    /* istanbul ignore next */
    cov_25gbrynu21().s[87]++;
    return todoData;
  }

  /**
   * Inserts a quality improvement task before strikes and returns updated todo data
   */
  injectQualityImprovementTask(todoData, qualityResults, projectName) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[12]++;
    const qualityTask =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[88]++, this.createQualityImprovementTask(qualityResults, projectName));

    // Insert the quality improvement task before strikes
    /* istanbul ignore next */
    cov_25gbrynu21().s[89]++;
    return this.insertTasksBeforeStrikes(todoData, [qualityTask]);
  }
  createReviewTask(strikeNumber, _projectName) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[13]++;
    const criteria =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[90]++, this.reviewCriteria[strikeNumber]);
    /* istanbul ignore next */
    cov_25gbrynu21().s[91]++;
    if (!criteria) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[20][0]++;
      cov_25gbrynu21().s[92]++;
      throw new Error(`Invalid strike number: ${strikeNumber}`);
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[20][1]++;
    }
    cov_25gbrynu21().s[93]++;
    return {
      id: `review-strike-${strikeNumber}`,
      mode: 'REVIEWER',
      description: `Review Strike ${strikeNumber}: ${criteria.name}`,
      prompt: this.buildReviewPrompt(strikeNumber, criteria),
      dependencies: ['**/*.js', '**/*.ts', 'package.json', 'tsconfig.json'],
      important_files: ['package.json', '.eslintrc', 'jest.config.js'],
      status: 'pending',
      requires_research: false,
      subtasks: [],
      is_review_task: true,
      strike_number: strikeNumber
    };
  }
  buildReviewPrompt(strikeNumber, criteria) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[14]++;
    let prompt =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[94]++, `Perform a comprehensive code review for Strike ${strikeNumber}: ${criteria.name}\n\n`);
    /* istanbul ignore next */
    cov_25gbrynu21().s[95]++;
    prompt += `Review Checklist:\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[96]++;
    criteria.tasks.forEach((task, idx) => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[15]++;
      cov_25gbrynu21().s[97]++;
      prompt += `${idx + 1}. ${task}\n`;
    });
    /* istanbul ignore next */
    cov_25gbrynu21().s[98]++;
    prompt += `\nProvide a detailed review report with:\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[99]++;
    prompt += `- Clear PASS/FAIL status for each criterion\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[100]++;
    prompt += `- Specific issues found with file locations\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[101]++;
    prompt += `- Remediation steps if review fails\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[102]++;
    prompt += `- Overall recommendation\n\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[103]++;
    prompt += `If the review fails, create specific tasks to address each issue found.\n`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[104]++;
    prompt += `Be thorough but fair - focus on objective criteria.`;
    /* istanbul ignore next */
    cov_25gbrynu21().s[105]++;
    return prompt;
  }
  shouldInjectReviewTask(todoData) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[16]++;
    cov_25gbrynu21().s[106]++;
    // Check if we should inject a review task
    if (
    /* istanbul ignore next */
    (cov_25gbrynu21().b[22][0]++, !todoData) ||
    /* istanbul ignore next */
    (cov_25gbrynu21().b[22][1]++, !todoData.tasks)) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[21][0]++;
      cov_25gbrynu21().s[107]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[21][1]++;
    }
    const nonReviewTasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[108]++, todoData.tasks.filter(t => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[17]++;
      cov_25gbrynu21().s[109]++;
      return !t.is_review_task;
    }));
    const completedNonReviewTasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[110]++, nonReviewTasks.filter(t => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[18]++;
      cov_25gbrynu21().s[111]++;
      return t.status === 'completed';
    }).length);
    const pendingReviewTasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[112]++, todoData.tasks.filter(t => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[19]++;
      cov_25gbrynu21().s[113]++;
      return /* istanbul ignore next */(cov_25gbrynu21().b[23][0]++, t.is_review_task) &&
      /* istanbul ignore next */
      (cov_25gbrynu21().b[23][1]++, t.status === 'pending');
    }).length);

    // Inject review task every 5 completed tasks, if no review pending
    /* istanbul ignore next */
    cov_25gbrynu21().s[114]++;
    return /* istanbul ignore next */(cov_25gbrynu21().b[24][0]++, completedNonReviewTasks > 0) &&
    /* istanbul ignore next */
    (cov_25gbrynu21().b[24][1]++, completedNonReviewTasks % 5 === 0) &&
    /* istanbul ignore next */
    (cov_25gbrynu21().b[24][2]++, pendingReviewTasks === 0);
  }
  getNextStrikeNumber(todoData) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[20]++;
    const completedStrikes =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[115]++, todoData.tasks.filter(t => {
      /* istanbul ignore next */
      cov_25gbrynu21().f[21]++;
      cov_25gbrynu21().s[116]++;
      return /* istanbul ignore next */(cov_25gbrynu21().b[25][0]++, t.is_review_task) &&
      /* istanbul ignore next */
      (cov_25gbrynu21().b[25][1]++, t.status === 'completed');
    }).length);
    /* istanbul ignore next */
    cov_25gbrynu21().s[117]++;
    return completedStrikes % 3 + 1;
  }
  handleReviewResult(todoData, reviewPassed) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[22]++;
    cov_25gbrynu21().s[118]++;
    if (reviewPassed) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[26][0]++;
      cov_25gbrynu21().s[119]++;
      todoData.review_strikes++;

      // Check if this was the third strike
      /* istanbul ignore next */
      cov_25gbrynu21().s[120]++;
      if (todoData.review_strikes === 3) {
        /* istanbul ignore next */
        cov_25gbrynu21().b[27][0]++;
        cov_25gbrynu21().s[121]++;
        return {
          action: 'strikes_complete',
          message: 'All three review strikes passed! Project meets quality standards.'
        };
      } else {
        /* istanbul ignore next */
        cov_25gbrynu21().b[27][1]++;
        cov_25gbrynu21().s[122]++;
        return {
          action: 'continue',
          message: `Strike ${todoData.review_strikes} passed. ${3 - todoData.review_strikes} strikes remaining.`
        };
      }
    } else {
      /* istanbul ignore next */
      cov_25gbrynu21().b[26][1]++;
      cov_25gbrynu21().s[123]++;
      return {
        action: 'remediation_needed',
        message: 'Review failed. Remediation tasks have been created.'
      };
    }
  }
  createRemediationTasks(failures) {
    /* istanbul ignore next */
    cov_25gbrynu21().f[23]++;
    const tasks =
    /* istanbul ignore next */
    (cov_25gbrynu21().s[124]++, []);
    /* istanbul ignore next */
    cov_25gbrynu21().s[125]++;
    if (failures.build_errors) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[28][0]++;
      cov_25gbrynu21().s[126]++;
      failures.build_errors.forEach(error => {
        /* istanbul ignore next */
        cov_25gbrynu21().f[24]++;
        cov_25gbrynu21().s[127]++;
        tasks.push({
          id: `fix-build-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          mode: 'DEBUGGING',
          description: `Fix build error: ${error.error}`,
          prompt: `Fix the build error in ${error.file}: ${error.error}\n\nSuggested fix: ${error.fix}`,
          dependencies: [error.file],
          important_files: ['package.json', 'tsconfig.json'],
          status: 'pending',
          priority: 'high',
          requires_research: false,
          subtasks: []
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[28][1]++;
    }
    cov_25gbrynu21().s[128]++;
    if (failures.lint_errors) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[29][0]++;
      cov_25gbrynu21().s[129]++;
      tasks.push({
        id: `fix-lint-${Date.now()}`,
        mode: 'REFACTORING',
        description: 'Fix all lint errors',
        prompt: `Fix the following lint errors:\n${failures.lint_errors.map(e => {
          /* istanbul ignore next */
          cov_25gbrynu21().f[25]++;
          cov_25gbrynu21().s[130]++;
          return `- ${e}`;
        }).join('\n')}`,
        dependencies:
        /* istanbul ignore next */
        (cov_25gbrynu21().b[30][0]++, failures.lint_files) ||
        /* istanbul ignore next */
        (cov_25gbrynu21().b[30][1]++, []),
        important_files: ['.eslintrc', 'tslint.json'],
        status: 'pending',
        priority: 'high',
        requires_research: false,
        subtasks: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[29][1]++;
    }
    cov_25gbrynu21().s[131]++;
    if (failures.test_failures) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[31][0]++;
      cov_25gbrynu21().s[132]++;
      failures.test_failures.forEach(test => {
        /* istanbul ignore next */
        cov_25gbrynu21().f[26]++;
        cov_25gbrynu21().s[133]++;
        tasks.push({
          id: `fix-test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          mode: 'DEBUGGING',
          description: `Fix failing test: ${test.name}`,
          prompt: `Fix the failing test: ${test.name}\n\nError: ${test.error}`,
          dependencies: [test.file],
          important_files:
          /* istanbul ignore next */
          (cov_25gbrynu21().b[32][0]++, test.related_files) ||
          /* istanbul ignore next */
          (cov_25gbrynu21().b[32][1]++, []),
          status: 'pending',
          priority: 'high',
          requires_research: false,
          subtasks: []
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[31][1]++;
    }
    cov_25gbrynu21().s[134]++;
    if (failures.coverage_gaps) {
      /* istanbul ignore next */
      cov_25gbrynu21().b[33][0]++;
      cov_25gbrynu21().s[135]++;
      failures.coverage_gaps.forEach(gap => {
        /* istanbul ignore next */
        cov_25gbrynu21().f[27]++;
        cov_25gbrynu21().s[136]++;
        tasks.push({
          id: `improve-coverage-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          mode: 'TESTING',
          description: `Improve test coverage for ${gap.file}`,
          prompt: `Improve test coverage for ${gap.file} from ${gap.current}% to ${gap.required}%.\n\nFocus on: ${gap.uncovered_lines}`,
          dependencies: [gap.file],
          important_files:
          /* istanbul ignore next */
          (cov_25gbrynu21().b[34][0]++, gap.test_files) ||
          /* istanbul ignore next */
          (cov_25gbrynu21().b[34][1]++, []),
          status: 'pending',
          priority: gap.is_critical ?
          /* istanbul ignore next */
          (cov_25gbrynu21().b[35][0]++, 'high') :
          /* istanbul ignore next */
          (cov_25gbrynu21().b[35][1]++, 'medium'),
          requires_research: false,
          subtasks: []
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_25gbrynu21().b[33][1]++;
    }
    cov_25gbrynu21().s[137]++;
    return tasks;
  }
}
/* istanbul ignore next */
cov_25gbrynu21().s[138]++;
module.exports = ReviewSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,