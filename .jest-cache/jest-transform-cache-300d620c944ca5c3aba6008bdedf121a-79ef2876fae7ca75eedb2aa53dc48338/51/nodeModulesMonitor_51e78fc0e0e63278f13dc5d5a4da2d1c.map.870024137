{"version":3,"names":["cov_b35kfj846","actualCoverage","fs","s","require","path","crypto","NodeModulesMonitor","constructor","options","b","f","projectRoot","resolve","process","cwd","nodeModulesPath","join","backupDir","checksumFile","logFile","criticalFiles","config","enableBackup","enableRestore","enableDetailed","maxBackups","checksumAlgorithm","preTestChecksums","Map","violations","monitoringActive","log","startMonitoring","ensureBackupDirectory","generateChecksums","createBackups","filesMonitored","size","backupsCreated","success","timestamp","Date","toISOString","error","message","Error","checkIntegrity","currentChecksums","filePath","originalChecksum","currentChecksum","calculateFileChecksum","set","violation","file","type","push","newFiles","detectUnexpectedFiles","forEach","result","length","filesChecked","unexpectedFiles","violationCount","types","Set","map","v","restoreCorruptedFiles","restored","availableBackups","getAvailableBackups","restoredCount","restoredFiles","restoreFile","totalViolations","files","generateReport","report","summary","corruptedFiles","filter","integrityStatus","fullPath","find","status","stopMonitoring","saveChecksums","finalViolations","clear","existsSync","checksum","detailedPaths","packagePath","fullPackagePath","addPackageFiles","getAllFilesRecursive","shouldSkipFile","package","Promise","reject","stream","createReadStream","hash","createHash","on","chunk","update","digest","replace","backupPath","promises","mkdir","recursive","backedUpCount","sourcePath","backupFilePath","dirname","copyFile","cleanupOldBackups","filesBackedUp","backups","latestBackup","relativePath","relative","backup","suspiciousPatterns","pattern","matches","test","match","isLegitimateFile","toString","basename","legitimateFiles","includes","dir","extensions","traverse","currentDir","items","readdirSync","item","stat","statSync","isDirectory","startsWith","isFile","extname","skipPatterns","some","readdir","itemPath","name","mtime","sort","a","toDelete","slice","rm","force","checksumData","checksums","Object","fromEntries","algorithm","writeFile","JSON","stringify","data","level","logEntry","toUpperCase","levelEmoji","info","warn","env","NODE_ENV","console","keys","writeLogToFile","catch","logLine","appendFile","module","exports"],"sources":["nodeModulesMonitor.js"],"sourcesContent":["/**\n * Node Modules File Integrity Monitor\n * \n * This module provides comprehensive monitoring of node_modules file integrity\n * to detect corruption attempts during test runs. It creates checksums before\n * test runs and validates them afterward to ensure no files were contaminated.\n * \n * Features:\n * - Pre/post test integrity checking\n * - Checksum-based corruption detection\n * - Automatic backup and restoration\n * - Detailed corruption reporting\n * - Integration with test lifecycle\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nclass NodeModulesMonitor {\n    constructor(options = {}) {\n        this.projectRoot = path.resolve(options.projectRoot || process.cwd());\n        this.nodeModulesPath = path.join(this.projectRoot, 'node_modules');\n        this.backupDir = path.join(this.projectRoot, '.node-modules-backup');\n        this.checksumFile = path.join(this.projectRoot, '.node-modules-checksums.json');\n        this.logFile = path.join(this.projectRoot, 'development/node-modules-monitor.log');\n        \n        // Critical files to monitor closely\n        this.criticalFiles = [\n            'exit/lib/exit.js',\n            'jest-worker/build/index.js',\n            'jest/package.json',\n            'exit/package.json'\n        ];\n        \n        // Configuration\n        this.config = {\n            enableBackup: options.enableBackup !== false,\n            enableRestore: options.enableRestore !== false,\n            enableDetailed: options.enableDetailed !== false,\n            maxBackups: options.maxBackups || 3,\n            checksumAlgorithm: options.checksumAlgorithm || 'sha256',\n            ...options.config\n        };\n        \n        // Runtime state\n        this.preTestChecksums = new Map();\n        this.violations = [];\n        this.monitoringActive = false;\n        \n        this.log('NodeModulesMonitor initialized', { projectRoot: this.projectRoot });\n    }\n    \n    /**\n     * Start monitoring before test run\n     * Creates checksums and backups of critical files\n     */\n    async startMonitoring() {\n        this.log('Starting node_modules integrity monitoring');\n        this.monitoringActive = true;\n        this.violations = [];\n        \n        try {\n            // Create backup directory if needed\n            if (this.config.enableBackup) {\n                await this.ensureBackupDirectory();\n            }\n            \n            // Generate checksums for critical files\n            await this.generateChecksums();\n            \n            // Create backups of critical files\n            if (this.config.enableBackup) {\n                await this.createBackups();\n            }\n            \n            this.log('Node_modules monitoring started successfully', {\n                filesMonitored: this.preTestChecksums.size,\n                backupsCreated: this.config.enableBackup\n            });\n            \n            return {\n                success: true,\n                filesMonitored: this.preTestChecksums.size,\n                timestamp: new Date().toISOString()\n            };\n            \n        } catch (error) {\n            this.log('Failed to start monitoring', { error: error.message }, 'error');\n            this.monitoringActive = false;\n            throw new Error(`Failed to start node_modules monitoring: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Check integrity after test run\n     * Validates checksums and detects any corruption\n     */\n    async checkIntegrity() {\n        if (!this.monitoringActive) {\n            throw new Error('Monitoring not active - call startMonitoring() first');\n        }\n        \n        this.log('Checking node_modules integrity');\n        \n        try {\n            const violations = [];\n            const currentChecksums = new Map();\n            \n            // Check each monitored file\n            for (const [filePath, originalChecksum] of this.preTestChecksums) {\n                const currentChecksum = await this.calculateFileChecksum(filePath);\n                currentChecksums.set(filePath, currentChecksum);\n                \n                if (currentChecksum !== originalChecksum) {\n                    const violation = {\n                        file: filePath,\n                        type: 'CHECKSUM_MISMATCH',\n                        originalChecksum,\n                        currentChecksum,\n                        timestamp: new Date().toISOString()\n                    };\n                    \n                    violations.push(violation);\n                    this.log('Integrity violation detected', violation, 'error');\n                }\n            }\n            \n            // Check for new files that shouldn't exist\n            const newFiles = await this.detectUnexpectedFiles();\n            newFiles.forEach(file => {\n                const violation = {\n                    file: file,\n                    type: 'UNEXPECTED_FILE',\n                    timestamp: new Date().toISOString()\n                };\n                violations.push(violation);\n                this.log('Unexpected file detected', violation, 'warn');\n            });\n            \n            this.violations = violations;\n            \n            const result = {\n                success: violations.length === 0,\n                violations,\n                filesChecked: this.preTestChecksums.size,\n                unexpectedFiles: newFiles.length,\n                timestamp: new Date().toISOString()\n            };\n            \n            if (violations.length > 0) {\n                this.log('Integrity check FAILED', {\n                    violationCount: violations.length,\n                    types: [...new Set(violations.map(v => v.type))]\n                }, 'error');\n            } else {\n                this.log('Integrity check PASSED', { filesChecked: this.preTestChecksums.size });\n            }\n            \n            return result;\n            \n        } catch (error) {\n            this.log('Integrity check failed', { error: error.message }, 'error');\n            throw new Error(`Integrity check failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Restore corrupted files from backups\n     */\n    async restoreCorruptedFiles() {\n        if (this.violations.length === 0) {\n            this.log('No violations to restore');\n            return { restored: 0, message: 'No corrupted files found' };\n        }\n        \n        if (!this.config.enableRestore) {\n            this.log('Restore disabled in configuration');\n            return { restored: 0, message: 'Restore disabled' };\n        }\n        \n        // Check if backups are available before attempting restoration\n        const availableBackups = await this.getAvailableBackups();\n        if (availableBackups.length === 0) {\n            this.log('No backups available for restoration', {}, 'error');\n            throw new Error('No backups available');\n        }\n        \n        this.log('Starting file restoration');\n        let restoredCount = 0;\n        const restoredFiles = [];\n        \n        for (const violation of this.violations) {\n            if (violation.type === 'CHECKSUM_MISMATCH') {\n                try {\n                    await this.restoreFile(violation.file);\n                    restoredFiles.push(violation.file);\n                    restoredCount++;\n                    this.log('File restored', { file: violation.file });\n                } catch (error) {\n                    this.log('Failed to restore file', {\n                        file: violation.file,\n                        error: error.message\n                    }, 'error');\n                }\n            }\n        }\n        \n        this.log('File restoration completed', {\n            restoredCount,\n            totalViolations: this.violations.length\n        });\n        \n        return {\n            restored: restoredCount,\n            files: restoredFiles,\n            message: `Restored ${restoredCount} corrupted files`\n        };\n    }\n    \n    /**\n     * Generate detailed integrity report\n     */\n    generateReport() {\n        const report = {\n            timestamp: new Date().toISOString(),\n            monitoringActive: this.monitoringActive,\n            filesMonitored: this.preTestChecksums.size,\n            violations: this.violations,\n            summary: {\n                totalViolations: this.violations.length,\n                corruptedFiles: this.violations.filter(v => v.type === 'CHECKSUM_MISMATCH').length,\n                unexpectedFiles: this.violations.filter(v => v.type === 'UNEXPECTED_FILE').length,\n                integrityStatus: this.violations.length === 0 ? 'CLEAN' : 'COMPROMISED'\n            },\n            criticalFiles: this.criticalFiles.map(file => {\n                const fullPath = path.join(this.nodeModulesPath, file);\n                const violation = this.violations.find(v => v.file === fullPath);\n                return {\n                    file,\n                    status: violation ? 'COMPROMISED' : 'CLEAN',\n                    violation: violation || null\n                };\n            })\n        };\n        \n        return report;\n    }\n    \n    /**\n     * Stop monitoring and cleanup\n     */\n    async stopMonitoring() {\n        this.log('Stopping node_modules monitoring');\n        \n        // Save final checksums for future reference\n        if (this.preTestChecksums.size > 0) {\n            await this.saveChecksums();\n        }\n        \n        this.monitoringActive = false;\n        \n        this.log('Node_modules monitoring stopped');\n        \n        return {\n            success: true,\n            finalViolations: this.violations.length,\n            timestamp: new Date().toISOString()\n        };\n    }\n    \n    // ========================================================================\n    // PRIVATE METHODS\n    // ========================================================================\n    \n    /**\n     * Generate checksums for all critical files\n     */\n    async generateChecksums() {\n        this.preTestChecksums.clear();\n        \n        for (const file of this.criticalFiles) {\n            const fullPath = path.join(this.nodeModulesPath, file);\n            if (fs.existsSync(fullPath)) {\n                const checksum = await this.calculateFileChecksum(fullPath);\n                this.preTestChecksums.set(fullPath, checksum);\n            }\n        }\n        \n        // If detailed monitoring enabled, check all JS files in critical packages\n        if (this.config.enableDetailed) {\n            const detailedPaths = [\n                'exit',\n                'jest-worker',\n                'jest'\n            ];\n            \n            for (const packagePath of detailedPaths) {\n                const fullPackagePath = path.join(this.nodeModulesPath, packagePath);\n                if (fs.existsSync(fullPackagePath)) {\n                    await this.addPackageFiles(fullPackagePath);\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add all JS files from a package to monitoring\n     */\n    async addPackageFiles(packagePath) {\n        try {\n            const files = this.getAllFilesRecursive(packagePath, ['.js', '.json']);\n            \n            for (const file of files) {\n                // Skip large files and test files\n                if (this.shouldSkipFile(file)) {\n                    continue;\n                }\n                \n                const checksum = await this.calculateFileChecksum(file);\n                this.preTestChecksums.set(file, checksum);\n            }\n        } catch (error) {\n            this.log('Failed to add package files', {\n                package: packagePath,\n                error: error.message\n            }, 'warn');\n        }\n    }\n    \n    /**\n     * Calculate checksum for a file\n     */\n    async calculateFileChecksum(filePath) {\n        return new Promise((resolve, reject) => {\n            try {\n                // Create a read stream to detect file system errors\n                const stream = fs.createReadStream(filePath);\n                const hash = crypto.createHash(this.config.checksumAlgorithm);\n                \n                stream.on('error', (error) => {\n                    reject(new Error(`Failed to read file ${filePath}: ${error.message}`));\n                });\n                \n                stream.on('data', (chunk) => {\n                    hash.update(chunk);\n                });\n                \n                stream.on('end', () => {\n                    resolve(hash.digest('hex'));\n                });\n                \n            } catch (error) {\n                reject(new Error(`Failed to calculate checksum for ${filePath}: ${error.message}`));\n            }\n        });\n    }\n    \n    /**\n     * Create backups of critical files\n     */\n    async createBackups() {\n        const timestamp = new Date().toISOString().replace(/:/g, '-');\n        const backupPath = path.join(this.backupDir, timestamp);\n        \n        await fs.promises.mkdir(backupPath, { recursive: true });\n        \n        let backedUpCount = 0;\n        \n        for (const file of this.criticalFiles) {\n            const sourcePath = path.join(this.nodeModulesPath, file);\n            const backupFilePath = path.join(backupPath, file);\n            \n            if (fs.existsSync(sourcePath)) {\n                try {\n                    await fs.promises.mkdir(path.dirname(backupFilePath), { recursive: true });\n                    await fs.promises.copyFile(sourcePath, backupFilePath);\n                    backedUpCount++;\n                } catch (error) {\n                    this.log('Failed to backup file', {\n                        file,\n                        error: error.message\n                    }, 'warn');\n                }\n            }\n        }\n        \n        // Cleanup old backups\n        await this.cleanupOldBackups();\n        \n        this.log('Backups created', { \n            backupPath, \n            filesBackedUp: backedUpCount \n        });\n    }\n    \n    /**\n     * Restore a file from the most recent backup\n     */\n    async restoreFile(filePath) {\n        const backups = await this.getAvailableBackups();\n        if (backups.length === 0) {\n            throw new Error('No backups available for restoration');\n        }\n        \n        const latestBackup = backups[0]; // Sorted by date, most recent first\n        const relativePath = path.relative(this.nodeModulesPath, filePath);\n        const backupFilePath = path.join(this.backupDir, latestBackup, relativePath);\n        \n        if (!fs.existsSync(backupFilePath)) {\n            throw new Error(`Backup not found: ${backupFilePath}`);\n        }\n        \n        // Restore the file\n        await fs.promises.copyFile(backupFilePath, filePath);\n        \n        this.log('File restored from backup', {\n            file: filePath,\n            backup: latestBackup\n        });\n    }\n    \n    /**\n     * Detect unexpected files in node_modules\n     */\n    async detectUnexpectedFiles() {\n        const unexpectedFiles = [];\n        \n        // Check for JSON files in critical packages that shouldn't be there\n        const suspiciousPatterns = [\n            /node_modules\\/exit\\/.*\\.json$/,\n            /node_modules\\/jest-worker\\/.*\\.json$/\n        ];\n        \n        for (const pattern of suspiciousPatterns) {\n            try {\n                const files = this.getAllFilesRecursive(this.nodeModulesPath);\n                const matches = files.filter(file => pattern.test(file));\n                \n                for (const match of matches) {\n                    // Check if it's a legitimate file (package.json, etc.)\n                    if (!this.isLegitimateFile(match)) {\n                        unexpectedFiles.push(match);\n                    }\n                }\n            } catch (error) {\n                this.log('Error detecting unexpected files', {\n                    pattern: pattern.toString(),\n                    error: error.message\n                }, 'warn');\n            }\n        }\n        \n        return unexpectedFiles;\n    }\n    \n    /**\n     * Check if a file is legitimate in node_modules\n     */\n    isLegitimateFile(filePath) {\n        const basename = path.basename(filePath);\n        const legitimateFiles = [\n            'package.json',\n            'package-lock.json',\n            'README.json',\n            'tsconfig.json'\n        ];\n        \n        return legitimateFiles.includes(basename);\n    }\n    \n    /**\n     * Get all files recursively from a directory\n     */\n    getAllFilesRecursive(dir, extensions = null) {\n        const files = [];\n        \n        function traverse(currentDir) {\n            try {\n                const items = fs.readdirSync(currentDir);\n                \n                for (const item of items) {\n                    const fullPath = path.join(currentDir, item);\n                    const stat = fs.statSync(fullPath);\n                    \n                    if (stat.isDirectory()) {\n                        // Skip node_modules subdirectories and common ignore patterns\n                        if (!item.startsWith('.') && item !== 'node_modules') {\n                            traverse(fullPath);\n                        }\n                    } else if (stat.isFile()) {\n                        if (!extensions || extensions.includes(path.extname(fullPath))) {\n                            files.push(fullPath);\n                        }\n                    }\n                }\n            } catch {\n                // Silently ignore permission errors\n            }\n        }\n        \n        traverse(dir);\n        return files;\n    }\n    \n    /**\n     * Check if a file should be skipped during monitoring\n     */\n    shouldSkipFile(filePath) {\n        const stat = fs.statSync(filePath);\n        const basename = path.basename(filePath);\n        \n        // Skip large files (> 1MB)\n        if (stat.size > 1024 * 1024) {\n            return true;\n        }\n        \n        // Skip test files and common ignore patterns\n        const skipPatterns = [\n            /\\.test\\./,\n            /\\.spec\\./,\n            /test/i,\n            /spec/i,\n            /example/i,\n            /demo/i,\n            /\\.min\\./\n        ];\n        \n        return skipPatterns.some(pattern => pattern.test(basename));\n    }\n    \n    /**\n     * Ensure backup directory exists\n     */\n    async ensureBackupDirectory() {\n        try {\n            await fs.promises.mkdir(this.backupDir, { recursive: true });\n        } catch (error) {\n            throw new Error(`Failed to create backup directory: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Get available backups sorted by date (newest first)\n     */\n    async getAvailableBackups() {\n        try {\n            if (!fs.existsSync(this.backupDir)) {\n                return [];\n            }\n            \n            const items = await fs.promises.readdir(this.backupDir);\n            const backups = [];\n            \n            for (const item of items) {\n                const itemPath = path.join(this.backupDir, item);\n                const stat = await fs.promises.stat(itemPath);\n                \n                if (stat.isDirectory()) {\n                    backups.push({\n                        name: item,\n                        path: itemPath,\n                        mtime: stat.mtime\n                    });\n                }\n            }\n            \n            // Sort by modification time, newest first\n            return backups\n                .sort((a, b) => b.mtime - a.mtime)\n                .map(backup => backup.name);\n                \n        } catch (error) {\n            this.log('Failed to get available backups', { error: error.message }, 'warn');\n            return [];\n        }\n    }\n    \n    /**\n     * Cleanup old backups beyond maxBackups limit\n     */\n    async cleanupOldBackups() {\n        try {\n            const backups = await this.getAvailableBackups();\n            \n            if (backups.length > this.config.maxBackups) {\n                // Keep only maxBackups, delete the rest (oldest first)\n                const toDelete = backups.slice(this.config.maxBackups);\n                \n                for (const backup of toDelete) {\n                    const backupPath = path.join(this.backupDir, backup);\n                    await fs.promises.rm(backupPath, { recursive: true, force: true });\n                    this.log('Old backup deleted', { backup });\n                }\n            }\n        } catch (error) {\n            this.log('Failed to cleanup old backups', { error: error.message }, 'warn');\n        }\n    }\n    \n    /**\n     * Save checksums to file for future reference\n     */\n    async saveChecksums() {\n        try {\n            const checksumData = {\n                timestamp: new Date().toISOString(),\n                checksums: Object.fromEntries(this.preTestChecksums),\n                algorithm: this.config.checksumAlgorithm\n            };\n            \n            await fs.promises.writeFile(\n                this.checksumFile,\n                JSON.stringify(checksumData, null, 2)\n            );\n        } catch (error) {\n            this.log('Failed to save checksums', { error: error.message }, 'warn');\n        }\n    }\n    \n    /**\n     * Log messages with timestamp and optional level\n     */\n    log(message, data = {}, level = 'info') {\n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            level: level.toUpperCase(),\n            message,\n            ...data\n        };\n        \n        // Console output for immediate feedback\n        const levelEmoji = {\n            info: 'ℹ️',\n            warn: '⚠️',\n            error: '❌'\n        };\n        \n        // Skip console output in test environment to avoid conflicts\n        if (process.env.NODE_ENV !== 'test') {\n            console.log(`${levelEmoji[level] || 'ℹ️'} [NodeModulesMonitor] ${message}`, \n                       Object.keys(data).length > 0 ? data : '');\n        }\n        \n        // File logging (async, non-blocking)\n        this.writeLogToFile(logEntry).catch(() => {\n            // Silently ignore log file write errors\n        });\n    }\n    \n    /**\n     * Write log entry to file\n     */\n    async writeLogToFile(logEntry) {\n        try {\n            // Skip file logging in test environment to avoid conflicts\n            if (process.env.NODE_ENV === 'test') {\n                return;\n            }\n            \n            // Ensure log directory exists\n            await fs.promises.mkdir(path.dirname(this.logFile), { recursive: true });\n            \n            const logLine = JSON.stringify(logEntry) + '\\n';\n            await fs.promises.appendFile(this.logFile, logLine);\n        } catch {\n            // Silently ignore - logging should not break the monitor\n        }\n    }\n}\n\nmodule.exports = NodeModulesMonitor;"],"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","ignoreList":[]}